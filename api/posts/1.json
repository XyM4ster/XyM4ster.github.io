{"total":28,"pageSize":12,"pageCount":3,"data":[{"title":"原型链污染","uid":"9801b7a6e4282f27dc334c37705d70aa","slug":"原型链污染","date":"2024-02-29T08:42:20.000Z","updated":"2024-02-29T10:43:12.900Z","comments":true,"path":"api/articles/原型链污染.json","cover":"/medias/hacker.jpg","text":"引言 之前看过原型链污染的相关内容，但是一直决定云里雾里，今天总结的时候，彻底弄明白了。 js原型链污染 Object.prototype中是包括一些属性的，详细见黑框 下图中的Foo.prototype、Object.prototype都是原型对象 把Object.protot...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"web","slug":"web","count":2,"path":"api/tags/web.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"re-engineer-core-principle-07","uid":"ad9b5bba7260fe69f150a16ce9de4386","slug":"re-engineer-core-principle-07","date":"2024-01-30T14:45:03.000Z","updated":"2024-02-29T10:40:35.672Z","comments":true,"path":"api/articles/re-engineer-core-principle-07.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 终于到第七部分了，快看完了 0x50 反调试技术50.1 反调试技术 反调试技术有很强的依赖性。有些反调试技术仅在特定版本的os下工作 本章的大部分技术可以用在Windows XP SP3(32位)和Win7 32位下 50.3 反调试技术分类 根据破解方法分成静态和动态两...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"re-engineer-core-principle-06","uid":"080514f34f3fd257fa211ebeac34b223","slug":"re-engineer-core-principle-06","date":"2024-01-23T03:31:18.000Z","updated":"2024-02-29T10:51:09.787Z","comments":true,"path":"api/articles/re-engineer-core-principle-06.json","cover":"/medias/web_security.jpg","text":"引言 快看完了，加油冲冲冲！希望回家前看完 0x45 TLS回调函数 TLS(Thread Local Storage 线程局部存储)回调函数(Callback function)常用于反调试。 TLS回调函数的运行要先于EP代码的执行，因此它可以作为一种反调试技术使用 45.1...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"re-engineer-core-principle-05","uid":"16f33ed3c99a8cc9a4a675e2c29d6341","slug":"re-engineer-core-principle-05","date":"2024-01-14T14:13:18.000Z","updated":"2024-02-29T10:45:04.769Z","comments":true,"path":"api/articles/re-engineer-core-principle-05.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 上一部分学的很快，集中看了一周就学完了，希望可以快点把这本书看完，然后用起来 0x36 64位计算36.1 64位计算环境Q：操作系统的演化 1985年 Intel 推出了 80386 CPU芯片 1995年 Miscrosoft发布 32位 Windows 95，计算机正...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"re-engineer-core-principle-04","uid":"3a44a24f5a69ff4f99f1bd18acd6c0b5","slug":"re-engineer-core-principle-04","date":"2024-01-07T10:57:34.000Z","updated":"2024-02-29T10:45:11.532Z","comments":true,"path":"api/articles/re-engineer-core-principle-04.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 第三部分学了好久，主要是因为中间参加了两次面试，但是最后也没有去上实习，害！ 还是好好努力学习吧 0x29 API钩取29.1 钩取Q：钩取(Hook)的整个流程如下 使用反汇编器&#x2F;调试器把握程序的结构与工作原理 开发需要的“钩子”代码，用于修改 Bug、改善程序...","link":"","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"汇编指令","uid":"0eefe6b6118865b181e289b1081cce4b","slug":"汇编指令","date":"2024-01-06T07:18:53.000Z","updated":"2024-01-06T14:17:05.439Z","comments":true,"path":"api/articles/汇编指令.json","cover":null,"text":"汇编指令Q：PUSHAD (将所有寄存器的值压入栈) PUSHAD &#x2F;&#x2F;是一个x86汇编指令，用于将通用寄存器（EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI）的值依次压入堆栈中。该指令的作用 &#x2F;&#x2F;是保存这些寄存器的值，以便...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"汇编","slug":"汇编","count":1,"path":"api/tags/汇编.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"leetcode刷题","uid":"2db13004f026edb4056c7fbb5f3564d1","slug":"leetcode刷题","date":"2023-12-25T02:34:41.000Z","updated":"2023-12-25T14:23:23.164Z","comments":true,"path":"api/articles/leetcode刷题.json","cover":[],"text":"数组二分法思路这里直接用左闭右开的写法，定义target在[left,right)区间内 那么有下面几点： while(left &lt; right)，因为left &#x3D;&#x3D; right是没有意义的 if(nums[middle] &gt; target)，ri...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"re-engineer-core-principle-03","uid":"449c952c21adaaa0689becdb96065fd3","slug":"re-engineer-core-principle-03","date":"2023-12-05T02:11:20.000Z","updated":"2024-02-29T10:45:19.161Z","comments":true,"path":"api/articles/re-engineer-core-principle-03.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 第三部分冲冲冲 这一部分要把没见过的汇编单独整理到一个文档里 0x21 Windows消息钩取21.1 钩子(Hook)Q：钩子 就是偷看或截取信息所有的手段或者工具 21.2 消息钩子Q：常规Windows信息流 发生键盘输人事件时，WM_KEYDOWN消息被添加到[OS...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"HOPPER-CCS-2023","uid":"ac1f5803919fdd2ccf7eeca40ae91dc2","slug":"HOPPER-CCS-2023","date":"2023-11-14T02:06:39.000Z","updated":"2023-11-16T14:37:40.378Z","comments":true,"path":"api/articles/HOPPER-CCS-2023.json","cover":[],"text":"ABSTRACTQ：现有的fuzz drivers的问题 不能完全覆盖entries in libraries 他们的质量取决于开发人员对于代码的理解 Q：提出的Hopper 可以fuzz libraries 不需要其他的知识去craft fuzz drivers 把fuzz l...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"论文","slug":"论文","count":4,"path":"api/tags/论文.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ODDFUZZ","uid":"9b08663ab6515ce746fcfc5eb13ac547","slug":"ODDFUZZ-SP-2023","date":"2023-11-07T02:18:56.000Z","updated":"2023-11-14T02:05:35.644Z","comments":true,"path":"api/articles/ODDFUZZ-SP-2023.json","cover":[],"text":"ABSTRACTQ：对于Java反序列化漏洞，现有的解决方式 static analysis和fuzz生成POC，用序列化的对象触发漏洞 但是存在有效性和效率的问题 Q：本文方法 提出一个轻量级的static taint analysis去识别调用链 ODDFUZZ尽力locat...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"论文","slug":"论文","count":4,"path":"api/tags/论文.json"},{"name":"Fuzz","slug":"Fuzz","count":1,"path":"api/tags/Fuzz.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"re-engineer-core-principle-02","uid":"1e07b60d2029aa2ea6483727894829df","slug":"re-engineer-core-principle-02","date":"2023-10-22T08:39:11.000Z","updated":"2024-02-29T10:45:26.276Z","comments":true,"path":"api/articles/re-engineer-core-principle-02.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 开启《逆向工程核心原理》的第二部分，冲冲冲！ 0x13 PE文件格式13.1 介绍PE(Portable excutable)是Windows操作系统下使用的可执行文件格式。 PE文件指的是32位的可执行文件，也成为PE32。64位的可执行文件称为PE+或PE32+，是PE...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"re-engineer-core-principle-01","uid":"e67072c96c2129e60add5b77588d8afa","slug":"re-engineer-core-principle-01","date":"2023-10-22T08:36:19.000Z","updated":"2024-02-29T10:45:32.693Z","comments":true,"path":"api/articles/re-engineer-core-principle-01.json","cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言看《逆向工程核心原理》这本书 好久之前看了这本书的一部分，现在决定重新学一下。 感觉逆向十分重要，且我的hxd wd-2711 (https://wd-2711.tech/) ，一直在学逆向，在他的感染下，我也开始学。 0x01 关于逆向工程 静态分析法：并不执行代码，观察代...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}