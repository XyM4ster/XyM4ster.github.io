{"title":"re-engineer-core-principle-04","uid":"3a44a24f5a69ff4f99f1bd18acd6c0b5","slug":"re-engineer-core-principle-04","date":"2024-01-07T10:57:34.000Z","updated":"2024-02-29T10:45:11.532Z","comments":true,"path":"api/articles/re-engineer-core-principle-04.json","keywords":null,"cover":"/medias/pexels-luis-gomes-546819.jpg","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><ul>\n<li>第三部分学了好久，主要是因为中间参加了两次面试，但是最后也没有去上实习，害！</li>\n<li>还是好好努力学习吧</li>\n</ul>\n<h1 id=\"0x29-API钩取\"><a href=\"#0x29-API钩取\" class=\"headerlink\" title=\"0x29 API钩取\"></a>0x29 API钩取</h1><h2 id=\"29-1-钩取\"><a href=\"#29-1-钩取\" class=\"headerlink\" title=\"29.1 钩取\"></a>29.1 钩取</h2><p><strong>Q：钩取(Hook)的整个流程如下</strong></p>\n<ul>\n<li>使用反汇编器&#x2F;调试器把握程序的结构与工作原理</li>\n<li>开发需要的“钩子”代码，用于修改 Bug、改善程序功能</li>\n<li>灵活操作可执行文件与进程内存，设置“钩子”代码。</li>\n</ul>\n<p><strong>钩取win32 API的技术称为API钩取</strong></p>\n<ul>\n<li>之前学过了消息钩取，在21章。</li>\n<li>分析程序时，如果没有源代码，通常用到钩取</li>\n</ul>\n<h2 id=\"29-2-API是啥\"><a href=\"#29-2-API是啥\" class=\"headerlink\" title=\"29.2 API是啥\"></a>29.2 API是啥</h2><p>API：Application Programming Interface</p>\n<p><strong>Q：API的作用</strong></p>\n<ul>\n<li>在Windows OS中，用户使用系统资源时，无法直接访问，需要向内核(Kernel)申请，申请的方法就是微软提供的Win32 API</li>\n<li>可以用API来访问进程、线程</li>\n</ul>\n<p><strong>Q：为了运行实际的代码，所有进程默认都会加载kernel32.dll库，kernel32.dll库又会加载ntdll.dll库</strong></p>\n<ul>\n<li>某些特定的系统进程(如smss.exe)不会加载kernel32.dll库</li>\n</ul>\n<p><strong>Q：当用户模式的应用程序代码访问系统资源时</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107191437269.png\" alt=\"image-20240107191437269\"></p>\n<ul>\n<li>由Ntdll.dll向内核模式发出访问申请</li>\n</ul>\n<p>假设notepad.exe要打开C:\\abc.txt文件</p>\n<ul>\n<li><p>首先在程序代码中调用msvcrt!fopen() API，然后引发一系列API调用</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107191623626.png\" alt=\"image-20240107191623626\"></p>\n</li>\n<li><p>使用常规系统资源的API会经由kermel32.dI1与Ntdll.dll不断向下调用，最后通过SYSENTER命令进人内核模式。</p>\n</li>\n</ul>\n<h2 id=\"29-3-API钩取\"><a href=\"#29-3-API钩取\" class=\"headerlink\" title=\"29.3 API钩取\"></a>29.3 API钩取</h2><p>在API调用前&#x2F;后运行用户的“钩子”代码。</p>\n<p>查看或操作传递给API的参数或API函数的返回值取消对API的调用，或更改执行流，运行用户代码。</p>\n<h3 id=\"29-3-1-正常调用API\"><a href=\"#29-3-1-正常调用API\" class=\"headerlink\" title=\"29.3.1 正常调用API\"></a>29.3.1 正常调用API</h3><p><img src=\"/../re-engineer-core-principle-04/image-20240107195127211.png\" alt=\"image-20240107195127211\"></p>\n<ul>\n<li>因为CreateFile() API是kernel32.dll的导出函数，所以kernel32.dll区域中的CreateFile() API会被调用执行</li>\n</ul>\n<h3 id=\"29-3-2-钩取API调用\"><a href=\"#29-3-2-钩取API调用\" class=\"headerlink\" title=\"29.3.2 钩取API调用\"></a>29.3.2 钩取API调用</h3><ul>\n<li>这里用户使用DLL注入把hook.dll注入到了notepad.exe的进程空间中，用hokk!MyCreateFile()钩取对kernel32!CreateFile的调用</li>\n<li>当notepad.exe调用CreateFile时，都会先调用hook.dll中的MyCreateFile</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107195314219.png\" alt=\"image-20240107195314219\"></p>\n<p><strong>Q：钩取函数的目的</strong></p>\n<ul>\n<li>钩取某函数的目的有很多，如调用它之前或之后运行用户代码，或者干脆阻止它调用执行等</li>\n</ul>\n<h2 id=\"29-4-技术图表\"><a href=\"#29-4-技术图表\" class=\"headerlink\" title=\"29.4 技术图表\"></a>29.4 技术图表</h2><p><img src=\"/../re-engineer-core-principle-04/image-20240107195648606.png\" alt=\"image-20240107195648606\"></p>\n<h3 id=\"29-4-1-方法对象-是什么\"><a href=\"#29-4-1-方法对象-是什么\" class=\"headerlink\" title=\"29.4.1 方法对象(是什么)\"></a>29.4.1 方法对象(是什么)</h3><p><strong>Q：API钩取方法的分类</strong></p>\n<ul>\n<li><p>根据针对的对象不同，API钩取大致可以分为静态方法和动态方法</p>\n</li>\n<li><p>静态方法针对的对象是文件，动态方法针对的是进程内存</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107195831871.png\" alt=\"image-20240107195831871\"></p>\n</li>\n</ul>\n<h3 id=\"29-4-2-位置-何处\"><a href=\"#29-4-2-位置-何处\" class=\"headerlink\" title=\"29.4.2 位置(何处)\"></a>29.4.2 位置(何处)</h3><p><strong>Q：图表中指出了实施API钩取应该操作的部分</strong></p>\n<p>IAT：</p>\n<ul>\n<li>IAT将其内部的API地址更改为钩取函数地址。</li>\n<li>该方法的优点是实现起来非常简单，缺点是无法钩取不在IAT而在程序中使用的API(如动态加载并使用DLL时)。</li>\n</ul>\n<p>代码</p>\n<ul>\n<li>系统库(*.dll)映射到进程内存时，从中查找API的实际地址，并直接修改代码。</li>\n<li>该方法应用范围非常广泛，具体实现中常有如下几种选择:<ul>\n<li>使用JMP指令修改起始代码:</li>\n<li>覆写函数局部</li>\n<li>仅更改必须部分的局部</li>\n</ul>\n</li>\n</ul>\n<p>EAT:</p>\n<ul>\n<li>将记录在DLL的EAT中的API起始地址更改为钩取函数地址，也可以实现API钩取。</li>\n<li>这种方法从概念上看非常简单，但在具体实现上不如前面的Code方法简单、强大</li>\n<li>所以修改EAT的这种方法并不常用。</li>\n</ul>\n<h3 id=\"29-4-3-技术-如何\"><a href=\"#29-4-3-技术-如何\" class=\"headerlink\" title=\"29.4.3 技术(如何)\"></a>29.4.3 技术(如何)</h3><p>向目标进程内存设置钩取函数的具体技术，分成调试法和注入法。</p>\n<p>注入法分成代码注入和DLL注入</p>\n<p><strong>调试</strong></p>\n<ul>\n<li>通过调试目标进程钩取API，因为调试器拥有被挑事者的所有权限(执行控制、内存访问等)，可以向被调试进程的任意内存设置钩取函数</li>\n<li>这里说的调试器不是ollydbg、idapro，而是由用户直接编写的，用来钩取的程序。<ul>\n<li>使用调试API附加到目标进程，然后设置钩取函数，当重新运行时，就实现API钩取了</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：注入</strong></p>\n<p>DLL注入</p>\n<ul>\n<li>先在要注入的DLL中创建钩取代码和设置代码，然后在DLLMain中调用设置代码，注入的同时完成API钩取</li>\n</ul>\n<p>代码注入</p>\n<ul>\n<li>DLL注入技术针对的是完整的PE映像,</li>\n<li>代码注入是在执行代码与数据被注入的状态下直接获取自身所需API地址来使用的。</li>\n</ul>\n<h3 id=\"29-4-4-API\"><a href=\"#29-4-4-API\" class=\"headerlink\" title=\"29.4.4 API\"></a>29.4.4 API</h3><p><strong>Q：除了技术图表中的API</strong></p>\n<ul>\n<li>还用到OpenProcess()、WriteProcessMemory()、ReadProcessMemory()等API</li>\n</ul>\n<h1 id=\"0x30-记事本WriteFile-API钩取\"><a href=\"#0x30-记事本WriteFile-API钩取\" class=\"headerlink\" title=\"0x30 记事本WriteFile() API钩取\"></a>0x30 记事本WriteFile() API钩取</h1><ul>\n<li>这一章会钩取记事本的kernel32!WriteFile()  API</li>\n</ul>\n<h2 id=\"30-1-用到的技术\"><a href=\"#30-1-用到的技术\" class=\"headerlink\" title=\"30.1 用到的技术\"></a>30.1 用到的技术</h2><p><img src=\"/../re-engineer-core-principle-04/image-20240107202129161.png\" alt=\"image-20240107202129161\"></p>\n<ul>\n<li>使用调试技术，这种技术会向用户提供简单的接口，使用户能控制目标进程的运行，并可以自由的使用进程内存</li>\n</ul>\n<h2 id=\"30-2-调试器\"><a href=\"#30-2-调试器\" class=\"headerlink\" title=\"30.2 调试器\"></a>30.2 调试器</h2><p>调试器(Debugger)：进行调试的程序</p>\n<p>被调试者(Debuggee)：被调试的程序</p>\n<h3 id=\"调试器功能\"><a href=\"#调试器功能\" class=\"headerlink\" title=\"调试器功能\"></a>调试器功能</h3><ul>\n<li>调试器用来确认被调试者是否正确运行，发现(未能预料到的)程序错误。</li>\n<li>调试器能够逐执行被调试者的指令，拥有对寄存器与内存的所有访问权限。</li>\n</ul>\n<h3 id=\"调试器工作原理\"><a href=\"#调试器工作原理\" class=\"headerlink\" title=\"调试器工作原理\"></a>调试器工作原理</h3><p>调试进程经过注册后，每当被调试者发生调试事件(Debug Event)时，OS就会暂停其运行并向调试器报告相应事件。调试器对相应事件做适当处理后，使被调试者继续运行口</p>\n<ul>\n<li>一般的异常(Exception)也属于调试事件。</li>\n<li>若相应进程处于非调试，调试事件会在其自身的异常处理或OS 的异常处理机制中被处理掉。</li>\n<li>调试器无法处理或不关心的调试事件最终由OS处理</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107203907902.png\" alt=\"image-20240107203907902\"></p>\n<h3 id=\"调试事件\"><a href=\"#调试事件\" class=\"headerlink\" title=\"调试事件\"></a>调试事件</h3><p><strong>EXCEPTION_DEBUG_EVENT</strong></p>\n<p>CREATE_THREAD_DEBUG_EVENT</p>\n<p>CREATE_PROCESS_DEBUG_EVENT</p>\n<p>EXIT_THREAD_DEBUG_EVENT</p>\n<p>EXIT_PROCESS_DEBUG_EVENT</p>\n<p>LOAD_DLL_DEBUG_EVENT</p>\n<p>UNLOAD_DLL_DEBUG_EVENT</p>\n<p>OUTPUT_DEBUG_STRING_EVENT</p>\n<p>RIP_EVENT</p>\n<ul>\n<li><p>在这些调试事件中，与调试相关的事件为EXCEPTION_DEBUG_EVENT，下面是其相关的异常列表</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107203437409.png\" alt=\"image-20240107203437409\"></p>\n</li>\n<li><p>这些异常中，调试器必须处理的是EXCEPTION_BREAKPOINT异常。</p>\n</li>\n<li><p>断点对应的汇编指令为INT3，IA-32指令为0xCC</p>\n</li>\n<li><p>代码遇到INT3指令即中断运行，EXCEPTION_BREAKPOINT异常事件被传送到调试器，</p>\n</li>\n</ul>\n<h2 id=\"30-3-调试技术流程\"><a href=\"#30-3-调试技术流程\" class=\"headerlink\" title=\"30.3 调试技术流程\"></a>30.3 调试技术流程</h2><p>下面详细讲解借助调试技术钩取API的方法</p>\n<p><strong>Q：基本思路</strong></p>\n<ul>\n<li><p>在“调试器-被调试者”的状态下将被调试者的API起始部分修改为OxCC</p>\n</li>\n<li><p>控制权转移到调试器后执行指定操作，最后使被调试者重新进入运行状态。</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107204119847.png\" alt=\"image-20240107204119847\"></p>\n</li>\n<li><p>上面提到了调试器必须处理的异常就有0xcc，当遇到0xcc后，os就会暂停被调试者的运行，让调试器对相应事件进行处理</p>\n</li>\n</ul>\n<p><strong>Q：具体的调试流程</strong></p>\n<ul>\n<li>对想钩取的进程进行附加操作，使之成为被调试者</li>\n<li>“钩子”将API起始地址的第一个字节修改为0xCC</li>\n<li>调用相应API时，控制权转移到调试器;</li>\n<li>执行需要的操作(操作参数、返回值等);</li>\n<li>脱钩:将0xCC恢复原值(为了正常运行API);</li>\n<li>运行相应API(无0xCC的正常状态);</li>\n<li>“钩子”:再次修改为0xCC(为了继续钩取)</li>\n<li>控制权返还被调试者。</li>\n</ul>\n<p><strong>Q：上面是最简单的情形，在此基础上可以有多种变化。</strong></p>\n<ul>\n<li>既可以不调用原始API，也可以调用用户提供的客户API:</li>\n<li>可以只钩取一次，也可以钩取多次。</li>\n<li>实际应用时，根据需要适当调整即可</li>\n</ul>\n<h2 id=\"30-4-练习\"><a href=\"#30-4-练习\" class=\"headerlink\" title=\"30.4 练习\"></a>30.4 练习</h2><p>钩取Notepad.exe的WriteFile() API，保存文件时操作输入参数，将小写字母全部转换为大写字母。</p>\n<ul>\n<li>也就是Notepad.exe在保存文件时，小写字母会先变成大写，再保存</li>\n</ul>\n<p><strong>Q：按照书上操作</strong></p>\n<ul>\n<li>发现我输入的小写字母，之后保存文件</li>\n<li>再打开变成了大写字母</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107205344954.png\" alt=\"image-20240107205344954\"></p>\n<h2 id=\"30-5-工作原理\"><a href=\"#30-5-工作原理\" class=\"headerlink\" title=\"30.5 工作原理\"></a>30.5 工作原理</h2><p>假设notepad.exe在保存文件中的某些内容时，会调用kernel32!WriteFile() API</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p><strong>Q：WriteFile定义</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107205540014.png\" alt=\"image-20240107205540014\"></p>\n<ul>\n<li>第二个参数(IpBufer)为数据缓冲区指针</li>\n<li>第三个参数(nNumberOfBytesToWrite)为要写的字节数。</li>\n<li>函数参数被以逆序形式存储到栈。</li>\n</ul>\n<p><strong>Q：使用OllyDbg工具调试notepad，并查看程序栈。</strong></p>\n<ul>\n<li><p>找到kernel32!API的地址，打断点</p>\n</li>\n<li><p>运行Notepad.exe到断点处，随意向notepad.exe中输入值，并保存</p>\n</li>\n<li><p>查看栈内状态</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240107211122046.png\" alt=\"image-20240107211122046\"></p>\n</li>\n<li><p>Buffer是数据缓冲区指针，当把它压入栈后，查看此时栈内状态，查看073DD580区的内容，发现是我写在记事本中的字符串</p>\n</li>\n</ul>\n<p><strong>Q：钩取API后，用指定字符串覆盖数据缓冲区中的字符串就可以完成目的</strong></p>\n<h3 id=\"执行流\"><a href=\"#执行流\" class=\"headerlink\" title=\"执行流\"></a>执行流</h3><ul>\n<li>现在我们已经知道修改被调试进程的哪个部分了，接下来只要正常运行WriteFile()，将修改后的字符串保存到文件就可以了</li>\n</ul>\n<p><strong>Q：现在用调试方法钩取API</strong></p>\n<ul>\n<li>用前面介绍的hookdbg.exe,在WriteFile()API起始地址处设置断点(INT3)后，向被调试进程(notepad.exe)保存文件时，EXCEPTION_BREAKPOINT事件就会传给调试器(hookdbg.exe)。</li>\n</ul>\n<p><strong>Q：那么，此时被调试者(notepad.exe)的EIP值是多少呢?</strong></p>\n<ul>\n<li><strong>应该是WriteFile的起始地址 +  1</strong></li>\n<li>因为被调试者(notepad.exe)内部调用WriteFile()时，会在起始地址处遇见INT3指令，此时会执行这个指令，由于INT3指令长度为1，那么EIP就会＋1。之后跳转到hookdbg.exe中处理。</li>\n<li><strong>修改了数据缓冲区的内容后，EIP值又被重新设置为WriteFile() API的起始地址</strong></li>\n</ul>\n<h3 id=\"脱钩-钩子\"><a href=\"#脱钩-钩子\" class=\"headerlink\" title=\"脱钩 &amp; 钩子\"></a>脱钩 &amp; 钩子</h3><p>当hookdbg.exe中结束时，又会返回到notepad.exe内，继续执行。</p>\n<p><strong>Q：若只将执行流返回到WriteFile()起始地址，再遇到相同的INT3指令时，就会陷人无限循环(发生EXCEPTION BREAKPOINT)。</strong></p>\n<ul>\n<li>因为上面说过，修改了数据缓冲区的内容后，EIP又被重新设置为WriteFile() API的起始地址<ul>\n<li>可能是为了执行起始地址处的正常指令</li>\n</ul>\n</li>\n<li>为了不致于陷人无限循环，应该去除设置在WriteFile()API起始地址处的断点，即将0xCC更改为originalbyte(0x6A)(originalbyte在钩取API前已保存)。这一操作称为“脱钩”，就是取消对API的钩取。</li>\n<li>覆写好数据缓冲区并正常返回WriteFile（）API代码后，EIP值恢复为WriteFile（）API的地址</li>\n<li>修改后的字符串最终保存到文件。</li>\n<li>这就是hookdbg.cpp的工作原理。若只需要钩取1次，那到这儿就结束了。但如果需要不断钩取，就要再次设置断点。</li>\n</ul>\n<h2 id=\"30-6-hookdbg-cpp源代码分析\"><a href=\"#30-6-hookdbg-cpp源代码分析\" class=\"headerlink\" title=\"30.6 hookdbg.cpp源代码分析\"></a>30.6 hookdbg.cpp源代码分析</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>及扼守要钩取的目标进程的pid，然后进入DebugLoop()\t</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//hookdbg.cpp</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DWORD dwPID<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nUSAGE : hookdbg.exe &lt;pid>\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Attach Process</span>\n    dwPID <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 使用DebugActiveProcess，将调试器hookdbg附加到目标进程notepad.exe中</span>\n\t<span class=\"token comment\">// dwPID为目标进程的pid</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">DebugActiveProcess</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DebugActiveProcess(%d) failed!!!\\n\"</span>\n               <span class=\"token string\">\"Error Code = %d\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 调试器循环，处理来自被调试者的调试事件</span>\n    <span class=\"token function\">DebugLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DebugLoop\"><a href=\"#DebugLoop\" class=\"headerlink\" title=\"DebugLoop()\"></a>DebugLoop()</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hookdbg.cpp -> hookdbg.exe</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DebugLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DEBUG_EVENT de<span class=\"token punctuation\">;</span>\n    DWORD dwContinueStatus<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 等待被调试者发生调试事件</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token function\">WaitForDebugEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>de<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        dwContinueStatus <span class=\"token operator\">=</span> DBG_CONTINUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 被调试进程创建事件</span>\n\t\t<span class=\"token comment\">// 被调试进程启动或者attached时调用该函数</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> CREATE_PROCESS_DEBUG_EVENT <span class=\"token operator\">==</span> de<span class=\"token punctuation\">.</span>dwDebugEventCode <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">OnCreateProcessDebugEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>de<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 异常事件</span>\n\t\t<span class=\"token comment\">// 说明遇到了INT3指令</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> EXCEPTION_DEBUG_EVENT <span class=\"token operator\">==</span> de<span class=\"token punctuation\">.</span>dwDebugEventCode <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">OnExceptionDebugEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>de<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 被调试进程终止事件</span>\n\t\t<span class=\"token comment\">// 不调试了，结束了</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> EXIT_PROCESS_DEBUG_EVENT <span class=\"token operator\">==</span> de<span class=\"token punctuation\">.</span>dwDebugEventCode <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 被调试者终止 -> 调试者终止</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 使得被调试者继续运行，相当于F9</span>\n        <span class=\"token function\">ContinueDebugEvent</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">.</span>dwProcessId<span class=\"token punctuation\">,</span> de<span class=\"token punctuation\">.</span>dwThreadId<span class=\"token punctuation\">,</span> dwContinueStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>从被调试者接收事件并处理</li>\n<li>发生调试事件，WaitForDebugEvent() API就会把相关事件信息设置到第一个参数变量de中</li>\n<li>这里处理了三种事件， CREATE_PROCESS_DEBUG_EVENT  EXCEPTION_DEBUG_EVENT EXIT_PROCESS_DEBUG_EVENT</li>\n</ul>\n<h4 id=\"处理-CREATE-PROCESS-DEBUG-EVENT\"><a href=\"#处理-CREATE-PROCESS-DEBUG-EVENT\" class=\"headerlink\" title=\"处理 CREATE_PROCESS_DEBUG_EVENT\"></a>处理 CREATE_PROCESS_DEBUG_EVENT</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\nLPVOID g_pfWriteFile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nCREATE_PROCESS_DEBUG_INFO g_cpdi<span class=\"token punctuation\">;</span>\nBYTE g_chINT3 <span class=\"token operator\">=</span> <span class=\"token number\">0xCC</span><span class=\"token punctuation\">,</span> g_chOrgByte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 被调试进程启动时</span>\nBOOL <span class=\"token function\">OnCreateProcessDebugEvent</span><span class=\"token punctuation\">(</span>LPDEBUG_EVENT pde<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取WriteFile() API地址</span>\n\t<span class=\"token comment\">// 获取的是调试进程的WriteFile() API地址，由于对于windows os的系统DLL而言，DLL在所有进程中都加载到相同地址，所以这样可以</span>\n    g_pfWriteFile <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WriteFile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// API Hook - WriteFile()</span>\n    <span class=\"token comment\">// 更改WriteFile()第一个字节为0xCC(INT3)</span>\n\t<span class=\"token comment\">// 将事件信息保存在g_cpdi中</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_cpdi<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pde<span class=\"token operator\">-></span>u<span class=\"token punctuation\">.</span>CreateProcessInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CREATE_PROCESS_DEBUG_INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 读取目标进程中WriteFile() API的第一个字节到g_chOrgByte中</span>\n\t<span class=\"token comment\">// 后续正常运行WriteFile()时要用到</span>\n    <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> \n                      <span class=\"token operator\">&amp;</span>g_chOrgByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将目标进程中WriteFile() API的第一个字节改为0xCC</span>\n    <span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> \n                       <span class=\"token operator\">&amp;</span>g_chINT3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>g_cdi是CREATE_PROCESS_DEBUG_INFO结构体，通过它的hProcess成员(被调试进程的句柄)，可以钩取WriteFile() API</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108091556102.png\" alt=\"image-20240108091556102\"></p>\n</li>\n<li><p>下图显示WriteFile的第一个字节为0x6A</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108092013991.png\" alt=\"image-20240108092013991\"></p>\n</li>\n</ul>\n<h4 id=\"EXCEPTION-DEBUG-EVENT\"><a href=\"#EXCEPTION-DEBUG-EVENT\" class=\"headerlink\" title=\"EXCEPTION_DEBUG_EVENT\"></a>EXCEPTION_DEBUG_EVENT</h4><ol>\n<li><p><strong>脱钩</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g_chOrgByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>因为我再改完程序后，需要正常调用WriteFile</li>\n</ul>\n</li>\n<li><p><strong>获取线程上下文</strong></p>\n<ul>\n<li><p>所有程序在内存中都以进程为单位运行，<strong>而进程的实际指令代码以线程为单位运行</strong>。WindowsOS是一个多线程(multi-thread)操作系统，同一进程中可以同时运行多个线程。多任务(multi-tasking)是将CPU资源划分为多个时间片(time-slice)，然后平等地逐一运行所有线程(考虑线程优先级)。CPU运行完一个线程的时间片而切换到其他线程时间片时，它必须将先前线程处理的内容准确备份下来，这样再次运行它时才能正常无误。</p>\n</li>\n<li><p>再次运行先前线程时，必须有运行所需信息，<strong>这些重要信息指的就是CPU中各寄存器的值通过这些</strong>值，才能保证CPU能够再次准确运行它(内存信息栈&amp;堆存在于相应进程的虚拟空间</p>\n</li>\n<li><p>负责保护CPU寄存器信息的就是CONTEXT结构体，每个线程都对应一个CONTEXT结构体</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108092937888.png\" alt=\"image-20240108092937888\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>获取线程上下文的代码</p>\n<ul>\n<li>GetThreadContext可以把指定线程(g_cpdi.hThread)的CONTEXT存储到ctx结构体变量，g_cpdi.hThreads是被调试者的主线程句柄</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ctx<span class=\"token punctuation\">.</span>ContextFlags <span class=\"token operator\">=</span> CONTEXT_CONTROL<span class=\"token punctuation\">;</span>\n<span class=\"token function\">GetThreadContext</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>获取WriteFile() 第 2, 3 个参数，也就是LpBuffer，nNumber0fBytesTowrite</strong></p>\n<ul>\n<li><p>调用WriteFile()时，需要从参数中知道param2 缓冲区大小和param3 缓冲区地址这两个参数</p>\n<ul>\n<li>这里+8的原因是在进入函数之前，除了压参数，还要push返回地址</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwAddrOfBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">+</span> <span class=\"token number\">0xC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwNumOfBytesToWrite<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108095732431.png\" alt=\"image-20240108095732431\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>把小写字母转为大写字母，并覆写WriteFile()缓冲区</strong></p>\n<ul>\n<li>获取数据缓冲区的地址与大小后，将其内容读到调试器的内存空间，把小写字母转换为大写字母。然后将修改后的大写字母覆写到原位置(被调试者的虚拟内存 )。</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span>\n\n\n<span class=\"token comment\">// 被调试进程遇到INT3时</span>\nBOOL <span class=\"token function\">OnExceptionDebugEvent</span><span class=\"token punctuation\">(</span>LPDEBUG_EVENT pde<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    CONTEXT ctx<span class=\"token punctuation\">;</span>\n    PBYTE lpBuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    DWORD dwNumOfBytesToWrite<span class=\"token punctuation\">,</span> dwAddrOfBuffer<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    PEXCEPTION_RECORD per <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pde<span class=\"token operator\">-></span>u<span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>ExceptionRecord<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 判断是否是断点</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> EXCEPTION_BREAKPOINT <span class=\"token operator\">==</span> per<span class=\"token operator\">-></span>ExceptionCode <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判断断点是否在WriteFile() API处</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> g_pfWriteFile <span class=\"token operator\">==</span> per<span class=\"token operator\">-></span>ExceptionAddress <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// #1. Unhook-脱钩</span>\n            <span class=\"token comment\">// 将WriteFile() API首字节改为g_chOrgByte，改成原值,这里因为都是在debugLoop()函数里，只不过是我分开看的，所以&amp;g_chOrgByte就是上一步的值</span>\n            <span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> \n                               <span class=\"token operator\">&amp;</span>g_chOrgByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #2. Thread Context-获取被调试线程上下文</span>\n\t\t\tctx<span class=\"token punctuation\">.</span>ContextFlags <span class=\"token operator\">=</span> CONTEXT_CONTROL<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">GetThreadContext</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #3. 获得WriteFile() 第 2, 3 个参数，也就是LpBuffer，nNumber0fBytesTowrite</span>\n            <span class=\"token comment\">//   param 2 : ESP + 0x8</span>\n            <span class=\"token comment\">//   param 3 : ESP + 0xC</span>\n\t\t\t<span class=\"token comment\">// 分别将参数保存到 dwAddrOfBuffer 与 dwNumOfBytesToWrite 中</span>\n            <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                              <span class=\"token operator\">&amp;</span>dwAddrOfBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">+</span> <span class=\"token number\">0xC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                              <span class=\"token operator\">&amp;</span>dwNumOfBytesToWrite<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 接下来就是把小写字母转为大写字母，并放到原来的位置</span>\n            <span class=\"token comment\">// #4. 分配临时缓冲区lpBuffer</span>\n            lpBuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>dwNumOfBytesToWrite<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>lpBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dwNumOfBytesToWrite<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #5. 复制 WriteFile() 的dwAddrOfBuffer所指的字符串到临时缓冲区</span>\n            <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwAddrOfBuffer<span class=\"token punctuation\">,</span> \n                              lpBuffer<span class=\"token punctuation\">,</span> dwNumOfBytesToWrite<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n### original string ###\\n%s\\n\"</span><span class=\"token punctuation\">,</span> lpBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #6. 将小写字母转为大写字母</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dwNumOfBytesToWrite<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0x61</span> <span class=\"token operator\">&lt;=</span> lpBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> lpBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x7A</span> <span class=\"token punctuation\">)</span>\n                    lpBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n### converted string ###\\n%s\\n\"</span><span class=\"token punctuation\">,</span> lpBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #7. 将lpBuffer放回原位</span>\n            <span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwAddrOfBuffer<span class=\"token punctuation\">,</span> \n                               lpBuffer<span class=\"token punctuation\">,</span> dwNumOfBytesToWrite<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// #8. 删除分配的临时缓冲区</span>\n            <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>lpBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #9. 把线程上下文的EIP修改为WriteFile()起始地址，并恢复上下文</span>\n            ctx<span class=\"token punctuation\">.</span>Eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>g_pfWriteFile<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetThreadContext</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #10. 继续运行被调试进程</span>\n            <span class=\"token function\">ContinueDebugEvent</span><span class=\"token punctuation\">(</span>pde<span class=\"token operator\">-></span>dwProcessId<span class=\"token punctuation\">,</span> pde<span class=\"token operator\">-></span>dwThreadId<span class=\"token punctuation\">,</span> DBG_CONTINUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// #11. 重新设置API Hook，把首字母设成0xCC，方便下次钩取</span>\n            <span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> \n                               <span class=\"token operator\">&amp;</span>g_chINT3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li><strong>把线程上下文的EIP修改为WriteFile的起始地址</strong></li>\n</ol>\n<ul>\n<li><p>把2里面获取的CONTEXT结构体的Eip成员，修改为WriteFile()的起始地址。<strong>EIP的当前地址为WriteFile() + 1</strong></p>\n</li>\n<li><p>修改好CONTEXT.Eip成员后，调用SetThreadContext() API</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ctx.Eip &#x3D; (DWORD)g_pfWriteFile;\nSetThreadContext(g_cpdi.hThread, &amp;ctx);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<ol start=\"6\">\n<li><p><strong>运行调试进程</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">ContinueDebugEvent</span><span class=\"token punctuation\">(</span>pde<span class=\"token operator\">-></span>dwProcessId<span class=\"token punctuation\">,</span> pde<span class=\"token operator\">-></span>dwThreadId<span class=\"token punctuation\">,</span> DBG_CONTINUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置API钩子，方便下次进行钩取</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>g_cpdi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> g_pfWriteFile<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g_chINT3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>必须在调试终止前脱钩，否则调用API时其实部分仍然是0xCC，导致EXCEPTION_BREAKPOINT异常，由于此时不存在调试器，所以会终止被调试进程。</p>\n</p>\n</div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Q：在OnExceptionDebugEvent()函数中调用了ContinueDebugEvent()函数后，为什么还要调用Sleep(0)函数?</strong></p>\n<ul>\n<li><p>调用Sleep(0)函数可以释放当前线程的剩余时间片，即放弃当前线程执行的CPU时间片。</p>\n</li>\n<li><p>也就是说，调用Sleep(0)函数后，CPU会立即执行其他线程。</p>\n</li>\n<li><p>被调试进程(Notepad.exe)的主线程处于运行状态时，会正常调用WriteFile()API。然后经过一定时间，控制权再次转移给HookDbg.exe，Sleep(0)后面的“钩子”代码(WriteProcessMemory()API)会被调用执行。</p>\n</li>\n<li><p>若没有Sleep(0)语句，Notepad.exe调用WriteFile()API的过程中，HookDbg.exe会尝试将WriteFileOAPI的首字节修改为OxCC。若运气不佳，这可能会导致内存访问异常</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108102401230.png\" alt=\"image-20240108102401230\"></p>\n</li>\n<li><p>也就是如果没有Sleep(0)的话，蓝线和黄线就会冲突，造成内存访问异常</p>\n</li>\n</ul>\n<h1 id=\"0x31-调试器\"><a href=\"#0x31-调试器\" class=\"headerlink\" title=\"0x31 调试器\"></a>0x31 调试器</h1><ul>\n<li>OllyDbg和ida pro都是用户态的调试器</li>\n<li>Windbg既可以是用户态也可以是内核态，支持64位系统下的调试</li>\n</ul>\n<h1 id=\"0x32-计算器显示中文数字\"><a href=\"#0x32-计算器显示中文数字\" class=\"headerlink\" title=\"0x32 计算器显示中文数字\"></a>0x32 计算器显示中文数字</h1><p>API钩取中有一种是通过注入DLL文件来钩取某个API的，<strong>DLL文件注入目标进程后，修改IAT来更改进程中调用的特定API。</strong></p>\n<p><strong>Q：以Windows计算器为例</strong></p>\n<ul>\n<li>向计算器进程插入用户的DLL文件，钩取IAT的user32.SetWindowTextW()地址。</li>\n<li>负责向计算器显示文本的user32.SetWindowTextW()被钩取后，计算器显示的是中文数字，不再是阿拉伯数字</li>\n</ul>\n<h2 id=\"32-1-技术图表\"><a href=\"#32-1-技术图表\" class=\"headerlink\" title=\"32.1 技术图表\"></a>32.1 技术图表</h2><p><strong>Q：下面带有下划线的部分就是通过DLL注入实现API钩取用到的技术</strong></p>\n<ul>\n<li>只需要先把钩取的API在用户的DLL中重定义，然后再注入目标进程</li>\n<li>如果钩取的API不在目标进程的IAT中，那就无法用该技术进行钩取。<ul>\n<li>也就是如果钩取的API是由程序代码动态加载DLL文件而使用的，那么就无法使用这项技术钩取</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108105407861.png\" alt=\"image-20240108105407861\"></p>\n<h2 id=\"32-2-选定目标API\"><a href=\"#32-2-选定目标API\" class=\"headerlink\" title=\"32.2 选定目标API\"></a>32.2 选定目标API</h2><p><strong>Q：我现在有需求，如何钩取和需求对应的API呢</strong></p>\n<ul>\n<li>学会检索</li>\n<li>如果搜不到，再通过经验猜</li>\n</ul>\n<p><strong>Q：查看calc.exe的iAT</strong></p>\n<ul>\n<li>可以看到有两个关键的API，SetWindowTextW，SetDlgItemTextW。</li>\n<li>SetDlgItemTextW内部调用了SetWindowTextW，所以假设只需要钩取SetWindowTextW API</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108110131967.png\" alt=\"image-20240108110131967\"></p>\n<p><strong>Q：SetWindowTextW API定义</strong></p>\n<ul>\n<li>第一个参数为窗口句柄</li>\n<li>第二个是字符串指针</li>\n<li>也就是我钩取后，查看这个指针，把阿拉伯数字改成中文就可以了</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108110237815.png\" alt=\"image-20240108110237815\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>API名称中最后面的“W”表示该API是宽字符(Wide character)版本。与之对应，若API名称最后面的字符为“A”,则表示该API是ASCII码字符(ASCII character)版本。<strong>WindowsOS内部使用的宽字符指的就是Unicode码。</strong></p>\n<ul>\n<li>如:SetWindowTextA()、SetWindowTextW()</li>\n</ul>\n\n</div>\n<p><strong>Q：在ollydbg内部查找SetWindowTextW()，并设置断点</strong></p>\n<ul>\n<li><p>运行后，发现计算器正常显示的是0，也就是计算器的初始值是Text对应的值</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111259228.png\" alt=\"image-20240108111259228\"></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111223560.png\" alt=\"image-20240108111223560\"></p>\n</li>\n<li><p>尝试更改Text的值为7，并重新运行，发现Text的值变成了7</p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111104997.png\" alt=\"image-20240108111104997\"></p>\n<ul>\n<li><p>如果我把它改成中文呢，中文数字七的unicode码为4e03，发现真的变成了“七”</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111639391.png\" alt=\"image-20240108111639391\"></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111646744.png\" alt=\"image-20240108111646744\"></p>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>unicode码中，每个汉字占用2个字节</p>\n</p>\n</div>\n<h2 id=\"32-3-IAT钩取工作原理\"><a href=\"#32-3-IAT钩取工作原理\" class=\"headerlink\" title=\"32.3 IAT钩取工作原理\"></a>32.3 IAT钩取工作原理</h2><p><strong>Q：进程的IAT中保存着程序调用的API地址</strong></p>\n<ul>\n<li><p>IAT钩取通过修改IAT中保存的API地址来钩取某个API</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108111900837.png\" alt=\"image-20240108111900837\"></p>\n</li>\n<li><p>程序开始运行时，PE装载器会把user32.SetWindowTextW() API地址 77D0960E记录到地址01001110。</p>\n</li>\n<li><p>01002628地址处的CAll DWORD PTR [01001110]指令会调用77D0960E处的SetWindowTextW() API</p>\n</li>\n<li><p>执行完毕后返回(圆圈2)</p>\n</li>\n</ul>\n<p><strong>Q：IAT被钩取后计算器进程的运行过程</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108112600270.png\" alt=\"image-20240108112600270\"></p>\n<ul>\n<li>hookiat.dll中有一个MySetWindowTextW()的钩取函数</li>\n<li>地址01002628处的call和图32-9中的call是一样的，只是把IAT中01001110地址处的值改了，改成了我构造的API的地址<ul>\n<li><strong>将IAT中保存的API起始地址变为用户函数的起始地址就是IAT钩取的基本原理。</strong></li>\n</ul>\n</li>\n<li>执行完01002628处的call之后，进入到MySetWindowTextW()函数。</li>\n<li>经过一系列处理，调用1000107D处的call 命令。调用user32.SetWindowTextW()地址</li>\n<li>地址1000B6D8位于hookiat.dll的data节区，是全局变量g_pOrgFunc的地址。注入DLL时，DLLMain()会获取并保存user32.SetWindowTextW()的地址</li>\n<li>执行完user32.SetWindowTextW()后，会按圆圈3返回，之后再按圆圈4返回。</li>\n</ul>\n<p><strong>Q：像上面这种，先向目标进程(calc.exe)注入用户DLL(hookiat.dll)，然后在cacl.exe进程的IAT区域更改4bytes大小的地址，就可以钩取指定API</strong></p>\n<h2 id=\"32-4-练习示例\"><a href=\"#32-4-练习示例\" class=\"headerlink\" title=\"32.4 练习示例\"></a>32.4 练习示例</h2><ul>\n<li><p>实现上面描述的，通过修改IAT实现API钩取\t</p>\n</li>\n<li><p>这里我运行后没有显示中文，可能是编码的问题</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108162617372.png\" alt=\"image-20240108162617372\"></p>\n</li>\n</ul>\n<h2 id=\"32-5-源代码分析\"><a href=\"#32-5-源代码分析\" class=\"headerlink\" title=\"32.5 源代码分析\"></a>32.5 源代码分析</h2><ul>\n<li>InjectDll.exe的内容和之前的代码基本结构相似，下面说明hookiat.dll的源代码</li>\n</ul>\n<h3 id=\"DllMain\"><a href=\"#DllMain\" class=\"headerlink\" title=\"DllMain\"></a>DllMain</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> fdwReason <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH <span class=\"token operator\">:</span> \n            <span class=\"token comment\">// 保持原始 API 地址</span>\n           \tg_pOrgFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SetWindowTextW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// # hook</span>\n            <span class=\"token comment\">//  用 user32!SetWindowTextW() 钩取 hookiat!MySetWindowText()</span>\n\t\t\t<span class=\"token function\">hook_iat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> g_pOrgFunc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>MySetWindowTextW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH <span class=\"token operator\">:</span>\n            <span class=\"token comment\">// # unhook</span>\n            <span class=\"token comment\">//   将 calc.exe 的 IAT 恢复原值</span>\n            <span class=\"token function\">hook_iat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>MySetWindowTextW<span class=\"token punctuation\">,</span> g_pOrgFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>保存user32.SetWindowTextW的地址</strong></li>\n</ol>\n<ul>\n<li><p>在DLL_PROCESS_ATTACH事件中，先获取原始API的地址，保存为全局变量，后面会用到</p>\n</li>\n<li><p>因为计算器已经加载了user32.dll，所以可以像上面这样直接GetProcAddress，但是实际操作中必须确定DLL已经正常加载了，再调用GetProcAddress</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>IAT钩取</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">hook_iat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> g_pOrgFunc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>MySetWindowTextW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>把user32.SetWindowTextW的地址改成)MySetWindowTextW的地址。</li>\n<li>1 和2都是在发生DLL加载事件时执行的所有操作</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>IAT脱钩</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">hook_iat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>MySetWindowTextW<span class=\"token punctuation\">,</span> g_pOrgFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li>卸载DLL时会发生DLL_PROCESS_DETACH事件，此时进行IAT脱钩，把hookiat.MtSetWindowTextW()的地址更改为user32.SetWindowTextW()的地址</li>\n</ul>\n<h3 id=\"MySetWindowTextW\"><a href=\"#MySetWindowTextW\" class=\"headerlink\" title=\"MySetWindowTextW()\"></a>MySetWindowTextW()</h3><ul>\n<li>这是SetWindowTextW()的钩取函数</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">MySetWindowTextW</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span> LPWSTR lpString<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">wchar_t</span><span class=\"token operator\">*</span> pNum <span class=\"token operator\">=</span> L<span class=\"token string\">\"零一二三四五六七八九\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">wchar_t</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    nLen <span class=\"token operator\">=</span> <span class=\"token function\">wcslen</span><span class=\"token punctuation\">(</span>lpString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> L<span class=\"token char\">'0'</span> <span class=\"token operator\">&lt;=</span> lpString<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> lpString<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> L<span class=\"token char\">'9'</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lpString<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            nIndex <span class=\"token operator\">=</span> <span class=\"token function\">_wtoi</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            lpString<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pNum<span class=\"token punctuation\">[</span>nIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// user32!SetWindowTextW() 地址</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFSETWINDOWTEXTW<span class=\"token punctuation\">)</span>g_pOrgFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> lpString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>当调用user32.SetWindowTextW()时，现在会调用hookiat.MtSetWindowTextW()</p>\n</li>\n<li><p>lpString参数是一个缓冲区，指示显示的字符串，上面分析过了，我直接操作缓冲区就可以了</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108165109743.png\" alt=\"image-20240108165109743\"></p>\n</li>\n<li><p>可以看到阿拉伯数字和缓冲区数字的尺寸是1:1的关系，这就不用修改缓冲区，很好！</p>\n</li>\n<li><p>如果要是把”123”改成”ONETWOTHREE”，此时英文数字长的多，就不能用原来的缓冲区，要新开辟一块缓冲区</p>\n</li>\n</ul>\n<p><strong>Q： return ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</strong></p>\n<ul>\n<li>for循环结束后，调用return命令，返回到user32.dll!SetWindowTextW()的起始地址一条地址</li>\n</ul>\n<h3 id=\"hook-iat\"><a href=\"#hook-iat\" class=\"headerlink\" title=\"hook_iat()\"></a>hook_iat()</h3><ul>\n<li>它是具体的钩取函数，主要的目的是把PE文件头中的IAT中的SetWindowsTextW()的地址改了，改成我自定义的API</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">hook_iat</span><span class=\"token punctuation\">(</span>LPCSTR szDllName<span class=\"token punctuation\">,</span> PROC pfnOrg<span class=\"token punctuation\">,</span> PROC pfnNew<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tHMODULE hMod<span class=\"token punctuation\">;</span>\n\tLPCSTR szLibName<span class=\"token punctuation\">;</span>\n\tPIMAGE_IMPORT_DESCRIPTOR pImportDesc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这里面存储着IMAGE_IMPORT_DESCRIPTOR结构体的起始地址</span>\n\tPIMAGE_THUNK_DATA pThunk<span class=\"token punctuation\">;</span>\n\tDWORD dwOldProtect<span class=\"token punctuation\">,</span> dwRVA<span class=\"token punctuation\">;</span>\n\tPBYTE pAddr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// hMod, pAddr = ImageBase of calc.exe</span>\n    <span class=\"token comment\">//             = VA to MZ signature (IMAGE_DOS_HEADER)</span>\n\thMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>hMod<span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span>\n\tpAddr <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pAddr<span class=\"token punctuation\">[</span><span class=\"token number\">0x3C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span>\n\tdwRVA <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pAddr<span class=\"token punctuation\">[</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span>\n\tpImportDesc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>hMod<span class=\"token operator\">+</span>dwRVA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> pImportDesc<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">;</span> pImportDesc<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// szLibName = VA to IMAGE_IMPORT_DESCRIPTOR.Name</span>\n\t\tszLibName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>hMod <span class=\"token operator\">+</span> pImportDesc<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>szLibName<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">//szDllName是传进来的user32.dll</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// pThunk = IMAGE_IMPORT_DESCRIPTOR.FirstThunk</span>\n            <span class=\"token comment\">//        = VA to IAT(Import Address Table)</span>\n\t\t\tpThunk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>hMod <span class=\"token operator\">+</span> \n                                         pImportDesc<span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// pThunk->u1.Function = VA to API</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">;</span> pThunk<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnOrg <span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 更改内存属性为 E/R/W</span>\n\t\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">,</span> \n                                   <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> \n                                   PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> \n                                   <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 修改 IAT 值（钩取）</span>\n                    pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnNew<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\n                    <span class=\"token comment\">// 恢复内存属性</span>\n                    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">,</span> \n                                   <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> \n                                   dwOldProtect<span class=\"token punctuation\">,</span> \n                                   <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\n\n\t\t\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：代码的前半部分是读取PE文件头的信息</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">HMODULE hMod<span class=\"token punctuation\">;</span>\nLPCSTR szLibName<span class=\"token punctuation\">;</span>\nPIMAGE_IMPORT_DESCRIPTOR pImportDesc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这里面存储着IMAGE_IMPORT_DESCRIPTOR结构体的起始地址</span>\nPIMAGE_THUNK_DATA pThunk<span class=\"token punctuation\">;</span>\nDWORD dwOldProtect<span class=\"token punctuation\">,</span> dwRVA<span class=\"token punctuation\">;</span>\nPBYTE pAddr<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hMod, pAddr = ImageBase of calc.exe</span>\n<span class=\"token comment\">//             = VA to MZ signature (IMAGE_DOS_HEADER)</span>\nhMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>hMod<span class=\"token punctuation\">;</span><span class=\"token comment\">//等于ImageBase</span>\n\n<span class=\"token comment\">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span>\npAddr <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pAddr<span class=\"token punctuation\">[</span><span class=\"token number\">0x3C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span>\ndwRVA <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pAddr<span class=\"token punctuation\">[</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span>\npImportDesc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>hMod<span class=\"token operator\">+</span>dwRVA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// ImageBase + RVA，也就是在计算IDT的VA地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108171446987.png\" alt=\"image-20240108171446987\"></p>\n<ul>\n<li><p>此时pImportDesc的值是01012B80</p>\n</li>\n<li><p>接下来，在IDT中查找名为user32.dll，使用for循环遍历</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108171722675.png\" alt=\"image-20240108171722675\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> pImportDesc<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">;</span> pImportDesc<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// szLibName = VA to IMAGE_IMPORT_DESCRIPTOR.Name</span>\n    szLibName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>hMod <span class=\"token operator\">+</span> pImportDesc<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>szLibName<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>找到后，进入user32的IAT 000010A4</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108171840431.png\" alt=\"image-20240108171840431\"></p>\n</li>\n<li><p>在010010A4处开始遍历</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">;</span> pThunk<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnOrg <span class=\"token punctuation\">)</span><span class=\"token comment\">//pfnOrg是传入的值，应为SetWindowTextW</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108172201033.png\" alt=\"image-20240108172201033\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108172219367.png\" alt=\"image-20240108172219367\"></p>\n<ul>\n<li><p>找到IAT地址是01001110，fuction地址是77CF61C9</p>\n</li>\n<li><p>接着要修改这个值，改成pfnNew，也就是10001000 hookiat.MySetWindowTextW()的地址，这样就修改成功了</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 更改内存属性为 E/R/W</span>\n<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">,</span> \n               <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> \n               PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> \n               <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 修改 IAT 值（钩取）</span>\npThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnNew<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 恢复内存属性</span>\n<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pThunk<span class=\"token operator\">-></span>u1<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">,</span> \n               <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> \n               dwOldProtect<span class=\"token punctuation\">,</span> \n               <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里的VirtualProtect()函数用来更改内存区域的模式，把相应的IAT区域改成”可读写”模式，钩取之后，再重新返回原模式。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"32-6-调试被注入的DLL文件\"><a href=\"#32-6-调试被注入的DLL文件\" class=\"headerlink\" title=\"32.6 调试被注入的DLL文件\"></a>32.6 调试被注入的DLL文件</h2><p><strong>Q：调试步骤</strong></p>\n<ul>\n<li><p>用Ollydbg2.0进行调试，这个证明有问题。我又重新下载了一个Ollydbg201，这回可以了。</p>\n</li>\n<li><p>首先把calc.exe附加(attach)到Ollydbg，查看calc.exe的pid</p>\n</li>\n<li><p>附加成功后，设置Ollydbg选项，这里表示每当有DLL加载(含注入)到被调试进程时，控制权就会转移到调试器。</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109095921865.png\" alt=\"image-20240109095921865\"></p>\n</li>\n<li><p>运行InjectDll.exe，此时调试器会在hookiat.dll的EP处停下来</p>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>有DLL被加载时，调试器会自动暂停在被加载的DLL的EP处，这是OllyDbg2.0中提供的功能。若使用的是 OllyDbg1.1,调试器会在非 EP 的其他代码位置处(ntdll.dll区域)暂停。</p>\n\n</div>\n<p><strong>Q: 在hookiat.dll的DllMain()函数中查找API</strong></p>\n<ul>\n<li>此时断点停在这，进入到了hookiat的ep</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109102806718.png\" alt=\"image-20240109102806718\"></p>\n<ul>\n<li><p>现在我想找到DllMain，因为DllMain中用到了SetWindowTextW，所以搜索字符串，发现SetWindowTextW</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109102901623.png\" alt=\"image-20240109102901623\"></p>\n</li>\n<li><p>定位到SetWindowTextW，此时这部分的结构和Main函数是一样的，6C901130就是DllMain的起始地址</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109103115860.png\" alt=\"image-20240109103115860\"></p>\n</li>\n</ul>\n<h3 id=\"调试DllMain\"><a href=\"#调试DllMain\" class=\"headerlink\" title=\"调试DllMain\"></a>调试DllMain</h3><ul>\n<li><p>在运行到6C901160这条指令时，可以发现此时栈内只有两个参数，根据前面函数的定义，此处省略了user32.dll字符串。</p>\n</li>\n<li><p>这是VC++编辑器优化的结果，字符串的地址并未作为参数传入，还被硬编码到hook_iat()函数中。</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109104558832.png\" alt=\"image-20240109104558832\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109104520331.png\" alt=\"image-20240109104520331\"></p>\n<h3 id=\"调试hook-iat\"><a href=\"#调试hook-iat\" class=\"headerlink\" title=\"调试hook_iat()\"></a>调试hook_iat()</h3><ul>\n<li><p>进入函数，前面在push参数，push的是pe头相关的参数，此时EDI的值是01000000，也就是IMAGE_DOS_HEADER的起始地址，也就是整个PE头的起始地址</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109105639814.png\" alt=\"image-20240109105639814\"></p>\n</li>\n<li><p>EDI + 3C，是因为DOS头的长度是固定的64bytes，且最后一个存储的是NT头的偏移，这样就可以获取它的值</p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109105530140.png\" alt=\"image-20240109105530140\"></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109105357274.png\" alt=\"image-20240109105357274\"></p>\n<ul>\n<li>此时EAX是000000F0，EDI + EAX + 80 得到的值是0100170，也就是在获取IMAGE_OPTIONAL_HEADER的datadirectory数组的第二个值，也就是在获取IAT的地址，DS:[EDI + EAX + 80] &#x3D;&#x3D;  12B80</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109110333397.png\" alt=\"image-20240109110333397\"></p>\n<ul>\n<li><p>找到idt之后，遍历idt，知道找到user32.dll，地址6C9010CA处是在调用stricmp函数。</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109110918645.png\" alt=\"image-20240109110918645\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109111659746.png\" alt=\"image-20240109111659746\"></p>\n<ul>\n<li><p>有两层循环，外层是在比较是不是user32.dll，内层循环在比较是不是SetWindowTextW()</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109112726537.png\" alt=\"image-20240109112726537\"></p>\n<ul>\n<li><p>从user32.dll的第一个API  GetMenu开始遍历</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240108172201033.png\" alt=\"image-20240108172201033\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：找到之后，更改内存属性</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109113212729.png\" alt=\"image-20240109113212729\"></p>\n<p><strong>Q：修改值</strong></p>\n<ul>\n<li>把原来SetWindowTextW()的值，此时的Entrypoint是当前函数的入口，也就是我新写的函数</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109115026301.png\" alt=\"image-20240109115026301\"></p>\n<ul>\n<li><p>改完之后，就变成了</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109115308335.png\" alt=\"image-20240109115308335\"></p>\n</li>\n</ul>\n<h3 id=\"MySetWindowTextW-1\"><a href=\"#MySetWindowTextW-1\" class=\"headerlink\" title=\"MySetWindowTextW()\"></a>MySetWindowTextW()</h3><ul>\n<li><p>在calc.exe中搜索intermodular calls，找到两处SetWindowsTextW()，给他们打上断点，</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109162125797.png\" alt=\"image-20240109162125797\"></p>\n</li>\n<li><p>运行前面的Inject.exe &lt; pid &gt; i  hookiat.dll，此时不要设置events中的pause on new module (dll)</p>\n</li>\n<li><p>之后运行cal.exe，并在计算器上输入8，发现停在了断点处，此时原本的user32.SetWindowTextW()位置的值已经被改成了我新构造的值 </p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109162106476.png\" alt=\"image-20240109162106476\"></p>\n</li>\n<li><p>进入函数，发现把我输入的8传了进来，最后又重新调用了SetWindowTextW()函数</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109163547358.png\" alt=\"image-20240109163547358\"></p>\n<p>​\t<img src=\"/../re-engineer-core-principle-04/image-20240109165115718.png\" alt=\"image-20240109165115718\"></p>\n</li>\n</ul>\n<h1 id=\"0x33-隐藏进程\"><a href=\"#0x33-隐藏进程\" class=\"headerlink\" title=\"0x33 隐藏进程\"></a>0x33 隐藏进程</h1><p>本章将通过修改API代码实现API钩取。此外，还又用上述方法隐藏特定进程的技术</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>隐藏进程(stealth process)在代码逆向分析领域中的专业术语为 <strong>Rootkit</strong>，它是指通过修改(hooking)系统内核来隐藏进程、文件、注册表等的一种技术。</p>\n<p>Rootkit 的相关内容不在本章讲解范围内，为便于理解，本书中将统一使用“隐藏进程”这一名称。</p>\n</p>\n</div>\n<h2 id=\"33-1-技术图表\"><a href=\"#33-1-技术图表\" class=\"headerlink\" title=\"33.1 技术图表\"></a>33.1 技术图表</h2><p><img src=\"/../re-engineer-core-principle-04/image-20240109165619331.png\" alt=\"image-20240109165619331\"></p>\n<ul>\n<li>库文件被加载到进程内存后，在目录映像中直接修改要钩取的API代码。</li>\n<li>前面的IAT钩取，需要我钩取的API在进程的IAT中，API修改不需要</li>\n</ul>\n<h2 id=\"33-2-API代码修改技术的原理\"><a href=\"#33-2-API代码修改技术的原理\" class=\"headerlink\" title=\"33.2 API代码修改技术的原理\"></a>33.2 API代码修改技术的原理</h2><ul>\n<li>将API代码的前5个字节修改为IMP XXXXXXXX指令来钩取API。调用执行别钩取的API时，修改后的JMP XXXXXXXX指令就会被执行，转而控制hooking函数。</li>\n</ul>\n<h3 id=\"钩取之前\"><a href=\"#钩取之前\" class=\"headerlink\" title=\"钩取之前\"></a>钩取之前</h3><p><strong>Q：钩取之前正常调用API的情形</strong></p>\n<ul>\n<li>00422CF7处的指令调用 ntdll.ZwQuerySystemInformation() API后，查找IAT，跳到7C93D92E</li>\n<li>API执行完毕后，返回到调用代码的下一条指令的地址</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109165952379.png\" alt=\"image-20240109165952379\"></p>\n<h3 id=\"钩取之后\"><a href=\"#钩取之后\" class=\"headerlink\" title=\"钩取之后\"></a>钩取之后</h3><ul>\n<li>首先把stealth.dll注入目标进程procexp.exe，钩取ntdll.ZwQuerySystemInformation()  API. 该API的起始地址的前5个bytes代码被修改成JMP 10001120。只修改5个字节的代码</li>\n<li>10001120是stealth.MyZwQuerySystemInformation()函数的地址。</li>\n</ul>\n<p><strong>Q：此时在procexp.exe中调用ntdll.ZwQuerySystemInformation()  API的流程为</strong></p>\n<ul>\n<li>调用ntdll.ZwQuerySystemInformation()  API后，就会进入到7C93D92E处</li>\n<li>接着IMP到10001120处，之后执行CALL unhook()脱钩，把ntdll.ZwQuerySystemInformation()  API的前5个字节恢复成原值</li>\n<li>接着调用CALL EAX，执行正常的API调用，retn到stealth.dll</li>\n<li>再次执行CALL hook()，也就是把ntdll.ZwQuerySystemInformation()  API 前5个字节修改了，之后正常返回</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109170307868.png\" alt=\"image-20240109170307868\"></p>\n<p><strong>使用API代码修改，可以钩取任意的API</strong></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>API代码修改就是直接修改映射到目标进程内存空间的系统DLL的代码。进程的其他线程正在读某个函数时，如果尝试修改它的代码，会引发非法访问异常。</p>\n\n</div>\n<h2 id=\"33-3-进程隐藏\"><a href=\"#33-3-进程隐藏\" class=\"headerlink\" title=\"33.3 进程隐藏\"></a>33.3 进程隐藏</h2><ul>\n<li>用户模式下最常用的是ntdll.ZwQuerySystemInformation() API钩取技术</li>\n</ul>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><ul>\n<li>为了隐藏某个特定进程，要潜入所有其他进程内存，钩取相关API<ul>\n<li>我理解是就当成正常dll库，不搞特殊化</li>\n</ul>\n</li>\n<li>作者举了一个例子是，普通战斗机升空后，如果把雷达搞坏，那普通战斗机就变成了隐形战斗机</li>\n</ul>\n<p>相关API</p>\n<p><strong>Q：由于进程是内核对象，所以用户模式下的程序只要通过相关API就能检测到他们</strong></p>\n<ol>\n<li><p>CreateToolhelp32Snapshot() &amp; EnumProcess()</p>\n<ul>\n<li>这两个API在内部都调用了ntdll.ZwQuerySystemInformation()  API</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109171944190.png\" alt=\"image-20240109171944190\"></p>\n</li>\n<li><p>ZwQuerySystemInformation()</p>\n<p>​                                                                   <img src=\"/../re-engineer-core-principle-04/image-20240109172052952.png\" alt=\"image-20240109172052952\"></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109172058671.png\" alt=\"image-20240109172058671\"></p>\n</li>\n</ol>\n<p><strong>Q：借助ZwQuerySystemInformation() API可以获取运行中的所有进程信息，形成一个链表</strong></p>\n<ul>\n<li><p>操作这个链表可以隐藏相关进程</p>\n</li>\n<li><p>在用户模式下不需要分别钩取CreateToolhelp32Snapshot() 和  EnumProcess()，只需要钩取ZwQuerySystemInformation()  API，就可以隐藏指定进程</p>\n</li>\n<li><p><strong>也就是链表里记录了现在所有运行中的进程信息，我把想要隐藏的进程从链表里删除了，那就相当于隐藏进程了，所以作者说操纵的是雷达，不是飞机</strong></p>\n</li>\n</ul>\n<h3 id=\"隐藏技术的问题\"><a href=\"#隐藏技术的问题\" class=\"headerlink\" title=\"隐藏技术的问题\"></a>隐藏技术的问题</h3><p><strong>Q：假设要隐藏的进程为test.exe</strong></p>\n<ul>\n<li>那么我钩取运行中的ProcExp.exe（或者taskmgr.exe）进程的ZwQuerySystemInformation() API，那么就无法查找到test.exe</li>\n<li>这样test.exe就对ProcExp.exe隐藏了</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>ProcExp.exe 进程查看器</p>\n<p>taskmgr.exe  任务管理器</p>\n</p>\n</div>\n<p><strong>Q：但是上述方法存在问题</strong></p>\n<p>问题1：可以检索进程的工具只有这两个嘛？</p>\n<ul>\n<li>不是的，除了这两个还有其他的。那如果我想隐藏一个进程，就需要钩取所有可以查看进程的工具(进程)</li>\n</ul>\n<p>问题2：新创建的进程</p>\n<ul>\n<li>如果用户再运行一个ProcExp.exe，仍然能看到test.exe。因为我只钩取了第一个ProcExp.exe，并没有钩取第二个</li>\n</ul>\n<p><strong>Q：解决上述问题的方法：全局钩取</strong></p>\n<ul>\n<li>隐藏test.exe进程时，需要钩取系统中运行的所有进程的ZwQuerySystemInformation() API</li>\n<li>并且对后面要启动的进程，同样这姓这个操作</li>\n<li>这就是全局钩取，指的是在整个系统范围内操作</li>\n</ul>\n<h2 id=\"33-4-练习-HideProc-exe-stealth-dll\"><a href=\"#33-4-练习-HideProc-exe-stealth-dll\" class=\"headerlink\" title=\"33.4 练习 HideProc.exe, stealth.dll\"></a>33.4 练习 HideProc.exe, stealth.dll</h2><ul>\n<li>HideProc.exe负责把stealth.dll文件注入所有运行中的进程</li>\n<li>stealth.dll 负责钩取(注入stealth.dll）进程的ntdll.ZwQuertSystemInformation()  API</li>\n<li>用这两个文件隐藏notepad.exe进程</li>\n</ul>\n<h2 id=\"33-5-源代码分析\"><a href=\"#33-5-源代码分析\" class=\"headerlink\" title=\"33.5 源代码分析\"></a>33.5 源代码分析</h2><h3 id=\"HideProc-cpp\"><a href=\"#HideProc-cpp\" class=\"headerlink\" title=\"HideProc.cpp\"></a>HideProc.cpp</h3><ul>\n<li>HideProc.exe负责向运行中的所有进程注入&#x2F;卸载指定的DLL文件</li>\n<li>在原有的InjectDll.exe的基础上，添加了向所有进程注入DLL的功能</li>\n</ul>\n<h4 id=\"InjectAllProcess\"><a href=\"#InjectAllProcess\" class=\"headerlink\" title=\"InjectAllProcess()\"></a>InjectAllProcess()</h4><ul>\n<li><p>它会检索运行中的所有进程，然后将指定DLL注入各进程或从各进程卸载</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">InjectAllProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nMode<span class=\"token punctuation\">,</span> LPCTSTR szDllPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDWORD                   dwPID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tHANDLE                  hSnapShot <span class=\"token operator\">=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">;</span>\n\tPROCESSENTRY32          pe<span class=\"token punctuation\">;</span>\n\tBOOL ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Get the snapshot of the system</span>\n\tpe<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> PROCESSENTRY32 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thSnapShot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span> TH32CS_SNAPALL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// find process</span>\n\t<span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tdwPID <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 对于PID小于100的进程，不进行注入</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> dwPID <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> nMode <span class=\"token operator\">==</span> INJECTION_MODE <span class=\"token punctuation\">)</span>\n\t\t    ret <span class=\"token operator\">=</span> <span class=\"token function\">InjectDll</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">,</span> szDllPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OpenProcess(%d) success!!!\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">EjectDll</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">,</span> szDllPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ol>\n<li><p>首先用\thSnapShot &#x3D; CreateToolhelp32Snapshot( TH32CS_SNAPALL, NULL ); 获取系统中运行的所有进程的列表</p>\n</li>\n<li><p>然后用Process32First和Process32Next  API把获得的进程信息放到PROCESSENTRY32结构体中</p>\n<ul>\n<li>各个函数定义</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109194621163.png\" alt=\"image-20240109194621163\"></p>\n</li>\n<li><p>获取进程pid后，根据nmode判断是inject dll还是enject dll</p>\n<ul>\n<li>系统进程的pid一般都小于100，为了保证安全性，不向这些进程注入dll文件</li>\n</ul>\n</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>只有先提升HideProc.exe进程的权限，才可以准确获得所有进程的列表。因此在main函数中，使用SetPrivilege函数提升了权限</p>\n\n</div>\n<h4 id=\"main函数-1\"><a href=\"#main函数-1\" class=\"headerlink\" title=\"main函数\"></a>main函数</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">_tmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> TCHAR<span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span>                     nMode <span class=\"token operator\">=</span> INJECTION_MODE<span class=\"token punctuation\">;</span>\n    HMODULE                 hLib <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    PFN_SetProcName         SetProcName <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc <span class=\"token operator\">!=</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n Usage  : HideProc.exe &lt;-hide|-show> \"</span>\\\n               <span class=\"token string\">\"&lt;process name> &lt;dll path>\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// change privilege</span>\n    <span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// load library</span>\n    <span class=\"token comment\">// stealth.dll</span>\n    hLib <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set process name to hide</span>\n    <span class=\"token comment\">// notepad.exe</span>\n    SetProcName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PFN_SetProcName<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hLib<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SetProcName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SetProcName</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Inject(Eject) Dll to all process</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"-show\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\t    nMode <span class=\"token operator\">=</span> EJECTION_MODE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">InjectAllProcess</span><span class=\"token punctuation\">(</span>nMode<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// free library</span>\n    <span class=\"token function\">FreeLibrary</span><span class=\"token punctuation\">(</span>hLib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"stealth-cpp\"><a href=\"#stealth-cpp\" class=\"headerlink\" title=\"stealth.cpp\"></a>stealth.cpp</h3><h4 id=\"SetProcName\"><a href=\"#SetProcName\" class=\"headerlink\" title=\"SetProcName\"></a>SetProcName</h4><p>实际的API注入由Stealth.dll负责，下面分析源代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>linker<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"/SECTION:.SHARE,RWS\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">data_seg</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\".SHARE\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n    TCHAR g_szProcName<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">data_seg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>第一条命令：告诉编译器在链接时创建一个名为.SHAARE的section，并把它的属性设置为R 可读 W 可写  S 可共享，这个共享内存段可以被不同的进程访问，从而实现进程间通信</li>\n<li>第二条命令：将下面的全局变量放在.SHARE的section中<ul>\n<li>也就是把g_szProcName放在这个section中</li>\n</ul>\n</li>\n<li>第三条命令：定义一个全局变量，字符数组，长度为MAX_PATH</li>\n<li>第四条命令：这个编译指令将数据段的放置恢复为默认设置。它告诉编译器将后续的全局变量放置回默认的数据节中。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetProcName</span><span class=\"token punctuation\">(</span>LPCTSTR szProcName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">_tcscpy_s</span><span class=\"token punctuation\">(</span>g_szProcName<span class=\"token punctuation\">,</span> szProcName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>导出函数SetProcName()，将要隐藏的进程名称保存到g_szProcName</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>在共享内存节区创建g_szProcName缓冲区的好处在于，steath.dll被注入所有进程时，可以彼此共享隐藏进程的名称</p>\n</p>\n</div>\n<h4 id=\"DllMain-1\"><a href=\"#DllMain-1\" class=\"headerlink\" title=\"DllMain()\"></a>DllMain()</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span>            szCurProc<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span>            <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// #1. 异常处理</span>\n    <span class=\"token comment\">// 若当前进程为 HookProc.exe ，则中止，不进行钩取操作</span>\n    <span class=\"token function\">GetModuleFileNameA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szCurProc<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>szCurProc<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HideProc.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> fdwReason <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// #2. API Hooking</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH <span class=\"token operator\">:</span> \n\t\t\t<span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span>DEF_NTDLL<span class=\"token punctuation\">,</span> DEF_ZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewZwQuerySystemInformation<span class=\"token punctuation\">,</span> g_pOrgBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// #3. API Unhooking </span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH <span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span>DEF_NTDLL<span class=\"token punctuation\">,</span> DEF_ZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">,</span> g_pOrgBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>首先比较字符串，如果进程名是HideProc.exe，那就不钩取API</li>\n<li>发生DLL_PROCESS_ATTACH时，调用hook_by_code钩取API</li>\n<li>DLL_PROCESS_DETACH时，脱钩</li>\n</ul>\n<h4 id=\"hook-by-code\"><a href=\"#hook-by-code\" class=\"headerlink\" title=\"hook_by_code\"></a>hook_by_code</h4><p><strong>Q：参数介绍</strong></p>\n<ul>\n<li>LPCSTR szDllName：[IN]包含要钩取的API的DLL文件名称</li>\n<li>LPCSTR szFuncName：[IN]要钩取的API名称</li>\n<li>PROC pfnNew：[IN]用户提供的钩取函数地址</li>\n<li>PBYTE pOrgBytes：[OUT]存储原来5个字节的缓冲区，后面脱钩使用</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span>LPCSTR szDllName<span class=\"token punctuation\">,</span> LPCSTR szFuncName<span class=\"token punctuation\">,</span> PROC pfnNew<span class=\"token punctuation\">,</span> PBYTE pOrgBytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    FARPROC pfnOrg<span class=\"token punctuation\">;</span>\n    DWORD dwOldProtect<span class=\"token punctuation\">,</span> dwAddress<span class=\"token punctuation\">;</span>\n    BYTE pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0xE9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    PBYTE pByte<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 要钩取的API地址：ntdll.ZwQuerySystemInformation</span>\n    pfnOrg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FARPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span>szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> szFuncName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pByte <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>pfnOrg<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果已经被钩取，那么 return FALSE（E9是jmp的指令）</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pByte<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 为了修改5个字节，先向内存添加\"写\"属性</span>\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pfnOrg<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 备份原有代码 (5 byte)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pOrgBytes<span class=\"token punctuation\">,</span> pfnOrg<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 计算JMP地址，(E9 XXXX)</span>\n    <span class=\"token comment\">// => XXXX = pfnNew - pfnOrg - 5</span>\n\t<span class=\"token comment\">// Jmp相对地址=原来地址的下一条指令的地址-要跳转指令的地址</span>\n    dwAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnNew <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnOrg <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwAddress<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Hook - 修改 5 byte (JMP XXXX)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pfnOrg<span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 回复内存属性</span>\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pfnOrg<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：jMP地址的计算</strong></p>\n<ul>\n<li>指令格式为</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">JMP  xxxxxxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>根据 Intel X86 (IA-32)指令格式，JMP指令对应的操作码是E9，后面跟着4bytes的地址。所以总长度是5bytes</li>\n<li>xxxxxxx是相对地址，他应该怎么计算呢？<ul>\n<li>xxxxxxx &#x3D; 要跳转的地址(VA) - 当前指令地址 - 当前指令长度(5)s</li>\n<li>所以这个是相对地址是相对指令结束位置的地址</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>除了JMP指令之外，也可以用short JMP命令，它是进行短距离跳转，对应的IA-32指是”EB XX”，指令长度为2bytes.</p>\n<p>JMP每次都要计算相对地址，很不方便，也可以用绝对地址跳转。</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240109203515942.png\" alt=\"image-20240109203515942\"></p>\n\n</div>\n<p><strong>Q：实际的ZwQuerySystemInformation() API由hook_by_code()函数完成，下面进行调试</strong></p>\n<ul>\n<li>这里我没调出来，找不到API的位置，我也无法注入</li>\n</ul>\n<h4 id=\"unhook-by-code\"><a href=\"#unhook-by-code\" class=\"headerlink\" title=\"unhook_by_code()\"></a>unhook_by_code()</h4><ul>\n<li><p>是取消钩取的函数，主要是把前5个字节恢复成原值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span>LPCSTR szDllName<span class=\"token punctuation\">,</span> LPCSTR szFuncName<span class=\"token punctuation\">,</span> PBYTE pOrgBytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    FARPROC pFunc<span class=\"token punctuation\">;</span>\n    DWORD dwOldProtect<span class=\"token punctuation\">;</span>\n    PBYTE pByte<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获得API地址：ntdll.ZwQuerySystemInformation</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span>szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> szFuncName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pByte <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果已经脱钩，则 return FALSE</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pByte<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 为了修改5个字节，先向内存添加\"写\"属性</span>\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Unhook</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pFunc<span class=\"token punctuation\">,</span> pOrgBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 回复内存属性</span>\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"NewZwQuerySystemInformation\"><a href=\"#NewZwQuerySystemInformation\" class=\"headerlink\" title=\"NewZwQuerySystemInformation\"></a>NewZwQuerySystemInformation</h4><p><strong>Q：先看下ntdll.ZwQueryInformation() API</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110085115774.png\" alt=\"image-20240110085115774\"></p>\n<ul>\n<li>SystemInformationClass设置为SystemInformationClass(5)后，调用ZwQuerySystemInformation()  API </li>\n<li>SystemInformation[in&#x2F;out]参数中存储的是SYSTEM_PROCESS_INFORMATION结构体单向链表。</li>\n<li>这个结构体链表中存储着运行中的所有进程的信息</li>\n<li>所以隐藏某个进程之前，要先查找对应的链表成员，然后断开其与链表的连接</li>\n</ul>\n<p><strong>Q：NewZwQueryInformation()函数</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">NTSTATUS WINAPI <span class=\"token function\">NewZwQuerySystemInformation</span><span class=\"token punctuation\">(</span>\n                SYSTEM_INFORMATION_CLASS SystemInformationClass<span class=\"token punctuation\">,</span> \n                PVOID SystemInformation<span class=\"token punctuation\">,</span> \n                ULONG SystemInformationLength<span class=\"token punctuation\">,</span> \n                PULONG ReturnLength<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    NTSTATUS status<span class=\"token punctuation\">;</span>\n    FARPROC pFunc<span class=\"token punctuation\">;</span>\n    PSYSTEM_PROCESS_INFORMATION pCur<span class=\"token punctuation\">,</span> pPrev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> szProcName<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 开始前先脱钩 unhook</span>\n    <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span>DEF_NTDLL<span class=\"token punctuation\">,</span> DEF_ZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">,</span> g_pOrgBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 调用 original API</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span>DEF_NTDLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                           DEF_ZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span>SystemInformationClass<span class=\"token punctuation\">,</span> SystemInformation<span class=\"token punctuation\">,</span> \n              SystemInformationLength<span class=\"token punctuation\">,</span> ReturnLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> status <span class=\"token operator\">!=</span> STATUS_SUCCESS <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> __NTQUERYSYSTEMINFORMATION_END<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 仅针对 SystemProcessInformation</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> SystemInformationClass <span class=\"token operator\">==</span> SystemProcessInformation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// SYSTEM_PROCESS_INFORMATION 类型转换</span>\n        <span class=\"token comment\">// pCur 是单链表的头</span>\n        pCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSYSTEM_PROCESS_INFORMATION<span class=\"token punctuation\">)</span>SystemInformation<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 比较进程名称</span>\n            <span class=\"token comment\">// g_szProcName 为要隐藏的进程名称</span>\n            <span class=\"token comment\">// (=> 在SetProcName()中设置)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pCur<span class=\"token operator\">-></span>Reserved2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span>pCur<span class=\"token operator\">-></span>Reserved2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> g_szProcName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 从链表中删除要隐藏的进程</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pCur<span class=\"token operator\">-></span>NextEntryOffset <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        pPrev<span class=\"token operator\">-></span>NextEntryOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span>\n                        pPrev<span class=\"token operator\">-></span>NextEntryOffset <span class=\"token operator\">+=</span> pCur<span class=\"token operator\">-></span>NextEntryOffset<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\t\t\n                    pPrev <span class=\"token operator\">=</span> pCur<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pCur<span class=\"token operator\">-></span>NextEntryOffset <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 链表的下一项</span>\n            pCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSYSTEM_PROCESS_INFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">+</span> pCur<span class=\"token operator\">-></span>NextEntryOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n__NTQUERYSYSTEMINFORMATION_END<span class=\"token operator\">:</span>\n\n    <span class=\"token comment\">// 再勾上 API</span>\n    <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span>DEF_NTDLL<span class=\"token punctuation\">,</span> DEF_ZWQUERYSYSTEMINFORMATION<span class=\"token punctuation\">,</span> \n                 <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewZwQuerySystemInformation<span class=\"token punctuation\">,</span> g_pOrgBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>脱钩，call_unhook()</li>\n<li>调用ZwQuerySystemInformation</li>\n<li>查找要隐藏的进程</li>\n<li>从链表中移除</li>\n<li>Hook ZwQuerySystemInformation</li>\n</ul>\n<p>这个原理和前面说的一样</p>\n<h2 id=\"33-6-全局API钩取\"><a href=\"#33-6-全局API钩取\" class=\"headerlink\" title=\"33.6 全局API钩取\"></a>33.6 全局API钩取</h2><p><strong>Q：33.5中实现了进程隐藏，只是针对特定进程实现了API钩取，并未实现全局API钩取</strong></p>\n<ul>\n<li><p>对于新的proc.exe，notepad.exe仍然是可见的，因此需要用全局API钩取</p>\n</li>\n<li><p>全局API钩取也是一种API钩取，它针对的进程为当前所有的进程和将来要运行的进程</p>\n</li>\n</ul>\n<h3 id=\"Kernel32-CreateProcess-API\"><a href=\"#Kernel32-CreateProcess-API\" class=\"headerlink\" title=\"Kernel32.CreateProcess()  API\"></a>Kernel32.CreateProcess()  API</h3><ul>\n<li><p>这个API用来创建新进程，其他启动运行进程的API (WinExc、ShellExecute()、system())在其内部也调用的是CreateProcess函数</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110090515580.png\" alt=\"image-20240110090515580\"></p>\n</li>\n</ul>\n<p><strong>Q：那思路就来了</strong></p>\n<ul>\n<li>如果我向当前所有的进程注入stealth.dll，除了钩取ZwQuerySystemInformation，我把CreateProcess API也钩取了，那之后所有的进程自动注入stealth.dll</li>\n<li>因为所有的进程都是通过父进程(通常是explorer.exe)调用CreateProcess创建的。那我钩取了父进程的CreateProcess()  API，就可以把stealth.dll文件注入所有子进程</li>\n</ul>\n<p><strong>Q：钩取CreateProcess() API,要考虑以下几个方面</strong></p>\n<ul>\n<li>钩取CreateProcess() API时，还要钩取kernel32.CreateProcessA()和kernel32.CreateProcessW()</li>\n<li>CreateProcess()A、CreateProcessW()内部又分别调用了CreateProcessInternalA()、CreateProcessInternalW()函数。有的进程也会调用这两个函数，所以也要把这两个API钩取。钩取时，尽可能钩取低级API</li>\n<li>钩取函数要钩取调用CreateProcess而创建的子进程的API。因此，很短时间内，子进程可能在未钩取的状态下运行</li>\n</ul>\n<h3 id=\"Ntdll-ZwResumeThread-API\"><a href=\"#Ntdll-ZwResumeThread-API\" class=\"headerlink\" title=\"Ntdll.ZwResumeThread()  API\"></a>Ntdll.ZwResumeThread()  API</h3><p><strong>Q：Ntdll.ZwResumeThread() 函数</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110091334227.png\" alt=\"image-20240110091334227\"></p>\n<ul>\n<li>这个函数在进程创建后、主线程运行前被调用前执行，在CreateProcess() APi内部调用执行</li>\n<li>所以只要钩取这个函数，就可以在不运行子进程代码的状态下钩取API</li>\n<li><strong>但是ZwResumeThread() 是一个未公开的API，因此可能随着os补丁升级，这个API就更改了，可能在低版本可以钩取，突然在高版本就不行了。</strong></li>\n</ul>\n<h2 id=\"33-7-练习HideProc2-exe-Stealth2-dll\"><a href=\"#33-7-练习HideProc2-exe-Stealth2-dll\" class=\"headerlink\" title=\"33.7 练习HideProc2.exe,Stealth2.dll\"></a>33.7 练习HideProc2.exe,Stealth2.dll</h2><ul>\n<li>Stealth2.dll用来钩取CreateProcess，钩取ZwResumeThread</li>\n</ul>\n<h3 id=\"复制stealth2-dll文件到-SYSTEM-文件夹下\"><a href=\"#复制stealth2-dll文件到-SYSTEM-文件夹下\" class=\"headerlink\" title=\"复制stealth2.dll文件到%SYSTEM%文件夹下\"></a>复制stealth2.dll文件到%SYSTEM%文件夹下</h3><ul>\n<li>我这个一直显示Open process failed</li>\n</ul>\n<h2 id=\"33-8-源代码分析\"><a href=\"#33-8-源代码分析\" class=\"headerlink\" title=\"33.8 源代码分析\"></a>33.8 源代码分析</h2><h3 id=\"stealth2-cpp\"><a href=\"#stealth2-cpp\" class=\"headerlink\" title=\"stealth2.cpp\"></a>stealth2.cpp</h3><p> <strong>Q：和前面stealth.cpp相比的区别</strong></p>\n<ul>\n<li>将要隐藏的进程名称硬编码为notepad.exe，并且添加了钩取CreateProcess()  API的代码和 CreateProcessW() API的代码</li>\n</ul>\n<h4 id=\"DllMain-2\"><a href=\"#DllMain-2\" class=\"headerlink\" title=\"DllMain()\"></a>DllMain()</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span>            szCurProc<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span>            <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 异常处理使注入不会发生在HideProc2.exe进程</span>\n    <span class=\"token function\">GetModuleFileNameA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szCurProc<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>szCurProc<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HideProc2.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// change privilege</span>\n    <span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>fdwReason<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH <span class=\"token operator\">:</span> \n            <span class=\"token comment\">// hook</span>\n            <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewCreateProcessA<span class=\"token punctuation\">,</span> g_pOrgCPA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessW\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewCreateProcessW<span class=\"token punctuation\">,</span> g_pOrgCPW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwQuerySystemInformation\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewZwQuerySystemInformation<span class=\"token punctuation\">,</span> g_pOrgZwQSI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH <span class=\"token operator\">:</span>\n            <span class=\"token comment\">// unhook</span>\n            <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">,</span> g_pOrgCPA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessW\"</span><span class=\"token punctuation\">,</span> g_pOrgCPW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwQuerySystemInformation\"</span><span class=\"token punctuation\">,</span> g_pOrgZwQSI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>新增了hook CreateProcessA和hook  CreateProcessW</li>\n</ul>\n<h4 id=\"NewCreateProcessA\"><a href=\"#NewCreateProcessA\" class=\"headerlink\" title=\"NewCreateProcessA()\"></a>NewCreateProcessA()</h4><ul>\n<li>和之前的基本一样， 是钩取CreateProcessA() API的函数</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">NewCreateProcessA</span><span class=\"token punctuation\">(</span>\n    LPCTSTR lpApplicationName<span class=\"token punctuation\">,</span>\n    LPTSTR lpCommandLine<span class=\"token punctuation\">,</span>\n    LPSECURITY_ATTRIBUTES lpProcessAttributes<span class=\"token punctuation\">,</span>\n    LPSECURITY_ATTRIBUTES lpThreadAttributes<span class=\"token punctuation\">,</span>\n    BOOL bInheritHandles<span class=\"token punctuation\">,</span>\n    DWORD dwCreationFlags<span class=\"token punctuation\">,</span>\n    LPVOID lpEnvironment<span class=\"token punctuation\">,</span>\n    LPCTSTR lpCurrentDirectory<span class=\"token punctuation\">,</span>\n    LPSTARTUPINFO lpStartupInfo<span class=\"token punctuation\">,</span>\n    LPPROCESS_INFORMATION lpProcessInformation\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BOOL bRet<span class=\"token punctuation\">;</span>\n    FARPROC pFunc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// unhook</span>\n    <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">,</span> g_pOrgCPA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 调用原始 API</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bRet <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFCREATEPROCESSA<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>lpApplicationName<span class=\"token punctuation\">,</span>\n                                     lpCommandLine<span class=\"token punctuation\">,</span>\n                                     lpProcessAttributes<span class=\"token punctuation\">,</span>\n                                     lpThreadAttributes<span class=\"token punctuation\">,</span>\n                                     bInheritHandles<span class=\"token punctuation\">,</span>\n                                     dwCreationFlags<span class=\"token punctuation\">,</span>\n                                     lpEnvironment<span class=\"token punctuation\">,</span>\n                                     lpCurrentDirectory<span class=\"token punctuation\">,</span>\n                                     lpStartupInfo<span class=\"token punctuation\">,</span>\n                                     lpProcessInformation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 向生成的子进程注入 stealth2.dll</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bRet <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">InjectDll2</span><span class=\"token punctuation\">(</span>lpProcessInformation<span class=\"token operator\">-></span>hProcess<span class=\"token punctuation\">,</span> STR_MODULE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// hook</span>\n    <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">,</span> \n                 <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewCreateProcessA<span class=\"token punctuation\">,</span> g_pOrgCPA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>unhook()  -&gt;  Call original API -&gt; 新增的操作 -&gt; hook</li>\n</ul>\n<p><strong>Q：值得注意的点</strong></p>\n<ul>\n<li><strong>以前的InjectDll()函数通过pid获取进程句柄进行注入，但在上述示例中调用CreateProcess()  API时，能自然而然的获得子进程的句柄lpProcessInformation-&gt;hProcess</strong></li>\n</ul>\n<p><strong>钩取未公开的API时，一定要检查它在当前os版本中是否能正常运行</strong></p>\n<h2 id=\"33-9-利用热补丁技术钩取API\"><a href=\"#33-9-利用热补丁技术钩取API\" class=\"headerlink\" title=\"33.9 利用热补丁技术钩取API\"></a>33.9 利用热补丁技术钩取API</h2><h3 id=\"API代码修改技术的问题\"><a href=\"#API代码修改技术的问题\" class=\"headerlink\" title=\"API代码修改技术的问题\"></a>API代码修改技术的问题</h3><p><strong>Q：之前API代码修改的流程是每次都需要先unhook，最后再hook</strong></p>\n<ul>\n<li>也就是每次程序内部调用CreateProcessA()  APi时，NewCreateProcess() A Api就会被调用执行，不断重复hook  unhook</li>\n<li>这种反复执行会造成性能低下，且在多线程的环境下会发生错误<ul>\n<li>因为hook会对原API的前5个字节修改</li>\n<li>当一个线程尝试运行某代码，如果另一线程正在对改代码进行写操作，那就会出现冲突</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"热补丁-修改7个字节代码\"><a href=\"#热补丁-修改7个字节代码\" class=\"headerlink\" title=\"热补丁(修改7个字节代码)\"></a>热补丁(修改7个字节代码)</h3><ul>\n<li><p>Hot Patch或Hot fix</p>\n</li>\n<li><p>利用热补丁技术比修改5个字节代码的方法更稳定</p>\n</li>\n</ul>\n<p><strong>Q：普通API起始代码的形态</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110105645698.png\" alt=\"image-20240110105645698\"></p>\n<ul>\n<li>可以发现上面API代码以<code>MOV EDI, EDI</code>指令开始，在IA-32中是0x8BFF，<ul>\n<li>它的大小是2bytes，用于把EDI寄存器的值再放到EDI寄存器</li>\n</ul>\n</li>\n<li>API代码上面有5个NOP指令，IA-32指令0x90<ul>\n<li>大小为1byte，没啥意义</li>\n</ul>\n</li>\n<li>也就是说上面这7bytes是没有啥实际意义的</li>\n</ul>\n<p><strong>Q：那没有意义，为什么还要设置呢？</strong></p>\n<ul>\n<li>是为了方便打热补丁，热补丁由API钩取组成，在进程处于运行状态时更改进程内存中的库文件</li>\n<li>重启系统时，修改的目标库文件会被完全取代</li>\n</ul>\n<p><strong>Q：使用热补丁钩取图33-16中的kernel32.CreateProcessA() API</strong></p>\n<ol>\n<li><strong>利用二次跳转</strong></li>\n</ol>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110110224749.png\" alt=\"image-20240110110224749\"></p>\n<ul>\n<li>调用这个API时，首先会调用7C80236B地址处的JMP SHORT，长度是2bytes</li>\n<li>跳转到7C802366处，接着会JMP 10001000，即跳转到实际钩取的函数地址10001000，长度为5bytes</li>\n<li>像这样经过两次连续跳转，就完成了对指定API的钩取，因为原来的7bytes都是没有意义的，所以可以修改</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>从图33-20中的7C802366、7C80236B 地址可以看到，虽然都是JMP指令，但指令形态不同。</p>\n<p><strong>FAR JMP</strong></p>\n<ul>\n<li>7C802366地址处的指令形式为E9XXXXXXXX，大小为5个字节，被称为 FAR JMP，用来实现远程跳转(可以跳转到进程内存用户区域中的任意位置 )</li>\n</ul>\n<p>**SHORT JMP **</p>\n<ul>\n<li>而7C80236B地址处的指令形式为EB YY，大小为2个字节，被称为SHORT JMP，</li>\n<li>它只能以当前 EIP 为基准，在-128~127 范围内跳转。</li>\n</ul>\n</p>\n</div>\n<ol start=\"2\">\n<li><strong>不需要在钩取函数内部进行脱钩&#x2F;挂钩 操作</strong></li>\n</ol>\n<ul>\n<li>&#x3D;&#x3D;目前我没理解为啥？&#x3D;&#x3D;</li>\n</ul>\n<p><strong>Q：如果使用前面的5字节代码修改，指令是</strong></p>\n<ul>\n<li>没有PUSH EBP</li>\n<li>MOV EBP ESP</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110111327357.png\" alt=\"image-20240110111327357\"></p>\n<h2 id=\"33-11-源代码分析\"><a href=\"#33-11-源代码分析\" class=\"headerlink\" title=\"33.11 源代码分析\"></a>33.11 源代码分析</h2><h4 id=\"stealth3-cpp\"><a href=\"#stealth3-cpp\" class=\"headerlink\" title=\"stealth3.cpp\"></a>stealth3.cpp</h4><ul>\n<li>用热补丁技术钩取API</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">hook_by_hotpatch</span><span class=\"token punctuation\">(</span>LPCSTR szDllName<span class=\"token punctuation\">,</span> LPCSTR szFuncName<span class=\"token punctuation\">,</span> PROC pfnNew<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tFARPROC pFunc<span class=\"token punctuation\">;</span>\n\tDWORD dwOldProtect<span class=\"token punctuation\">,</span> dwAddress<span class=\"token punctuation\">;</span>\n\tBYTE pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0xE9是JMP</span>\n    BYTE pBuf2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xEB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\tPBYTE pByte<span class=\"token punctuation\">;</span>\n\n\tpFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FARPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span>szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> szFuncName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpByte <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pByte<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xEB</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1. NOP (0x90)</span>\n\tdwAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pfnNew <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwAddress<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 2. MOV EDI, EDI (0x8BFF)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pFunc<span class=\"token punctuation\">,</span> pBuf2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：首先把API起始地址上方的NOP * 5修改成JMP XXXXXXXX</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110163102241.png\" alt=\"image-20240110163102241\"></p>\n<ul>\n<li>根据前面学的，相对地址是相对末端的地址，对于前面API修改的JMP，XXXXXXXX &#x3D; pfnNew - pFunc - 5</li>\n<li>对于热补丁的JMP，XXXXXXXX &#x3D; pfnNew - pFunc</li>\n</ul>\n<p><strong>Q：改完之后，把NOP * 5指令替换为JMP XXXXXXXX指令</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwAddress<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>先把pBuf的后四位改成XXXXXXXX</li>\n<li>再把NOP * 5改成JMP XXXXXXXX</li>\n</ul>\n<p><strong>Q：计算JMP SHORT的地址</strong></p>\n<ul>\n<li>这里t相对于s的相对地址为t - s &#x3D; -7，也就是0xF9，是补码形式，热补丁中这个值总是0xF9，将它硬编码到源代码就可以了</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110164905029.png\" alt=\"image-20240110164905029\"></p>\n<h4 id=\"unhook-by-hotpatch\"><a href=\"#unhook-by-hotpatch\" class=\"headerlink\" title=\"unhook_by_hotpatch()\"></a>unhook_by_hotpatch()</h4><ul>\n<li><p>取消API钩取的函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">unhook_by_hotpatch</span><span class=\"token punctuation\">(</span>LPCSTR szDllName<span class=\"token punctuation\">,</span> LPCSTR szFuncName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    FARPROC pFunc<span class=\"token punctuation\">;</span>\n    DWORD dwOldProtect<span class=\"token punctuation\">;</span>\n    PBYTE pByte<span class=\"token punctuation\">;</span>\n    BYTE pBuf<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    BYTE pBuf2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x8B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    pFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FARPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span>szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> szFuncName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pByte <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pByte<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xEB</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1. NOP (0x90)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. MOV EDI, EDI (0x8BFF)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pFunc<span class=\"token punctuation\">,</span> pBuf2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>把修改后的指令恢复成原来的NOP * 5和MOV EDI,EDi指令</p>\n</li>\n<li><p>这些指令在热补丁中也是不变的，所以可以硬编码到源代码</p>\n</li>\n</ul>\n<h4 id=\"NewCreateProcessA-1\"><a href=\"#NewCreateProcessA-1\" class=\"headerlink\" title=\"NewCreateProcessA()\"></a>NewCreateProcessA()</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">NewCreateProcessA</span><span class=\"token punctuation\">(</span>\n    LPCTSTR lpApplicationName<span class=\"token punctuation\">,</span>\n    LPTSTR lpCommandLine<span class=\"token punctuation\">,</span>\n    LPSECURITY_ATTRIBUTES lpProcessAttributes<span class=\"token punctuation\">,</span>\n    LPSECURITY_ATTRIBUTES lpThreadAttributes<span class=\"token punctuation\">,</span>\n    BOOL bInheritHandles<span class=\"token punctuation\">,</span>\n    DWORD dwCreationFlags<span class=\"token punctuation\">,</span>\n    LPVOID lpEnvironment<span class=\"token punctuation\">,</span>\n    LPCTSTR lpCurrentDirectory<span class=\"token punctuation\">,</span>\n    LPSTARTUPINFO lpStartupInfo<span class=\"token punctuation\">,</span>\n    LPPROCESS_INFORMATION lpProcessInformation\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BOOL bRet<span class=\"token punctuation\">;</span>\n    FARPROC pFunc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 调用 original API</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateProcessA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FARPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFunc <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bRet <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFCREATEPROCESSA<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>lpApplicationName<span class=\"token punctuation\">,</span>\n                                     lpCommandLine<span class=\"token punctuation\">,</span>\n                                     lpProcessAttributes<span class=\"token punctuation\">,</span>\n                                     lpThreadAttributes<span class=\"token punctuation\">,</span>\n                                     bInheritHandles<span class=\"token punctuation\">,</span>\n                                     dwCreationFlags<span class=\"token punctuation\">,</span>\n                                     lpEnvironment<span class=\"token punctuation\">,</span>\n                                     lpCurrentDirectory<span class=\"token punctuation\">,</span>\n                                     lpStartupInfo<span class=\"token punctuation\">,</span>\n                                     lpProcessInformation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 向生成的子进程注入 stealth3.dll</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bRet <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">InjectDll2</span><span class=\"token punctuation\">(</span>lpProcessInformation<span class=\"token operator\">-></span>hProcess<span class=\"token punctuation\">,</span> STR_MODULE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里和前面的区别是不再调用hook和unhook，且添加了计算pFunc的语句</li>\n<li>这里跳过了原始API地址处的JMP YY指令，从紧接着的下一条指令开始执行，和调用原API效果一样</li>\n</ul>\n<h2 id=\"33-12-利用热补丁钩取API需要考虑的问题\"><a href=\"#33-12-利用热补丁钩取API需要考虑的问题\" class=\"headerlink\" title=\"33.12 利用热补丁钩取API需要考虑的问题\"></a>33.12 利用热补丁钩取API需要考虑的问题</h2><p><strong>Q：显然是必须满足NOP * 5 +  MOV EDI,EDI</strong></p>\n<ul>\n<li><p>但是有些API是不满足这个条件的</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110170233034.png\" alt=\"image-20240110170233034\"></p>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ul>\n<li>Ntdll.dll中的API代码都比较短，钩取这些API时，可以把原API备份到用户内存区域</li>\n<li>之后使用5字节代码修改原API的起始部分，在hook函数内部，调用备份的API即可</li>\n<li>这样很简单稳定，且Ntdll.dll的代码比较短，代码内部地址无依赖性，所以适合这种方式</li>\n</ul>\n\n</div>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><strong>Q：出现Open process 3976 failed原因是</strong></p>\n<ul>\n<li>Windows Vista&#x2F;7中使用了会话隔离技术，这可能导致DLL注入失败。</li>\n<li>出现这个问题时，不要使用kernel32.CreateRemoteThread()，而使用ntdll.NtCreateThreadEx()就可以了。相关内容请参考Session in Windows 7中的说明。</li>\n<li>有时开启杀毒软件自身的进程保护功能也会导致DLL注入失败。此外，尝试向PE32+格式的进程注入PE32格式的DLL时，也会失败反之亦然)。</li>\n<li>注入时必须保证要注入的DLL文件与目标进程的PE格式一致(PE32+格式是Windows64位OS使用的可执行文件格式)。</li>\n</ul>\n<p><strong>Q：使用全局钩取技术注入dl文件时会不会给系统带来很大负担呢?所有进程在创建的时候都要注入dll，那么内存使用量会大幅飙升吧?</strong></p>\n<ul>\n<li>首先，任何钩取操作都会给系统带来一定负担。编写程序时若能巧妙运用一些手法，则可以将这种对系统的影响降到最低，不会有什么问题，但一定要充分考虑好系统稳定性与资源利用问题。</li>\n<li><strong>向所有进程注入DLL时，内存使用量也会随之增加，但并不是以“DLL尺寸*注入进程的个数增加</strong>。</li>\n<li><strong>Windows中，相同DLL只要加载到内存中1次即可，进程通过映射技术使用它</strong>。</li>\n<li>简言之，<strong>通过映射技术将代码映射到相同内存，即代码区对所有进程都是一样的，而数据区则要根据相应进程重新创建</strong>。</li>\n</ul>\n<h1 id=\"0x34-高级全局API钩取-IE连接控制\"><a href=\"#0x34-高级全局API钩取-IE连接控制\" class=\"headerlink\" title=\"0x34 高级全局API钩取: IE连接控制\"></a>0x34 高级全局API钩取: IE连接控制</h1><p><strong>Q：目标</strong></p>\n<ul>\n<li>钩取IE，并在用户试图连接到指定网站时，连接到我的blog</li>\n<li>无论输入啥地址，还是点击链接，都无法连接到被阻止的网站</li>\n</ul>\n<h2 id=\"34-1-目标API\"><a href=\"#34-1-目标API\" class=\"headerlink\" title=\"34.1 目标API\"></a>34.1 目标API</h2><p><strong>Q：选择的API是</strong></p>\n<ul>\n<li>钩取套接字库ws2_32.dll，或者微软提供的网络访问相关库(wininet.dll、winhttp.dll)</li>\n</ul>\n<p><strong>Q：看edge浏览器加载的dll</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110194404890.png\" alt=\"image-20240110194404890\"></p>\n<ul>\n<li><p>正常要看ie浏览器加载的dll，ie浏览器会加载wininet.dll库，wininet.dll有个InternetConnect()的API，这个APi用来连接某个网站</p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240110194806459.png\" alt=\"image-20240110194806459\"></p>\n</li>\n</ul>\n<p><strong>Q：验证Wininet.InternetConnect() APi是否是要钩取的API</strong></p>\n<ul>\n<li><p>alt  + e可以查看加载的dll</p>\n</li>\n<li><p>接着调试IE进程，在ie浏览器地址栏输入要连接的网站地址</p>\n</li>\n<li><p>最终证明wininet!InternetConnectW() API的lpszServerName参数控制要连接的网站，因此就钩取这个API就行</p>\n</li>\n</ul>\n<h2 id=\"34-2-IE进程结构\"><a href=\"#34-2-IE进程结构\" class=\"headerlink\" title=\"34.2 IE进程结构\"></a>34.2 IE进程结构</h2><ul>\n<li>重新运行IE浏览器，打开多个选项卡</li>\n</ul>\n<p><strong>Q：使用process explorer查看IE进程结构</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240116154141328.png\" alt=\"image-20240116154141328\"></p>\n<ul>\n<li>之前打开了7个选项卡，共有5个ie进程在运行</li>\n<li>且3784的ieplore.exe和其他进程是父子关系，它管理着各选项卡对应的子进程</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>IE 7 开始引入“选项卡”这一概念，进程结构也发生了如上所示的变化。这种新进程结构下，<strong>每个选项卡都是一个独立运行的进程，其中一个选项卡发生错误，不会影响到其他选项卡或父进程</strong>(IE本身)(最新的网页浏览器中都使用了这项技术)。</p>\n</p>\n</div>\n<ul>\n<li>因为每个选项卡对应的子iexplore.exe进程实际负载网络连接，我们需要钩取每个iexplore.exe的API，因此应该采用全局API钩取</li>\n</ul>\n<h2 id=\"34-3-全局API钩取的概念\"><a href=\"#34-3-全局API钩取的概念\" class=\"headerlink\" title=\"34.3 全局API钩取的概念\"></a>34.3 全局API钩取的概念</h2><p><strong>Q：常规API钩取</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240116154702627.png\" alt=\"image-20240116154702627\"></p>\n<ul>\n<li>要钩取2492这个进程时，用InjDll.exe把Hook.dll注入Test.exe，然后钩取指定的API</li>\n<li>如果后面新生成了一个Test.exe，那么也需要再注入Hook.dll，再进行API钩取</li>\n</ul>\n<p><strong>Q：全局API钩取</strong></p>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240116154917899.png\" alt=\"image-20240116154917899\"></p>\n<ul>\n<li>把gHook.dll注入到Explorer.exe进程，最开始并没有注入到Test.exe进程</li>\n<li>gHook.dll中扩展了Hook.dll。可以钩取CreateProcess() API，每当子进程被创建时，都会将自身gHook.dll注入新创建的进程</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>实际上除了Explorer.exe，其他进程也可以创建子进程。所以要完美实现API钩取，需要钩取所有进程。但是处于开销考虑，就钩取特定的进程</p>\n\n</div>\n<h2 id=\"34-4-ntdll-ZwResumeThread-API\"><a href=\"#34-4-ntdll-ZwResumeThread-API\" class=\"headerlink\" title=\"34.4 ntdll!ZwResumeThread() API\"></a>34.4 ntdll!ZwResumeThread() API</h2><p><strong>Q：测试CreateProcess()  API</strong></p>\n<ul>\n<li>kernerl32!CreateProcess() API用来创建子进程，写一个简单的程序测试CreateProcess()  API</li>\n</ul>\n<h2 id=\"34-5-控制IE网络连接\"><a href=\"#34-5-控制IE网络连接\" class=\"headerlink\" title=\"34.5 控制IE网络连接\"></a>34.5 控制IE网络连接</h2><p><strong>Q：钩取特定进程的API</strong></p>\n<ul>\n<li>用IE连接指定网站时，让他连接到另外的网站</li>\n<li>在IE中添加新选项卡，比较新添加的进程的情形</li>\n</ul>\n<p><strong>Q：IE进程结构</strong></p>\n<ul>\n<li>IE进程以父子进程的形式运行，只要钩取父进程的ntdll!ZwResumeThread()，后面生成的所有子IE进程都会自动钩取</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-04/image-20240117084222840.png\" alt=\"image-20240117084222840\"></p>\n<h3 id=\"注入DLL\"><a href=\"#注入DLL\" class=\"headerlink\" title=\"注入DLL\"></a>注入DLL</h3><p><strong>Q：将redirect.dll文件注入IE进程</strong></p>\n<h3 id=\"创建新选项卡\"><a href=\"#创建新选项卡\" class=\"headerlink\" title=\"创建新选项卡\"></a>创建新选项卡</h3><ul>\n<li>此时新选项卡中也已经注入了redirect.dll</li>\n</ul>\n<h3 id=\"尝试连接网站\"><a href=\"#尝试连接网站\" class=\"headerlink\" title=\"尝试连接网站\"></a>尝试连接网站</h3><ul>\n<li>在IE选项卡中连接<a href=\"http://www.baidu.com,但是发现实际上连接的确实www.reverse.com/\">www.baidu.com，但是发现实际上连接的确实www.reverse.com</a></li>\n</ul>\n<h2 id=\"34-6-源代码\"><a href=\"#34-6-源代码\" class=\"headerlink\" title=\"34.6 源代码\"></a>34.6 源代码</h2><h3 id=\"DllMain-3\"><a href=\"#DllMain-3\" class=\"headerlink\" title=\"DllMain()\"></a>DllMain()</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span>            szCurProc<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span>            <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> fdwReason <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH <span class=\"token operator\">:</span> \n            <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllMain() : DLL_PROCESS_ATTACH\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">GetModuleFileNameA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szCurProc<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>szCurProc<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"iexplore.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllMain() : current process is [iexplore.exe]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 钩取 wininet!InternetConnectW() API 前先加载 wininet.dll</span>\n                <span class=\"token comment\">// 预先加载 wininet.dll</span>\n\t\t\t\t<span class=\"token comment\">// 需要在相关进程的主线程开始之前拦截控制权，此时，我们要钩取的wininet.dll模块可能尚未加载。</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllMain() : LoadLibrary() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">// hook</span>\n            <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwResumeThread\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewZwResumeThread<span class=\"token punctuation\">,</span> g_pZWRT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"InternetConnectW\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewInternetConnectW<span class=\"token punctuation\">,</span> g_pICW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH <span class=\"token operator\">:</span>\n            <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllMain() : DLL_PROCESS_DETACH\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// unhook</span>\n            <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwResumeThread\"</span><span class=\"token punctuation\">,</span>  g_pZWRT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"InternetConnectW\"</span><span class=\"token punctuation\">,</span>  g_pICW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：为什么上面代码中，在运行的进程是iexplorer.exe时，要加载winnet.dll？</strong></p>\n<ul>\n<li>钩取ntdll!ZwResumeThread() API时，需要在相关进程的主线程开始前，拦截控制权</li>\n<li>此时，钩取的winnet.dll可能还没有加载。如果它没u加载，我就没法钩取它内部的InternetConnectW</li>\n</ul>\n<h3 id=\"NewInternetConnectW\"><a href=\"#NewInternetConnectW\" class=\"headerlink\" title=\"NewInternetConnectW()\"></a>NewInternetConnectW()</h3><ul>\n<li>winnet!InternetConnectW()的钩取函数是NewInternetConnectW()</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">HINTERNET WINAPI <span class=\"token function\">NewInternetConnectW</span>\n<span class=\"token punctuation\">(</span>\n    HINTERNET hInternet<span class=\"token punctuation\">,</span>\n    LPCWSTR lpszServerName<span class=\"token punctuation\">,</span>\n    INTERNET_PORT nServerPort<span class=\"token punctuation\">,</span>\n    LPCTSTR lpszUsername<span class=\"token punctuation\">,</span>\n    LPCTSTR lpszPassword<span class=\"token punctuation\">,</span>\n    DWORD dwService<span class=\"token punctuation\">,</span>\n    DWORD dwFlags<span class=\"token punctuation\">,</span>\n    DWORD_PTR dwContext\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HINTERNET hInt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    FARPROC pFunc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    HMODULE hMod <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// unhook</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"InternetConnectW\"</span><span class=\"token punctuation\">,</span> g_pICW<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewInternetConnectW() : unhook_by_code() failed!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// call original API</span>\n    hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hMod <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewInternetConnectW() : GetModuleHandle() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> __INTERNETCONNECT_EXIT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"InternetConnectW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pFunc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewInternetConnectW() : GetProcAddress() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> __INTERNETCONNECT_EXIT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>lpszServerName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"www.naver.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>lpszServerName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"www.daum.net\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>lpszServerName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"www.nate.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> \n        <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>lpszServerName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"www.yahoo.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[redirect] naver, daum, nate, yahoo => reversecore\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hInt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFINTERNETCONNECTW<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hInternet<span class=\"token punctuation\">,</span>\n                                           L<span class=\"token string\">\"www.reversecore.com\"</span><span class=\"token punctuation\">,</span>\n                                           nServerPort<span class=\"token punctuation\">,</span>\n                                           lpszUsername<span class=\"token punctuation\">,</span>\n                                           lpszPassword<span class=\"token punctuation\">,</span>\n                                           dwService<span class=\"token punctuation\">,</span>\n                                           dwFlags<span class=\"token punctuation\">,</span>\n                                           dwContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[no redirect]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hInt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFINTERNETCONNECTW<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hInternet<span class=\"token punctuation\">,</span>\n                                           lpszServerName<span class=\"token punctuation\">,</span>\n                                           nServerPort<span class=\"token punctuation\">,</span>\n                                           lpszUsername<span class=\"token punctuation\">,</span>\n                                           lpszPassword<span class=\"token punctuation\">,</span>\n                                           dwService<span class=\"token punctuation\">,</span>\n                                           dwFlags<span class=\"token punctuation\">,</span>\n                                           dwContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n__INTERNETCONNECT_EXIT<span class=\"token operator\">:</span>\n\n    <span class=\"token comment\">// hook</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wininet.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"InternetConnectW\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewInternetConnectW<span class=\"token punctuation\">,</span> g_pICW<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewInternetConnectW() : hook_by_code() failed!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">return</span> hInt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里利用的是5字节的代码修改，流程和之前一样，InternetConnectW() API的第二个参数控制连接网站的地址</li>\n</ul>\n<h3 id=\"NewZwResumeThread\"><a href=\"#NewZwResumeThread\" class=\"headerlink\" title=\"NewZwResumeThread()\"></a>NewZwResumeThread()</h3><ul>\n<li><p>用来对ntdll!ZwResumeThread() APi进行全局钩取</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">NTSTATUS WINAPI <span class=\"token function\">NewZwResumeThread</span><span class=\"token punctuation\">(</span>HANDLE ThreadHandle<span class=\"token punctuation\">,</span> PULONG SuspendCount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    NTSTATUS status<span class=\"token punctuation\">,</span> statusThread<span class=\"token punctuation\">;</span>\n    FARPROC pFunc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> pFuncThread <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    DWORD dwPID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> DWORD dwPrevPID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    THREAD_BASIC_INFORMATION tbi<span class=\"token punctuation\">;</span>\n    HMODULE hMod <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    TCHAR szModPath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : start!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hMod <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : GetModuleHandle() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 查询线程信息</span>\n    <span class=\"token comment\">// call ntdll!ZwQueryInformationThread()</span>\n    pFuncThread <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwQueryInformationThread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pFuncThread <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : GetProcAddress() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//tbi是线程的基本信息</span>\n    statusThread <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFZWQUERYINFORMATIONTHREAD<span class=\"token punctuation\">)</span>pFuncThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tbi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tbi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> statusThread <span class=\"token operator\">!=</span> STATUS_SUCCESS <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : pFuncThread() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// dwPID为要唤醒的进程ID（子进程），GetCurrentProcessId则是当前创建子进程的进程的ID（父进程）。</span>\n    <span class=\"token comment\">//这里判断进程id是不是父进程的id，如果不是的话，给当前的子进程注入dll</span>\n    dwPID <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>tbi<span class=\"token punctuation\">.</span>ClientId<span class=\"token punctuation\">.</span>UniqueProcess<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>dwPID <span class=\"token operator\">!=</span> <span class=\"token function\">GetCurrentProcessId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dwPID <span class=\"token operator\">!=</span> dwPrevPID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() => call InjectDll()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        dwPrevPID <span class=\"token operator\">=</span> dwPID<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 修改 privilege</span>\n       \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : SetPrivilege() failed!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取 injection dll 路径</span>\n        <span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>STR_MODULE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                          szModPath<span class=\"token punctuation\">,</span> \n                          MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">InjectDll</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">,</span> szModPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : InjectDll(%d) failed!!!\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 脱钩</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">unhook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwResumeThread\"</span><span class=\"token punctuation\">,</span> g_pZWRT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : unhook_by_code() failed!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    pFunc <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwResumeThread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pFunc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : GetProcAddress() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> __NTRESUMETHREAD_END<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//调用原来函数</span>\n    status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFZWRESUMETHREAD<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">,</span> SuspendCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> status <span class=\"token operator\">!=</span> STATUS_SUCCESS <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : pFunc() failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> __NTRESUMETHREAD_END<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n__NTRESUMETHREAD_END<span class=\"token operator\">:</span>\n\t<span class=\"token comment\">//hook</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">hook_by_code</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntdll.dll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ZwResumeThread\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PROC<span class=\"token punctuation\">)</span>NewZwResumeThread<span class=\"token punctuation\">,</span> g_pZWRT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : hook_by_code() failed!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">DebugLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewZwResumeThread() : end!!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>Q：上面的整个流程是</strong></p>\n<ul>\n<li>正常情况下，如果已经有了一个test.exe，当又创建一个test.exe时，是父进程调用CreateProcess来创建的<ul>\n<li>在创建的最后一步，是调用ZwResumeThread()，恢复子进程的主线程，从而执行test.exe的EP代码。在没调用这个之前，是不会运行EP代码的。</li>\n</ul>\n</li>\n<li>在钩取ZwResumeThread()时，也就是已经到上面我说的这步了<ul>\n<li>那么我首先通过ZwQueryInformation获得当前主线程的子进程的信息</li>\n<li>给这个子进程注入dll</li>\n<li>接着脱钩，调用ZwResumeThread()，正常执行子进程的EP代码，创建子进程</li>\n<li>然后再hook</li>\n</ul>\n</li>\n<li>这样我实现了全局的API钩取，每次在创建子进程时，都会给他注入dll</li>\n</ul>\n<p><strong>Q：综上</strong></p>\n<ul>\n<li>可以发现其实并不是所有的API钩取都执行的是 “unhook -&gt; 调用原函数 -&gt; 注入 -&gt; Hook “ 的过程</li>\n<li>因为上面这个调用ZwResumeThread()就会创建出完整的进程了，所以并不能先调用</li>\n</ul>\n","text":"引言 第三部分学了好久，主要是因为中间参加了两次面试，但是最后也没有去上实习，害！ 还是好好努力学习吧 0x29 API钩取29.1 钩取Q：钩取(Hook)的整个流程如下 使用反汇编器&#x2F;调试器把握程序的结构与工作原理 开发需要的“钩子”代码，用于修改 Bug、改善程序...","link":"","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x29-API%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">0x29 API钩取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-1-%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">29.1 钩取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-2-API%E6%98%AF%E5%95%A5\"><span class=\"toc-text\">29.2 API是啥</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-3-API%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">29.3 API钩取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-3-1-%E6%AD%A3%E5%B8%B8%E8%B0%83%E7%94%A8API\"><span class=\"toc-text\">29.3.1 正常调用API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-3-2-%E9%92%A9%E5%8F%96API%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">29.3.2 钩取API调用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-4-%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%A1%A8\"><span class=\"toc-text\">29.4 技术图表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-4-1-%E6%96%B9%E6%B3%95%E5%AF%B9%E8%B1%A1-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">29.4.1 方法对象(是什么)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-4-2-%E4%BD%8D%E7%BD%AE-%E4%BD%95%E5%A4%84\"><span class=\"toc-text\">29.4.2 位置(何处)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-4-3-%E6%8A%80%E6%9C%AF-%E5%A6%82%E4%BD%95\"><span class=\"toc-text\">29.4.3 技术(如何)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29-4-4-API\"><span class=\"toc-text\">29.4.4 API</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x30-%E8%AE%B0%E4%BA%8B%E6%9C%ACWriteFile-API%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">0x30 记事本WriteFile() API钩取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-1-%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">30.1 用到的技术</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-2-%E8%B0%83%E8%AF%95%E5%99%A8\"><span class=\"toc-text\">30.2 调试器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E5%99%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">调试器功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">调试器工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">调试事件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-3-%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">30.3 调试技术流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-4-%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">30.4 练习</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-5-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">30.5 工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%B5%81\"><span class=\"toc-text\">执行流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%84%B1%E9%92%A9-%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">脱钩 &amp; 钩子</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-6-hookdbg-cpp%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">30.6 hookdbg.cpp源代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#main%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">main函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DebugLoop\"><span class=\"toc-text\">DebugLoop()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86-CREATE-PROCESS-DEBUG-EVENT\"><span class=\"toc-text\">处理 CREATE_PROCESS_DEBUG_EVENT</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#EXCEPTION-DEBUG-EVENT\"><span class=\"toc-text\">EXCEPTION_DEBUG_EVENT</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x31-%E8%B0%83%E8%AF%95%E5%99%A8\"><span class=\"toc-text\">0x31 调试器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x32-%E8%AE%A1%E7%AE%97%E5%99%A8%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">0x32 计算器显示中文数字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-1-%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%A1%A8\"><span class=\"toc-text\">32.1 技术图表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-2-%E9%80%89%E5%AE%9A%E7%9B%AE%E6%A0%87API\"><span class=\"toc-text\">32.2 选定目标API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-3-IAT%E9%92%A9%E5%8F%96%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">32.3 IAT钩取工作原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-4-%E7%BB%83%E4%B9%A0%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">32.4 练习示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-5-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">32.5 源代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DllMain\"><span class=\"toc-text\">DllMain</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySetWindowTextW\"><span class=\"toc-text\">MySetWindowTextW()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hook-iat\"><span class=\"toc-text\">hook_iat()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-6-%E8%B0%83%E8%AF%95%E8%A2%AB%E6%B3%A8%E5%85%A5%E7%9A%84DLL%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">32.6 调试被注入的DLL文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95DllMain\"><span class=\"toc-text\">调试DllMain</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95hook-iat\"><span class=\"toc-text\">调试hook_iat()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySetWindowTextW-1\"><span class=\"toc-text\">MySetWindowTextW()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x33-%E9%9A%90%E8%97%8F%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">0x33 隐藏进程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-1-%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%A1%A8\"><span class=\"toc-text\">33.1 技术图表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-2-API%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">33.2 API代码修改技术的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%8F%96%E4%B9%8B%E5%89%8D\"><span class=\"toc-text\">钩取之前</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%8F%96%E4%B9%8B%E5%90%8E\"><span class=\"toc-text\">钩取之后</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-3-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">33.3 进程隐藏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">工作原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">隐藏技术的问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-4-%E7%BB%83%E4%B9%A0-HideProc-exe-stealth-dll\"><span class=\"toc-text\">33.4 练习 HideProc.exe, stealth.dll</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-5-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">33.5 源代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HideProc-cpp\"><span class=\"toc-text\">HideProc.cpp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#InjectAllProcess\"><span class=\"toc-text\">InjectAllProcess()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#main%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">main函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#stealth-cpp\"><span class=\"toc-text\">stealth.cpp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SetProcName\"><span class=\"toc-text\">SetProcName</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DllMain-1\"><span class=\"toc-text\">DllMain()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hook-by-code\"><span class=\"toc-text\">hook_by_code</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unhook-by-code\"><span class=\"toc-text\">unhook_by_code()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NewZwQuerySystemInformation\"><span class=\"toc-text\">NewZwQuerySystemInformation</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-6-%E5%85%A8%E5%B1%80API%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">33.6 全局API钩取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Kernel32-CreateProcess-API\"><span class=\"toc-text\">Kernel32.CreateProcess()  API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ntdll-ZwResumeThread-API\"><span class=\"toc-text\">Ntdll.ZwResumeThread()  API</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-7-%E7%BB%83%E4%B9%A0HideProc2-exe-Stealth2-dll\"><span class=\"toc-text\">33.7 练习HideProc2.exe,Stealth2.dll</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6stealth2-dll%E6%96%87%E4%BB%B6%E5%88%B0-SYSTEM-%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B\"><span class=\"toc-text\">复制stealth2.dll文件到%SYSTEM%文件夹下</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-8-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">33.8 源代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#stealth2-cpp\"><span class=\"toc-text\">stealth2.cpp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DllMain-2\"><span class=\"toc-text\">DllMain()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NewCreateProcessA\"><span class=\"toc-text\">NewCreateProcessA()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-9-%E5%88%A9%E7%94%A8%E7%83%AD%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF%E9%92%A9%E5%8F%96API\"><span class=\"toc-text\">33.9 利用热补丁技术钩取API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#API%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">API代码修改技术的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%83%AD%E8%A1%A5%E4%B8%81-%E4%BF%AE%E6%94%B97%E4%B8%AA%E5%AD%97%E8%8A%82%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">热补丁(修改7个字节代码)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-11-%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">33.11 源代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#stealth3-cpp\"><span class=\"toc-text\">stealth3.cpp</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unhook-by-hotpatch\"><span class=\"toc-text\">unhook_by_hotpatch()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NewCreateProcessA-1\"><span class=\"toc-text\">NewCreateProcessA()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-12-%E5%88%A9%E7%94%A8%E7%83%AD%E8%A1%A5%E4%B8%81%E9%92%A9%E5%8F%96API%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">33.12 利用热补丁钩取API需要考虑的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x34-%E9%AB%98%E7%BA%A7%E5%85%A8%E5%B1%80API%E9%92%A9%E5%8F%96-IE%E8%BF%9E%E6%8E%A5%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">0x34 高级全局API钩取: IE连接控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-1-%E7%9B%AE%E6%A0%87API\"><span class=\"toc-text\">34.1 目标API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-2-IE%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">34.2 IE进程结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-3-%E5%85%A8%E5%B1%80API%E9%92%A9%E5%8F%96%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">34.3 全局API钩取的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-4-ntdll-ZwResumeThread-API\"><span class=\"toc-text\">34.4 ntdll!ZwResumeThread() API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-5-%E6%8E%A7%E5%88%B6IE%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">34.5 控制IE网络连接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5DLL\"><span class=\"toc-text\">注入DLL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%96%B0%E9%80%89%E9%A1%B9%E5%8D%A1\"><span class=\"toc-text\">创建新选项卡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%95%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%AB%99\"><span class=\"toc-text\">尝试连接网站</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-6-%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">34.6 源代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DllMain-3\"><span class=\"toc-text\">DllMain()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NewInternetConnectW\"><span class=\"toc-text\">NewInternetConnectW()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NewZwResumeThread\"><span class=\"toc-text\">NewZwResumeThread()</span></a></li></ol></li></ol></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"re-engineer-core-principle-05","uid":"16f33ed3c99a8cc9a4a675e2c29d6341","slug":"re-engineer-core-principle-05","date":"2024-01-14T14:13:18.000Z","updated":"2024-02-29T10:45:04.769Z","comments":true,"path":"api/articles/re-engineer-core-principle-05.json","keywords":null,"cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 上一部分学的很快，集中看了一周就学完了，希望可以快点把这本书看完，然后用起来 0x36 64位计算36.1 64位计算环境Q：操作系统的演化 1985年 Intel 推出了 80386 CPU芯片 1995年 Miscrosoft发布 32位 Windows 95，计算机正...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"汇编指令","uid":"0eefe6b6118865b181e289b1081cce4b","slug":"汇编指令","date":"2024-01-06T07:18:53.000Z","updated":"2024-01-06T14:17:05.439Z","comments":true,"path":"api/articles/汇编指令.json","keywords":null,"cover":null,"text":"汇编指令Q：PUSHAD (将所有寄存器的值压入栈) PUSHAD &#x2F;&#x2F;是一个x86汇编指令，用于将通用寄存器（EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI）的值依次压入堆栈中。该指令的作用 &#x2F;&#x2F;是保存这些寄存器的值，以便...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"汇编","slug":"汇编","count":1,"path":"api/tags/汇编.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}