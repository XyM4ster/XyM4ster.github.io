{"title":"原型链污染","uid":"9801b7a6e4282f27dc334c37705d70aa","slug":"原型链污染","date":"2024-02-29T08:42:20.000Z","updated":"2024-02-29T10:43:12.900Z","comments":true,"path":"api/articles/原型链污染.json","keywords":null,"cover":"/medias/hacker.jpg","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><ul>\n<li>之前看过原型链污染的相关内容，但是一直决定云里雾里，今天总结的时候，彻底弄明白了。</li>\n</ul>\n<h1 id=\"js原型链污染\"><a href=\"#js原型链污染\" class=\"headerlink\" title=\"js原型链污染\"></a>js原型链污染</h1><ul>\n<li>Object.prototype中是包括一些属性的，详细见黑框</li>\n<li>下图中的Foo.prototype、Object.prototype都是原型对象</li>\n<li>把Object.prototype想象成class A{}，会更好理解下面的内容</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709192937845-0acbf9da-c76f-490b-8876-f2397ce2531e.png\" alt=\"img\"></p>\n<h2 id=\"js创建对象的3种方式\"><a href=\"#js创建对象的3种方式\" class=\"headerlink\" title=\"js创建对象的3种方式\"></a>js创建对象的3种方式</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token comment\">// 第一种方式：字面量</span>\n    <span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'o1'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'o2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 第二种方式：构造函数</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">M</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o3'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 第三种方式：Object.create</span>\n    <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n\n　　console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span>　　　　\n　　console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span>\n　　console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">)</span>\n　　console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：搞明白普通对象和Object和{} 的关系</strong></p>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709191665148-8a894bba-6977-40f4-a93d-3327b3405ede.png\" alt=\"img\"><strong>Q：{}其实和Object是一样的</strong></p>\n<ul>\n<li>这里let o1 &#x3D; {}，相当于实例化了一个对象o1，所以o1.__proto__是{}，也是Object.prototype</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709188201304-565658ea-9c8e-4f23-b3ca-6738d1288cff.png\" alt=\"img\"></p>\n<p><strong>Q：函数也有__proto__</strong></p>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709191059074-33d540c4-a06f-4703-962b-8421ea93e533.png\" alt=\"img\"><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709192937845-0acbf9da-c76f-490b-8876-f2397ce2531e.png\" alt=\"img\">函数有prototype,对象是没有的。</p>\n<ul>\n<li>函数也是有__proto__的，因为函数也是对象。函数的__proto__指向的是Function.prototype。</li>\n<li>也就是说普通函数是Function这个构造函数的一个实例。</li>\n</ul>\n<p><strong>Q：特殊的地方</strong></p>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709195155781-c671242f-f59b-4bb7-9ac3-9b01c879235c.png\" alt=\"img\"></p>\n<ul>\n<li>这种情况下，我直接new function，而不是像前面定义一个构造函数，再new</li>\n<li>这里在创建对象时，并没有显示的指定构造函数，<strong>所以javascript会用默认的构造函数创建，****而默认的构造函数会将对象的原型指向一个空对象</strong> <strong>{}。</strong></li>\n<li>所以user.__proto __  &#x3D; {}, user.__proto __.__proto __  &#x3D; {}</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// this.userinfo = new function()&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isVIP <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAuthor <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token comment\">// &#125;;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p><a href=\"https://www.cnblogs.com/chengzp/p/prototype.html\">https://www.cnblogs.com/chengzp/p/prototype.html</a></p>\n<ul>\n<li>这里实例可以通过constructor获取自己的构造函数</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709188626671-4e98dc3c-53a8-4851-bbd3-3c088208170c.png\" alt=\"img\"></p>\n<ul>\n<li>对象的__proto__它的是原型，而原型也是一个对象，也有__proto__属性，原型的__proto__又是原型的原型，就这样可以一直通过__proto__想上找，这就是原型链，当向上找找到Object的原型的时候，这条原型链就算到头了。</li>\n</ul>\n<h2 id=\"原型对象和实例之间的联系\"><a href=\"#原型对象和实例之间的联系\" class=\"headerlink\" title=\"原型对象和实例之间的联系\"></a>原型对象和实例之间的联系</h2><ul>\n<li>通过一个构造函数创建出来的多个实例，如果都要添加一个方法，给每个实例去添加肯定很麻烦。这时就该用上原型了。在实例的原型上添加一个方法，这个原型的所有实例便都有了这个方法</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">M</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\no3<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\no3<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\no5<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"一步的原型链污染\"><a href=\"#一步的原型链污染\" class=\"headerlink\" title=\"一步的原型链污染\"></a>一步的原型链污染</h2><h3 id=\"看Key\"><a href=\"#看Key\" class=\"headerlink\" title=\"看Key\"></a>看Key</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">look</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// o1 o2 key =1 </span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"a\": 1, \"__proto__\": &#123;\"b\": 2&#125;&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"__proto__\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">look</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span>\n<span class=\"token function\">look</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1671939108291-a828179f-5f0a-4c56-ae6a-55e41a89fc10.png\" alt=\"img\"></p>\n<h3 id=\"污染过程\"><a href=\"#污染过程\" class=\"headerlink\" title=\"污染过程\"></a>污染过程</h3><p><a href=\"https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript\">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a></p>\n<p><strong>Q : 情况1</strong></p>\n<ul>\n<li>这是代码1的输出结果</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709185732678-39c0b546-d8e7-4562-9863-de42308bd8e6.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> source <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"__proto__\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\no3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这种情况，因为Key没有__proto__，在执行merge函数时，__proto__已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是[a, b]，__proto__并不是一个key，自然也不会修改Object的原型。</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709185679959-62149c58-d224-4286-a679-ada42df41abe.png\" alt=\"img\"></p>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709185684642-4cbe0ab8-e159-4596-9475-e52f886362d6.png\" alt=\"img\"></p>\n<p><strong>Q：情况2</strong></p>\n<ul>\n<li>看一下此时o2的key，发现有a和proto，此时的o2是一个json对象</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709185976727-a7af9f94-2a97-444d-aed9-0d53c1da49b6.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"a\": 1, \"__proto__\": &#123;\"b\": 2&#125;&#125;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\no3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>JSON.parse会把字符串转换为js对象，此时认为__proto__是key</li>\n<li>也就是在执行merge函数时，会<code>o1[__proto__] = o2[__proto__]</code>，由于o1是没有__proto__这个key的，所以就会找o1的原型，Object.prototype，o2有__proto__这个key，所以就在Object.prototype中添加了{b : 2}</li>\n</ul>\n<p><strong>就是o1[<strong>proto</strong>]代表o1的原型Object.prototype，但是o2[<strong>proto</strong>]是值，因为它有__proto__这个Key，拜Json.parse所赐</strong></p>\n<ul>\n<li>可以看到o1.__proto__和Object.prototype是相等的，Object.prototype理解成所有类的父类，那么自然给其他的都添加了这个属性</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709186187538-4c19d73c-08fd-48f5-9f82-2e484cbcc7b4.png\" alt=\"img\"></p>\n<ul>\n<li>参考上面的这个图，也能看出来Object.prototype的地位，所有函数的prototype都是Object.prototype的子类</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709194317071-f8d26aae-8141-407e-b757-88b4e088e7f5.png\" alt=\"img\"></p>\n<h2 id=\"二步的原型链污染\"><a href=\"#二步的原型链污染\" class=\"headerlink\" title=\"二步的原型链污染\"></a>二步的原型链污染</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object1<span class=\"token punctuation\">,</span> object2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> object2 <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> object1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userinfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isVIP <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAuthor <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\nbody<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"__proto__\":&#123;\"__proto__\":&#123;\"query\":\"123\"&#125;&#125;&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>userinfo<span class=\"token punctuation\">,</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于这段js代码，污染过程如下：</p>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709195195764-fbce91fe-06ba-478c-972c-f27ac976a687.png\" alt=\"img\"></p>\n<ul>\n<li>遍历object2中的key，只有一个<code>__proto__</code></li>\n<li>那么当执行到<code>object1[key] = object2[key]</code>这句时，变成了</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">user.userinfo[__proto__] &#x3D; &#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;123&quot;&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>所以相当于<code>&#123;&#125; = &#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;123&quot;&#125;&#125;</code></p>\n</li>\n<li><p>就是<code>&#123;&#125;[__proto__] = &#123;&quot;query&quot;:&quot;123&quot;&#125;</code></p>\n</li>\n<li><p>即 <code>&#123;Object.prototype&#125; = &#123;&quot;query&quot;:&quot;123&quot;&#125;</code></p>\n</li>\n<li><p><strong>成功添加属性为123</strong></p>\n</li>\n<li><p>所以污染成功</p>\n</li>\n</ul>\n<p><strong>Q：值得注意的是</strong></p>\n<ul>\n<li>这里<code>copy(user.userinfo,body);</code>和<code>copy(user,body);</code>效果是相同的，因为user和user.userinfo都是通过默认构造器创建的，都是通过两个__proto__到达Object.prototype</li>\n</ul>\n<p><img src=\"/../%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1709193657312-c7444233-ee3d-46a3-8b0c-2e38180e4471.png\" alt=\"img\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，想要原型链污染，首先要找到敏感函数</li>\n<li>其次在构造时，如果o1是{}，那么只需要一个__proto__就能到达Object.prototype。如果o1是通过默认的构造函数(Object{})创建的，那么需要两个__proto__。</li>\n</ul>\n","feature":true,"text":"引言 之前看过原型链污染的相关内容，但是一直决定云里雾里，今天总结的时候，彻底弄明白了。 js原型链污染 Object.prototype中是包括一些属性的，详细见黑框 下图中的Foo.prototype、Object.prototype都是原型对象 把Object.protot...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"web","slug":"web","count":2,"path":"api/tags/web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">js原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%843%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">js创建对象的3种方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%9E%E4%BE%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB\"><span class=\"toc-text\">原型对象和实例之间的联系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E6%AD%A5%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">一步的原型链污染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9C%8BKey\"><span class=\"toc-text\">看Key</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%A1%E6%9F%93%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">污染过程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%AD%A5%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">二步的原型链污染</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"re-engineer-core-principle-07","uid":"ad9b5bba7260fe69f150a16ce9de4386","slug":"re-engineer-core-principle-07","date":"2024-01-30T14:45:03.000Z","updated":"2024-02-29T10:40:35.672Z","comments":true,"path":"api/articles/re-engineer-core-principle-07.json","keywords":null,"cover":"/medias/pexels-luis-gomes-546819.jpg","text":"引言 终于到第七部分了，快看完了 0x50 反调试技术50.1 反调试技术 反调试技术有很强的依赖性。有些反调试技术仅在特定版本的os下工作 本章的大部分技术可以用在Windows XP SP3(32位)和Win7 32位下 50.3 反调试技术分类 根据破解方法分成静态和动态两...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}