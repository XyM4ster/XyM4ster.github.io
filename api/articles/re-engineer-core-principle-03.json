{"title":"re-engineer-core-principle-03","uid":"449c952c21adaaa0689becdb96065fd3","slug":"re-engineer-core-principle-03","date":"2023-12-05T02:11:20.000Z","updated":"2024-02-29T10:45:19.161Z","comments":true,"path":"api/articles/re-engineer-core-principle-03.json","keywords":null,"cover":"/medias/pexels-luis-gomes-546819.jpg","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><ul>\n<li>第三部分冲冲冲</li>\n<li>这一部分要把没见过的汇编单独整理到一个文档里</li>\n</ul>\n<h1 id=\"0x21-Windows消息钩取\"><a href=\"#0x21-Windows消息钩取\" class=\"headerlink\" title=\"0x21 Windows消息钩取\"></a>0x21 Windows消息钩取</h1><h2 id=\"21-1-钩子-Hook\"><a href=\"#21-1-钩子-Hook\" class=\"headerlink\" title=\"21.1 钩子(Hook)\"></a>21.1 钩子(Hook)</h2><p><strong>Q：钩子</strong></p>\n<ul>\n<li>就是偷看或截取信息所有的手段或者工具</li>\n</ul>\n<h2 id=\"21-2-消息钩子\"><a href=\"#21-2-消息钩子\" class=\"headerlink\" title=\"21.2 消息钩子\"></a>21.2 消息钩子</h2><p><strong>Q：常规Windows信息流</strong></p>\n<ul>\n<li>发生键盘输人事件时，WM_KEYDOWN消息被添加到[OS message queue]</li>\n<li>OS判断哪个应用程序中发生了事件，然后从[OS message queue]取出消息，添加到相应应用程序的[application message queue]中</li>\n<li>应用程序(如记事本监视自身的[application message queue],发现新添加的WM_KEYDOWN消息后，调用相应的事件处理程序处理。</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205102256808.png\" alt=\"image-20231205102256808\"></p>\n<p><strong>Q：从图21-1</strong></p>\n<ul>\n<li>如果设置好键盘消息钩子，处于钩链中的键盘消息钩子会比应用程序先看到信息</li>\n<li>在键盘消息钩子函数的内部，除了可以查看消息之外，还可以修改消息本身，而且还能对消息实施拦截，阻止消息传递。</li>\n<li>可以同时设置多个相同的键盘消息钩子。按照设置顺序依次调用这些钩子，它们组成的链条称为“钩链”。</li>\n</ul>\n<p><strong>Q：Windows的钩取程序</strong></p>\n<ul>\n<li>SPY++，能查看所有操作系统中来往的所有消息</li>\n</ul>\n<h2 id=\"21-3-SetWindowsHookEx\"><a href=\"#21-3-SetWindowsHookEx\" class=\"headerlink\" title=\"21.3 SetWindowsHookEx()\"></a>21.3 SetWindowsHookEx()</h2><p><strong>Q：使用SetWindowsHookEx() API可以轻松实现钩子，API的定义如下</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205102741919.png\" alt=\"image-20231205102741919\"></p>\n<ul>\n<li>hook procedure是由操作系统调用的回调函数。</li>\n<li>安装消息“钩子“时，“钩子”过程需要存在于某个DLL内部，且该DLL的示例句柄(instance handle)即是hMod。</li>\n<li>若dwThreadID参数被设置为0，则安装的钩子为“全局钩子”(GlobalHook)”，它会影响到运行中的(以及以后要运行的)所有进程。</li>\n</ul>\n<p>像这样，使用SetWindowsHookEx()设置好钩子之后，<strong>在某个进程中生成指定消息时，操作系统会将相关的DLL文件强制注入 (injection)相应进程</strong>，然后调用注册的“钩子”过程。注入进程时用户几乎不需要做什么，非常方便。</p>\n<p><strong>Q：关于idHook参数</strong></p>\n<ol>\n<li><code>WH_KEYBOARD</code>：<ul>\n<li>它是一种高级键盘钩子，也称为线程钩子。</li>\n<li>属于应用程序级别的, 所以系统线程会早于这个Hook响应, 并且只能截获系统发送到应用线程<code>message queue</code>的消息, <strong>但是优先执行该Hook的回调函数,如果Hook回调返回false才会继续处理当前应用的消息响应函数</strong></li>\n<li>下面KeyHook.dll的KeyboardProc就是这个过程。</li>\n</ul>\n</li>\n<li><code>WH_KEYBOARD_LL</code>：<ul>\n<li>它是一种low level键盘钩子，也称为全局钩子。</li>\n<li>当Raw Input Thread(RIT)决定从系统消息队列中<strong>分发消息之前</strong>, 就已经截获了这个消息进行了处理. 所以<strong>WH_KEYBOARD_LL</strong>甚至会早于系统线程来处理消息，我理解也就是图21-1中的黑色虚线是通过RIT完成的。<ul>\n<li>Raw Input Thread(RIT) 是Windows 操作系统中的一个线程，用来处理原始数据(直接来自输入设备（如键盘、鼠标、游戏手柄等）的底层输入信息)</li>\n</ul>\n</li>\n<li>并且<strong>WH_KEYBOARD_LL</strong>让系统不需要通过DLL来动态注入所有进程了,系统只会把消息发送到Hook线程</li>\n</ul>\n</li>\n</ol>\n<p>&#x3D;&#x3D;<strong>Q：回调函数</strong>&#x3D;&#x3D;</p>\n<ul>\n<li>在特定事件发生时被调用的函数。具体来说，回调函数是通过函数指针传递给其他函数的，以便在适当的时候由被调用函数调用</li>\n</ul>\n<h2 id=\"21-4-键盘消息钩取练习\"><a href=\"#21-4-键盘消息钩取练习\" class=\"headerlink\" title=\"21.4 键盘消息钩取练习\"></a>21.4 键盘消息钩取练习</h2><p><img src=\"/../re-engineer-core-principle-03/image-20231205103215586.png\" alt=\"image-20231205103215586\"></p>\n<ul>\n<li>KeyHook.dll文件是一个含有钩子过程(KeyboardProc())的DLL文件。</li>\n<li>HookMain.exe是最先加载KeyHook.dll并安装键盘钩子的程序。HookMain.exe加载 KeyHook.dll文件后使用SetWindowsHookEx()安装键盘钩子(KeyboardProc)。</li>\n<li>若其他进程(explorer.exe iexplore.exe  notepad.exe等)中发生键盘输人事件(WM_KEYDOWN)，OS就会强制将KeyHook.dll加载到相应进程的内存，然后调用KeyboardProc()函数</li>\n<li>这里需要注意的一点是，<strong>OS会将KeyHook.dll强制加载到发生键盘输人事件的所有进程。</strong>换言之，消息钩取技术常常被用作一种DLL注人技术(后面会单独讲解DLL注入的相关内容)。</li>\n</ul>\n<h3 id=\"21-4-1-练习HookMain-exe\"><a href=\"#21-4-1-练习HookMain-exe\" class=\"headerlink\" title=\"21.4.1 练习HookMain.exe\"></a>21.4.1 练习HookMain.exe</h3><ul>\n<li>当打开HookMain.exe时，此时notepad是无法打字的</li>\n<li>使用Process Explorer查看notepad.exe进程，可以看到KeyHook.dll已经加载到其中</li>\n<li>在Process Explorer中检索注入KeyHook.dll的所有进程，如图21-5所示。</li>\n<li>一个进程开始运行并发生键盘事件时，KeyHook.dll就会注人其中(&#x3D;&#x3D;问题：但其实忽视键盘事件的仅有notepadexe进程，其他进程会正常处理键盘事件)&#x3D;&#x3D;</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205111015937.png\" alt=\"image-20231205111015937\"></p>\n<p><strong>Q：HookMain.exe终止 - 拆除键盘钩子</strong></p>\n<ul>\n<li>输入q命令，可以拆除钩子</li>\n<li>此时记事本可以输入，不再有KeyHook.dll</li>\n</ul>\n<h3 id=\"21-4-2-分析源代码\"><a href=\"#21-4-2-分析源代码\" class=\"headerlink\" title=\"21.4.2 分析源代码\"></a>21.4.2 分析源代码</h3><p><strong>Q：HookMain.exe的源代码</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205111524029.png\" alt=\"image-20231205111524029\"></p>\n<ul>\n<li>加载KeyHook.dll</li>\n<li>开始钩取，用户输入q后，停止钩取</li>\n</ul>\n<p><strong>Q：KeyHook.cpp</strong></p>\n<ul>\n<li>这个整个的逻辑是基于<code>WH_KEYBOARD</code>，也就是图21-1.在os message queue和application queue 之间添加了消息钩子</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// KeyHook.cpp -> KeyHook.dll</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_PROCESS_NAME</span>\t\t<span class=\"token string\">\"notepad.exe\"</span></span>\n\nHINSTANCE g_hInstance <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nHHOOK g_hHook <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nHWND g_hWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\nBOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD dwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> dwReason <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span>\n\t\t\tg_hInstance <span class=\"token operator\">=</span> hinstDLL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nLRESULT CALLBACK <span class=\"token function\">KeyboardProc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nCode<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> szPath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nCode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// bit 31 : 0 => press, 1 => release</span>\n\t\t<span class=\"token comment\">// 按下按键时</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lParam <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 搜索当前可执行文件的路径，并保存到szPath中</span>\n\t\t\t<span class=\"token function\">GetModuleFileNameA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 比较当前进程名称，若为notepad.exe，则消息不会传递给应用程序</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DEF_PROCESS_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果不是notepad.exe，则调用CallNextHookEx()函数，将消息传递给应用程序</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">CallNextHookEx</span><span class=\"token punctuation\">(</span>g_hHook<span class=\"token punctuation\">,</span> nCode<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token comment\">// 声明要导出的函数</span>\n\t<span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HookStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tg_hHook <span class=\"token operator\">=</span> <span class=\"token function\">SetWindowsHookEx</span><span class=\"token punctuation\">(</span>WH_KEYBOARD<span class=\"token punctuation\">,</span> KeyboardProc<span class=\"token punctuation\">,</span> g_hInstance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HookStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> g_hHook <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">UnhookWindowsHookEx</span><span class=\"token punctuation\">(</span>g_hHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tg_hHook <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>当调用HookStart函数时，就会用SetWindowsHookEx()函数，把KeyboardProc添加到键盘钩链</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205112420245.png\" alt=\"image-20231205112420245\"></p>\n<ul>\n<li><p>这里面红框的内容就对应图21-1</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205112539782.png\" alt=\"image-20231205112539782\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231205112652164.png\" alt=\"image-20231205112652164\"></p>\n<p><strong>Q：执行流程</strong></p>\n<ul>\n<li>安装好键盘“钩子”后，无论哪个进程，只要发生键盘输人事件，OS就会强制将KeyHook.dll注入相应进程。</li>\n<li>加载了KeyHookdll的进程中，发生键盘事件时会首先调用执行KeyHook.KeyboardProc()。</li>\n<li>KeyProc()函数中发生键盘输入事件，会比较当前进程的名称和”notepad.exe”，如果相同，返回1，终止KeyProc()函数，这就意味着截获或者删除消息。此时消息不会传递到notepad.exe程序的消息队列</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>监视或记录用户键盘输入的程序被称为“键盘记录器”(Key Logger)。有些键盘记录器本身是 PC恶意代码，通过钩取键盘消息，在PC 用户不知情的情况下盗走用户的键盘输入，其工作原理与 KeyHook.dll的工作原理基本一致。</p>\n\n</div>\n<p><strong>Q：上述程序会卡死的原因(来自dragon blog)</strong></p>\n<ul>\n<li>需要把WH_KEYBOARD改成WH_KEYBOARD_LL</li>\n</ul>\n<h2 id=\"21-5-调试练习\"><a href=\"#21-5-调试练习\" class=\"headerlink\" title=\"21.5 调试练习\"></a>21.5 调试练习</h2><p><strong>Q：调试方法</strong></p>\n<ul>\n<li>需要找到核心代码：<ul>\n<li>逐行跟踪</li>\n<li>检索相关API</li>\n<li>检索相关子符串</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：我的分析</strong></p>\n<ul>\n<li>检索GetProcAddress API</li>\n<li>当然也可以用检索字符串，找”press q to quit”</li>\n</ul>\n<p><strong>Q：调试main函数</strong></p>\n<ul>\n<li><p>这里需要把WH_KEYBOARD，改写为WH_KEYBOARD_LL，之后重新生成KeyHook.dll</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gcc <span class=\"token parameter variable\">-shared</span> <span class=\"token parameter variable\">-o</span> KeyHook.dll test.c        //把test.c文件生成为KeyHook.dll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>再重新生成HookMain.exe</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Q：回调函数(CALLBACK)是什么?</strong></p>\n<ul>\n<li>就是某个特定事件发生时被指定调用的函数。<ul>\n<li>窗口Windows过程(WndProc)就是一个典型的回调函数(键盘、鼠标等事件发生时OS会调用注册的窗口过程)。</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：declspec函数是什么?</strong></p>\n<ul>\n<li><p>是<code>declaration specifier</code></p>\n</li>\n<li><p>declspec是针对编译器的关键字，指出相应函数为导出函数，也就是不限于当前模块使用，其他模块也可以使用</p>\n</li>\n<li><p><code>__declspec(dllexport)</code> 和 <code>__declspec(dllimport)</code>，用于在 DLL（动态链接库）中声明需要导出或导入的函数或变量。</p>\n</li>\n</ul>\n<p><strong>Q.SetWindowsHookEx()API为什么在KeyHook.dll内部调用?您说它是安装钩子的API?</strong></p>\n<ul>\n<li>A.是的。SetWindowsHookEx0) API用于将指定的“钩子”过程注册到钩链中。</li>\n<li>无论在DLI内部还是外部均可调用(编程时怎么方便怎么来)。</li>\n</ul>\n<h1 id=\"0x23-DLL注入\"><a href=\"#0x23-DLL注入\" class=\"headerlink\" title=\"0x23 DLL注入\"></a>0x23 DLL注入</h1><ul>\n<li>DLL注入是渗透其他进程的最简单有效的办法</li>\n</ul>\n<h2 id=\"23-1-DLL注入\"><a href=\"#23-1-DLL注入\" class=\"headerlink\" title=\"23.1 DLL注入\"></a>23.1 DLL注入</h2><p><strong>Q：什么是DLL注入</strong></p>\n<ul>\n<li><p>DLL注入指的是向运行中的其他进程强制插入特定的DLL文件。</p>\n</li>\n<li><p>DLL注人 命令     其他进程自行调用Loadlibrary()API，加载(Loading)用户指定的DLL文件。</p>\n</li>\n<li><p>DLL注入与一般DLL加载的区别在于，加载的目标进程是其自身或其他进程。</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231212153511440.png\" alt=\"image-20231212153511440\"></p>\n</li>\n<li><p>加载到notepad.exe进程中的myhack.dll与已经加载到notepad.exe进程中的DLL(kernel32.dll、user32.dll)一样，<strong>拥有访问notepad.exe进程内存的(正当的)权限</strong>，这样用户就可以做任何想做的事了</p>\n<ul>\n<li>比如:向notepad添加通信功能以实现Messenger、文本网络浏览器等</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>DLL 动态链接库</p>\n<ul>\n<li>DLL 被加载到进程后会自动运行 DIIMain()函数，用户可以把想执行的代码放到DIIMain()函数，每当加载 DLL时，添加的代码就会自然而然得到执行。利用该特性可修复程序 Bug，或向程序添加新功能。</li>\n</ul>\n</p>\n</div>\n<p><strong>Q：DllMain()函数</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD dwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>dwReason<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 想要添加的代码</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>当一个进程加载一个 DLL 时，会依次经历以下阶段：</p>\n<ul>\n<li><p><code>DLL_PROCESS_ATTACH</code>: 表示 DLL 正在被加载到进程空间。</p>\n</li>\n<li><p><code>DLL_THREAD_ATTACH</code>: 表示新线程正在创建或已经创建，并且将要与 DLL 进行关联。</p>\n</li>\n<li><p><code>DLL_THREAD_DETACH</code>: 表示已有线程正在退出或已经退出，并且与 DLL 的关联即将解除。</p>\n</li>\n<li><p><code>DLL_PROCESS_DETACH</code>: 表示 DLL 即将从进程空间中卸载。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"23-2-DLL注入示例\"><a href=\"#23-2-DLL注入示例\" class=\"headerlink\" title=\"23.2 DLL注入示例\"></a>23.2 DLL注入示例</h2><ul>\n<li><strong>使用LoadLibrary()API加载某个DLL时，该DLL中的DIIMain()函数就会被调用执行。</strong></li>\n<li>DLL注人的工作原理就是**从外部促使目标进程调用LoadLibrary()API(**与一般DLL加载相同)</li>\n<li>所以会强制调用执行DLL的DIIMain()函数。</li>\n<li>并且，<strong>被注入的DLL拥有目标进程内存的访问权限</strong>，用户可以随意操作(修复Bug、添加功能等)。</li>\n</ul>\n<h3 id=\"23-2-1-修bug\"><a href=\"#23-2-1-修bug\" class=\"headerlink\" title=\"23.2.1 修bug\"></a>23.2.1 修bug</h3><ul>\n<li>直接修改程序比较困难时，用DLL技术为程序添加新功能</li>\n</ul>\n<h3 id=\"23-2-2-消息钩取\"><a href=\"#23-2-2-消息钩取\" class=\"headerlink\" title=\"23.2.2 消息钩取\"></a>23.2.2 消息钩取</h3><ul>\n<li>Windows OS默认的消息钩取就是DLL注入，OS会直接将已注册的钩取DLL注入目标进程</li>\n</ul>\n<h3 id=\"23-2-3-API钩取\"><a href=\"#23-2-3-API钩取\" class=\"headerlink\" title=\"23.2.3 API钩取\"></a>23.2.3 API钩取</h3><h2 id=\"23-3-DLL注入的实现方法\"><a href=\"#23-3-DLL注入的实现方法\" class=\"headerlink\" title=\"23.3 DLL注入的实现方法\"></a>23.3 DLL注入的实现方法</h2><p><strong>Q：主要有下面三种方法</strong></p>\n<ul>\n<li>创建远程线程(CreateRemoteThread() API)</li>\n<li>使用注册表(AppInit_DLLs值)</li>\n<li>消息钩取(SetWindowsHookEx() API)</li>\n</ul>\n<h2 id=\"23-4-CreateRemoteThread\"><a href=\"#23-4-CreateRemoteThread\" class=\"headerlink\" title=\"23.4 CreateRemoteThread()\"></a>23.4 CreateRemoteThread()</h2><h3 id=\"练习myhack-dll\"><a href=\"#练习myhack-dll\" class=\"headerlink\" title=\"练习myhack.dll\"></a>练习myhack.dll</h3><ul>\n<li><p>把myhack.dll和InjectDll.exe放到同一目录下</p>\n<ul>\n<li>InjectDll.exe是将向目标进程，注入DLL文件(myhack.dll)的程序。</li>\n</ul>\n</li>\n<li><p>用管理员权限运行命令行，运行InjectDll.exe</p>\n</li>\n<li><p>DebugView可以捕获显示系统运行进程输出的所有的调试字符串</p>\n</li>\n</ul>\n<p><strong>Q：最终结果</strong></p>\n<ul>\n<li>会下载一个index.html到本地</li>\n</ul>\n<h3 id=\"23-4-2-分析源代码\"><a href=\"#23-4-2-分析源代码\" class=\"headerlink\" title=\"23.4.2 分析源代码\"></a>23.4.2 分析源代码</h3><h4 id=\"myhack-dll\"><a href=\"#myhack-dll\" class=\"headerlink\" title=\"myhack.dll\"></a><strong>myhack.dll</strong></h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// myhack.cpp -> myhack.dll</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tchar.h\"</span></span>\n\n<span class=\"token comment\">//是一个预处理指令，用于告诉编译器在链接阶段将 urlmon.lib 库文件包含到可执行文件中。</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"urlmon.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_URL</span>     \t<span class=\"token expression\"><span class=\"token punctuation\">(</span>L</span><span class=\"token string\">\"http://www.naver.com/index.html\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_FILE_NAME</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span>L</span><span class=\"token string\">\"index.html\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\nHMODULE g_hMod <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\nDWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID lParam<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    TCHAR szPath<span class=\"token punctuation\">[</span>_MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span> g_hMod<span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> MAX_PATH <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\t\n    TCHAR <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">_tcsrchr</span><span class=\"token punctuation\">(</span> szPath<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//查找tcsrchr(szPath, '\\\\') 将在 szPath 字符串中查找最后一个反斜杠字符的位置。</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>p <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">_tcscpy_s</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _MAX_PATH<span class=\"token punctuation\">,</span> DEF_FILE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//把index.html复制给p+1之后的位置</span>\n\n    <span class=\"token function\">URLDownloadToFile</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> DEF_URL<span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HANDLE hThread <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    g_hMod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HMODULE<span class=\"token punctuation\">)</span>hinstDLL<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> fdwReason <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH <span class=\"token operator\">:</span> \n            <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"&lt;myhack.dll> Injection!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：代码中的pragma comment(lib, “urlmon.lib”)</strong></p>\n<ul>\n<li>是一个预处理指令，用于告诉编译器在链接阶段将 urlmon.lib 库文件包含到可执行文件中。</li>\n</ul>\n<p><strong>Q：编译过程包含的三个阶段</strong></p>\n<ol>\n<li>预处理（Preprocessing）：<ul>\n<li>在这个阶段，预处理器将对源代码进行处理，执行诸如宏展开、条件编译、头文件包含等操作。</li>\n<li>预处理器会根据预处理指令（如 <code>#include</code>、<code>#define</code>、<code>#ifdef</code> 等）修改源代码。</li>\n<li>预处理后的代码将成为编译器的输入。</li>\n</ul>\n</li>\n<li>编译（Compilation）：<ul>\n<li>在这个阶段，编译器将对预处理后的代码进行语法分析、词法分析和语义分析，生成中间表示（通常是目标代码）。</li>\n<li>编译器会将源代码翻译成汇编语言或机器码，但尚未生成可执行文件。</li>\n<li>编译器会执行优化操作，以提高生成的代码的效率和性能。</li>\n</ul>\n</li>\n<li>链接（Linking）：<ul>\n<li>在这个阶段，链接器将处理编译器生成的目标文件（或可重定位文件），以及所需的库文件，将它们组合在一起生成可执行文件。</li>\n<li>链接器会解析符号引用，将函数和变量的定义与引用进行匹配，生成最终的可执行文件。</li>\n<li>链接器还会处理外部符号的解析、地址重定位等任务，以确保程序能够正确地执行</li>\n</ul>\n</li>\n</ol>\n<p><strong>Q：上述代码的过程</strong></p>\n<ul>\n<li>当dll加载到DLL_PROCESS_ATTACH，也就是正在被加载到进程空间时，会先输出字符串<code>&lt;myhack.dll&gt; Injection!!!</code>，之后会创建线程，调用ThreadProc()函数</li>\n<li>在ThreadProc()函数中，会调用<code> URLDownloadToFile</code>来下载指定网站的<code>index.html</code>文件</li>\n</ul>\n<h4 id=\"InjectDll-cpp\"><a href=\"#InjectDll-cpp\" class=\"headerlink\" title=\"InjectDll.cpp\"></a>InjectDll.cpp</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// InjectDll.cpp -> InjectDll.exe</span>\n<span class=\"token comment\">// 用来将 myhack.dll 注入到 notepad.exe 进程</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tchar.h\"</span></span>\n\nBOOL <span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>LPCTSTR lpszPrivilege<span class=\"token punctuation\">,</span> BOOL bEnablePrivilege<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n    TOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span>\n    HANDLE hToken<span class=\"token punctuation\">;</span>\n    LUID luid<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>TOKEN_ADJUST_PRIVILEGES <span class=\"token operator\">|</span> TOKEN_QUERY<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"OpenProcessToken error: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\">// lookup privilege on local system</span>\n                              lpszPrivilege<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// privilege to lookup </span>\n                              <span class=\"token operator\">&amp;</span>luid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>        <span class=\"token comment\">// receives LUID of privilege</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"LookupPrivilegeValue error: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n\n    tp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid <span class=\"token operator\">=</span> luid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bEnablePrivilege <span class=\"token punctuation\">)</span>\n        tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Enable the privilege or disable all privileges.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> \n                               FALSE<span class=\"token punctuation\">,</span> \n                               <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> \n                               <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>TOKEN_PRIVILEGES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                               <span class=\"token punctuation\">(</span>PTOKEN_PRIVILEGES<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> \n                               <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"AdjustTokenPrivileges error: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_NOT_ALL_ASSIGNED <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"The token does not have the specified privilege. \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBOOL <span class=\"token function\">InjectDll</span><span class=\"token punctuation\">(</span>DWORD dwPID<span class=\"token punctuation\">,</span> LPCTSTR szDllPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HANDLE hProcess <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> hThread <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    HMODULE hMod <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LPVOID pRemoteBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    DWORD dwBufSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">_tcslen</span><span class=\"token punctuation\">(</span>szDllPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>TCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LPTHREAD_START_ROUTINE pThreadProc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// #1. 使用dwPID获取目标进程（notepad.exe）的句柄</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"OpenProcess(%d) failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// #2. 在目标进程（notepad.exe）中分配 dwBufSize 大小的内存</span>\n    pRemoteBuf <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> dwBufSize<span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// #3. 将 myhack.dll 的路径写入分配的内存 pRemoteBuf</span>\n    <span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> pRemoteBuf<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>szDllPath<span class=\"token punctuation\">,</span> dwBufSize<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// #4. 获取 LoadLibraryA() API的地址</span>\n    hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pThreadProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LoadLibraryW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\">// #5. 重点，在目标进程（notepad.exe）中运行线程</span>\n    hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pThreadProc<span class=\"token punctuation\">,</span> pRemoteBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">_tmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> TCHAR <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"USAGE : %s &lt;pid> &lt;dll_path>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// </span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// inject dll</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">InjectDll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">_tstol</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"InjectDll(\\\"%s\\\") success!!!\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"InjectDll(\\\"%s\\\") failed!!!\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先会检查输入的参数，然后设置权限</p>\n<p>之后调用InjectDll函数，该函数是命令目标进程(notepad.exe)自行调用LoadLibrary(“myhack.dll”) API</p>\n<ol>\n<li><strong>获取目标进程notepad.exe句柄：</strong></li>\n</ol>\n<p><code>hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)</code></p>\n<ul>\n<li>也就是获取notepad.exe的句柄(PROCESS_ALL_ACCESS权限)，获取权限后，就可以用获取的句柄hProcess来控制对应的进程notepad.exe</li>\n</ul>\n<p><strong>Q：啥是进程句柄？</strong></p>\n<ul>\n<li>标识进程：进程句柄用于唯一标识操作系统中的进程。通过句柄，可以确定特定进程的上下文信息，如进程ID、进程优先级等。</li>\n<li>控制进程：进程句柄可以用于控制和操作进程。通过句柄，可以发送信号、获取和修改进程状态、分配和释放资源等。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>将要注入的DLL路径写入目标进程内存</strong></li>\n</ol>\n<p><code>pRemoteBuf = VirtualAllocEx(hProcess, NULL, d=wBufSize, MEM_COMMIT, PAGE_READWRITE);</code></p>\n<ul>\n<li>需要把即将加载的DLL文件路径告知目标进程(notepad.exe)。</li>\n<li><strong>因为任何内存空间都无法进行写入操作</strong>，故先使用VirtualAllocEx() API在目标进程(notepadexe)的内存空间中分配一块缓冲区，且指定该缓冲区的大小为DLL文件路径字符串的长度(含Terminating NULL)即可。</li>\n<li><code>VirtualAllocEx</code>函数的返回值pRemoteBuf分配所得的缓冲区地址，该地址是hProcess句柄所指目标进程notepad.exe的内存地址</li>\n</ul>\n<p><code>WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);</code></p>\n<ul>\n<li>使用WriteProcessMemory()API将DLL路径字符串(“C:\\work\\dummy.dll”)写入分配所得缓冲区(pRemoteBuf)地址。</li>\n<li>WriteProcessMemory（）API所写的内存空间也是hProcess句柄所指的目标进程(notepad.exe)的内存空间</li>\n<li>这样要注人的DLL文件的路径就被写人目标进程(notepad.exe)的内存空间。</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ul>\n<li>Windows 操作系统提供了调试 API，借助它们可以访问其他进程的内存空间。其中具有代表性的有 VirtualAllocEx()、VrtualFreeEx()、WriteProcessMemory()、ReadProcessMemory())等。</li>\n</ul>\n\n</div>\n<ol start=\"3\">\n<li><strong>获取LoadLibraryW() API地址</strong></li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npThreadProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LoadLibraryW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>LoadLibraryW是LoadLibrary()的Unicode字符串版本</li>\n</ul>\n<p><strong>Q：我们的目标是获得加载到notepad.exe中的kernel32.dll中LoadLibraryW() API的地址</strong></p>\n<ul>\n<li>但是上面的代码获取的是加载到当前代码，也就是InjectDll.exe中的kernel32.dll中的LoadLibraryW() API的地址</li>\n<li>那这两个Kernel32.dll的地址是一样的么？<ul>\n<li>如果是一样的，上述代码就没问题</li>\n</ul>\n</li>\n<li><strong>在Windows系统中，kernel32.dll在每个进程中的加载地址都是相同的</strong></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>根据OS类型、语言、版本不同，kernel32.dll 加载的地址也不同。并且 Vista&#x2F;7中应用了新的 ASLR功能，每次启动时，系统 DLL加载的地址都会改变。</p>\n<p>但是在系统运行期间它都会被映射(Mapping)到每个进程的相同地址。</p>\n<ul>\n<li>Windows 操作系统中，DLL首次进入内存称为“加载”(Loading)</li>\n<li><strong>以后其他进程需要使用相同 DLL时不必再次加载，只要将加载过的 DLL代码与资源映射一下即可</strong>，这种映射技术有利于提高内存的使用效率。</li>\n</ul>\n</p>\n</div>\n<p><strong>Q：系统DLL的ImageBase</strong></p>\n<ul>\n<li><p>一般而言，DLL文件的ImageBase默认为0x10000000，依次加载a.dll和b.dll时，先加载的a.dll被正常加载到此处，那么b.dll就没法加载了，于是发生重定位</p>\n</li>\n<li><p>实际上，Kernel32.dll不管在哪个进程都会被加载到相同地址，微软整理了一份OS 核心DLL文件的ImageBase值，防止各DLL文件加载时出现区域重合，这样加载DLL文件时就不会发生DLL重定位了</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231212173244348.png\" alt=\"image-20231212173244348\"></p>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p><strong>在目标进程中执行remote thread</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pThreadProc<span class=\"token punctuation\">,</span> pRemoteBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\nhProcess是notepad.exe的进程句柄\npThreadProc是notepad.exe中的LoadLibraryW()的地址\npRemoteBuf是恶意.dll的字符串地址\n*/</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li><p>因为这里需要让他执行LoadLibraryW()函数，但是并没有直接的API</p>\n</li>\n<li><p>这里用CreateRemoteThread，<strong>在DLL注入经常会用到</strong>，用于在目标进程中执行它创建出来的线程</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231212174231720.png\" alt=\"image-20231212174231720\"></p>\n</li>\n<li><p>除第一个参数hProcess外，其他参数与CreateThread（）函数完全一样。</p>\n<ul>\n<li>hProcess参数是要执行线程的目标进程(或称“远程进程”“宿主进程”)的句柄。</li>\n<li>lpStartAddress与lpParameter参数分别给出线程函数地址与线程参数地址。</li>\n<li>需要注意的是，这2个地址都应该在目标进程虚拟内存空间中(这样目标进程才能认识它们)。</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：这里用CreateRemoteThread()的原因</strong></p>\n<ul>\n<li><p>观察ThreadProc()于LoadLibrary() API</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231212174610340.png\" alt=\"image-20231212174610340\"></p>\n</li>\n<li><p>都有一个4字节的参数，并返回一个4字节的值。</p>\n</li>\n<li><p>相当于执行执行创建线程的函数，相当于驱使目标进程调用LoadLibrary函数，从而加载指定的dll文件</p>\n</li>\n</ul>\n<p>&#x3D;&#x3D;问题：这里为什么不能像HookMain一样呢？&#x3D;&#x3D;</p>\n<ul>\n<li>就是用typedef定义一个函数</li>\n</ul>\n<h3 id=\"23-4-3-调试方法\"><a href=\"#23-4-3-调试方法\" class=\"headerlink\" title=\"23.4.3 调试方法\"></a>23.4.3 调试方法</h3><ul>\n<li>因为我的一直卡死，且我没法生成32位的.exe,这里就不尝试了</li>\n</ul>\n<p><strong>Q：具体步骤</strong></p>\n<ul>\n<li>使用attach附加运行中的进程notepad.exe</li>\n<li>在Option对话框中的Events中选择Pause on new moudule(DLL)，这样每当有新的DLL被加载到notepad.exe，都会在该DLL的EP处暂停</li>\n<li>但是在运行时，发现调试器暂停的地方不是在myhack.dll的EP，而是在MSASN1.dll的EP。<ul>\n<li>加载myhack.dll前，需要先加载它导人的所有DLL文件，MSASN1.dll文件即在该过程中被加载。</li>\n<li>OllyDbg2的Pause on new module(DLL)被选中时，每当加载新的dl文件，都暂停在相应DLL文的EP处。不断按(F9)运行键，直到在mvhack.dll的EP处暂停。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"23-5-AppInit-DLLs\"><a href=\"#23-5-AppInit-DLLs\" class=\"headerlink\" title=\"23.5 AppInit_DLLs\"></a>23.5 AppInit_DLLs</h2><p><strong>Q：进行DLL注入的第二种方式</strong></p>\n<ul>\n<li>用注册表</li>\n<li>Windows操作系统的注册表中默认提供了AppInit_DLLs与LoadAppInit_DLLs两个注册表项</li>\n</ul>\n<p><strong>Q：具体操作</strong></p>\n<ul>\n<li>在注册表编辑器中，将要注入的DLL的路径字符串写人AppInit_DLLs项目,然后把LoadAppInit_DLLs的项目值设置为1。</li>\n<li>重启后，指定DLL会注人所有运行进程。该方法操作非常简单，但功能相当强大</li>\n</ul>\n<p><strong>Q：上述方法的工作原理</strong></p>\n<ul>\n<li><p>User32.dll 被加载到进程时，会读取 AppInit_DLLs 注册表项，若有值，则调用 LoadLibrary() API加载用户DLL。</p>\n</li>\n<li><p>所以，严格地说，相应 DLL并不会被加载到所有进程，<strong>而只是加载至加载user32.dll 的进程</strong>。</p>\n</li>\n<li><p>WindowsXP会忽略 LoadAppInit DLLs 注册表项。</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231213091649506.png\" alt=\"image-20231213091649506\"></p>\n</li>\n</ul>\n<h3 id=\"23-5-1-分析源代码\"><a href=\"#23-5-1-分析源代码\" class=\"headerlink\" title=\"23.5.1 分析源代码\"></a>23.5.1 分析源代码</h3><h4 id=\"myhack2-cpp\"><a href=\"#myhack2-cpp\" class=\"headerlink\" title=\"myhack2.cpp\"></a>myhack2.cpp</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// myhack2.cpp -> myhack2.dll</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tchar.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_CMD</span>  <span class=\"token expression\">L</span><span class=\"token string\">\"c:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\"</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_ADDR</span> <span class=\"token expression\">L</span><span class=\"token string\">\"http://www.naver.com\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_DST_PROC</span> <span class=\"token expression\">L</span><span class=\"token string\">\"notepad.exe\"</span></span>\n\nBOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    TCHAR szCmd<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    TCHAR szPath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    TCHAR <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    STARTUPINFO si <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    PROCESS_INFORMATION pi <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    si<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STARTUPINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    si<span class=\"token punctuation\">.</span>dwFlags <span class=\"token operator\">=</span> STARTF_USESHOWWINDOW<span class=\"token punctuation\">;</span>\n    si<span class=\"token punctuation\">.</span>wShowWindow <span class=\"token operator\">=</span> SW_HIDE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>fdwReason<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> MAX_PATH <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">_tcsrchr</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// _tcsicmp是一个宏，比较p+1是否等于notepad.exe</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DEF_DST_PROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token comment\">// 写到 szcmd 中</span>\n        \t<span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>szCmd<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"%s %s\"</span><span class=\"token punctuation\">,</span> DEF_CMD<span class=\"token punctuation\">,</span> DEF_ADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 执行 szcmd 指令</span>\n        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>szCmd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> NORMAL_PRIORITY_CLASS<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n            \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            \t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n   \n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>如果当前加载自己的进程是notepad.exe，则运行iexplore.exe，并连接指定的<code>http://www.naver.com</code>网站</li>\n</ul>\n<h3 id=\"23-5-2-练习myhack2-dll\"><a href=\"#23-5-2-练习myhack2-dll\" class=\"headerlink\" title=\"23.5.2 练习myhack2.dll\"></a>23.5.2 练习myhack2.dll</h3><p><strong>Q：步骤</strong></p>\n<ul>\n<li><p>运行注册表编辑器regedit.exe，进入如下路径：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>修改AppInit_DLLS的值为myhack.dll所在位置，修改LoadAppInit_DLLs注册表项的值为1</p>\n</li>\n</ul>\n<p><strong>Q：重启系统</strong></p>\n<ul>\n<li><p>myhack2.dll成功注入所有加载user32.dll的进程</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231213094019094.png\" alt=\"image-20231213094019094\"></p>\n</li>\n<li><p>但是因为上面的代码里只是notepad.exe，所以在notepad.exe中可以看到IE被以隐藏模式执行</p>\n</li>\n</ul>\n<h2 id=\"23-6-SetWindowsHookEx\"><a href=\"#23-6-SetWindowsHookEx\" class=\"headerlink\" title=\"23.6  SetWindowsHookEx()\"></a>23.6  SetWindowsHookEx()</h2><ul>\n<li>利用消息钩取也可以实现DLL注入</li>\n<li>利用SetWindowsHookEx()安装好消息钩子之后，由OS将指定DLL强制注入相应进程</li>\n</ul>\n<p><strong>Q：我的理解</strong></p>\n<ul>\n<li>也就是只要发生钩子过程，就会发生DLL注入，os就会强制把相应DLL注入所有进程。</li>\n</ul>\n<p><strong>Q：举个例子</strong></p>\n<ul>\n<li><p>一旦有一个.exe程序执行了SetWindowsHookEx()，安装消息钩子</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">g_hHook <span class=\"token operator\">=</span> <span class=\"token function\">SetWindowsHookEx</span><span class=\"token punctuation\">(</span>WH_KEYBOARD<span class=\"token punctuation\">,</span> KeyboardProc<span class=\"token punctuation\">,</span> g_hInstance<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//KeyHook.dll</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>那么观察到hook type是WH_KEYBOARD，那么就会把KeyHook.dll注入所有的发生键盘输入事件的进程，之后调用KeyboardProc函数。</p>\n</li>\n<li><p>综上调用SetWindowsHookEx()就会发生DLL注入。</p>\n</li>\n</ul>\n<h2 id=\"23-7-小结\"><a href=\"#23-7-小结\" class=\"headerlink\" title=\"23.7 小结\"></a>23.7 小结</h2><p><strong>Q：前面的讲解中提到“CreateRemoteThread()实际调用的是LoadLibrary()”，实际生成的不是线程吗?</strong></p>\n<ul>\n<li>是的，会在目标进程中创建线程。与普通意义上的创建线程相比，调用LoadLibrary(）据了很大比重</li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Q：关于CTF的一些思考</strong></p>\n<ul>\n<li>利用CreateRemoteThread()可以执行线程，线程里面可以放函数地址和参数地址，这相当于可以利用CreateRemoteThread()进行远程代码执行。</li>\n</ul>\n<h1 id=\"0x24-DLL卸载\"><a href=\"#0x24-DLL卸载\" class=\"headerlink\" title=\"0x24 DLL卸载\"></a>0x24 DLL卸载</h1><ul>\n<li>DLL卸载(Ejection)是将强制插入的DLL弹出的一种技术，工作原理和<code>CreateRemoteThread</code>API进行DLL注入的原理类似</li>\n</ul>\n<h2 id=\"24-1-DLL卸载的工作原理\"><a href=\"#24-1-DLL卸载的工作原理\" class=\"headerlink\" title=\"24.1 DLL卸载的工作原理\"></a>24.1 DLL卸载的工作原理</h2><p><strong>Q：DLL注入 vs  DLL卸载</strong></p>\n<ul>\n<li>之前使用<code>CreateRemoteThread</code>API进行DLL注入，主要是驱使目标进程调用LoadLibrary()加载指定的DLL文件</li>\n<li>DLL卸载：驱使目标进程调用FreeLibrary() API<ul>\n<li>也就是将FreeLibrary()API的地址传递给CreateRemoteThread()的IpStartAddress参数，并把要卸载的DLL的句柄传递给lpParameter参数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"24-2-实现DLL卸载\"><a href=\"#24-2-实现DLL卸载\" class=\"headerlink\" title=\"24.2 实现DLL卸载\"></a>24.2 实现DLL卸载</h2><p><strong>Q：分析EjectDll.exe程序，它用来从目标进程(notepad.exe)卸载指定的DLL文件(myhack.dll，已注入目标进程)</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// EjectDll.cpp -> EjectDll.exe</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tlhelp32.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tchar.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_PROC_NAME</span>\t<span class=\"token expression\"><span class=\"token punctuation\">(</span>L</span><span class=\"token string\">\"notepad.exe\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_DLL_NAME</span>\t<span class=\"token expression\"><span class=\"token punctuation\">(</span>L</span><span class=\"token string\">\"myhack.dll\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\nDWORD <span class=\"token function\">FindProcessID</span><span class=\"token punctuation\">(</span>LPCTSTR szProcessName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DWORD dwPID <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span>\n    HANDLE hSnapShot <span class=\"token operator\">=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">;</span>\n    PROCESSENTRY32 pe<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the snapshot of the system</span>\n    <span class=\"token comment\">// CreateToolhelp32Snapshot可以获取指定进程以及其使用的堆、模块和线程的快照</span>\n    pe<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hSnapShot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPALL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// find process</span>\n    <span class=\"token comment\">// 查找进程</span>\n    <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span>szProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>pe<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            dwPID <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapShot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> dwPID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nBOOL <span class=\"token function\">EjectDll</span><span class=\"token punctuation\">(</span>DWORD dwPID<span class=\"token punctuation\">,</span> LPCTSTR szDllName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BOOL bMore <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">,</span> bFound <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n    HANDLE hSnapshot<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">,</span> hThread<span class=\"token punctuation\">;</span>\n    HMODULE hModule <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    MODULEENTRY32 me <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    LPTHREAD_START_ROUTINE pThreadProc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// dwPID = notepad 进程的 ID</span>\n    <span class=\"token comment\">// 使用 TH32CS_SNAPMODULE 参数，获取加载到 notepad 进程的 DLL 名称</span>\n    hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPMODULE<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 遍历比较 dll 名称与 myhack.dll</span>\n    bMore <span class=\"token operator\">=</span> <span class=\"token function\">Module32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> bMore<span class=\"token punctuation\">;</span> bMore <span class=\"token operator\">=</span> <span class=\"token function\">Module32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>me<span class=\"token punctuation\">.</span>szModule<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>me<span class=\"token punctuation\">.</span>szExePath<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            bFound <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bFound<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获得目标进程的句柄</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"OpenProcess(%d) failed!!! [%d]\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获得 FreeLibrary 的地址</span>\n    hModule <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pThreadProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FreeLibrary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在目标进程中运行 FreeLibrary</span>\n    <span class=\"token comment\">// me.modBaseAddr 指的是 myhack.dll 的基址</span>\n    hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pThreadProc<span class=\"token punctuation\">,</span> me<span class=\"token punctuation\">.</span>modBaseAddr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">_tmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> TCHAR<span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DWORD dwPID <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// find process</span>\n    dwPID <span class=\"token operator\">=</span> <span class=\"token function\">FindProcessID</span><span class=\"token punctuation\">(</span>DEF_PROC_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> dwPID <span class=\"token operator\">==</span> <span class=\"token number\">0xFFFFFFFF</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"There is no &lt;%s> process!\\n\"</span><span class=\"token punctuation\">,</span> DEF_PROC_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"PID of \\\"%s\\\" is %d\\n\"</span><span class=\"token punctuation\">,</span> DEF_PROC_NAME<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// change privilege，同上</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// eject dll，卸载dll</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EjectDll</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">,</span> DEF_DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"EjectDll(%d, \\\"%s\\\") success!!!\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">,</span> DEF_DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">_tprintf</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"EjectDll(%d, \\\"%s\\\") failed!!!\\n\"</span><span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">,</span> DEF_DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"24-2-1-获取进程中加载的DLL信息\"><a href=\"#24-2-1-获取进程中加载的DLL信息\" class=\"headerlink\" title=\"24.2.1 获取进程中加载的DLL信息\"></a>24.2.1 获取进程中加载的DLL信息</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPMODULE<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用CreateToolhelp32Snapshot（） API可以获取加载到进程的模块(DLL)信息。</li>\n<li>将获取的hSnapshot句柄传递给Module32First()&#x2F;Module32Next()函数后，即可设置与MODULEENTRY32结构体相关的模块信息。<ul>\n<li>代码24-2是MODULEENTRY32结构体的定义。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231213103352807.png\" alt=\"image-20231213103352807\"></p>\n<ul>\n<li><p>szModule成员表示DLL的名称，modBaseAddr成员表示相应DLL被加载的地址(进程虚拟内存)。</p>\n</li>\n<li><p>在EjectDII()函数的for循环中比较szModule与希望卸载的DLL文件名称，能够准确查找到相应模块的信息。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">MODULEENTRY32 me <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nbMore <span class=\"token operator\">=</span> <span class=\"token function\">Module32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> bMore<span class=\"token punctuation\">;</span> bMore <span class=\"token operator\">=</span> <span class=\"token function\">Module32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>me<span class=\"token punctuation\">.</span>szModule<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">_tcsicmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>me<span class=\"token punctuation\">.</span>szExePath<span class=\"token punctuation\">,</span> szDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        bFound <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"24-2-2-获取目标进程的句柄\"><a href=\"#24-2-2-获取目标进程的句柄\" class=\"headerlink\" title=\"24.2.2 获取目标进程的句柄\"></a>24.2.2 获取目标进程的句柄</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用进程ID来获取目标进程的句柄</li>\n</ul>\n<h3 id=\"24-2-3-获取FreeLibrary-API地址\"><a href=\"#24-2-3-获取FreeLibrary-API地址\" class=\"headerlink\" title=\"24.2.3 获取FreeLibrary() API地址\"></a>24.2.3 获取FreeLibrary() API地址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">hModule &#x3D; GetModuleHandle(L&quot;kernel32.dll&quot;);\npThreadProc &#x3D; (LPTHREAD_START_ROUTINE)GetProcAddress(hModule, &quot;FreeLibrary&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里获取的是加载到EjectDll.exe的Kernel32.dll的FreeLibrary的地址，而不是获取的notepad.exe的Kernel32.dll地址，前面说过了，DLL不会重定位，加载到固定位置</li>\n</ul>\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Q：使用FreeLibrary()卸载DLL的方法好像仅适用于使用CreateRemoteThread()注入的DLL文件，有没有什么方法可以将加载的普通DLL文件卸载下来呢?</strong></p>\n<ul>\n<li>使用FreeLibrary()的方法仅适用于卸载自己强制注入的DLL文件。</li>\n<li>PE文件直接接导入的DLL文件是无法在进程运行过程中卸载的。</li>\n</ul>\n<p><strong>Q：前置知识</strong></p>\n<ul>\n<li>IMAGE_IMPORT_DESCRIPTOR中记录了PE文件要导入哪些文件</li>\n</ul>\n<h1 id=\"0x25-通过修改PE加载DLL\"><a href=\"#0x25-通过修改PE加载DLL\" class=\"headerlink\" title=\"0x25 通过修改PE加载DLL\"></a>0x25 通过修改PE加载DLL</h1><p><strong>Q：除了前面的DLL动态注入，还有什么方法可以让用户加载指定的DLL文件？</strong></p>\n<ul>\n<li>利用<strong>手工修改可执行文件</strong><ul>\n<li>通过“直接修改目标程序的可执行文件”，使其运行时强制加载指定的DLL文件。</li>\n</ul>\n</li>\n<li>这种方法只要应用过一次后(不需要另外的注人操作)，每当进程开始运行时就会自动加载指定的DLL、</li>\n</ul>\n<h2 id=\"25-1-练习文件\"><a href=\"#25-1-练习文件\" class=\"headerlink\" title=\"25.1 练习文件\"></a>25.1 练习文件</h2><p><strong>Q：目标</strong></p>\n<ul>\n<li>直接修改TextView.edxe，让它在运行时自动加载myhack3.dll</li>\n</ul>\n<h3 id=\"25-1-1-TextView-exe\"><a href=\"#25-1-1-TextView-exe\" class=\"headerlink\" title=\"25.1.1 TextView.exe\"></a>25.1.1 TextView.exe</h3><ul>\n<li><p>用peview打开，查看IMPORT DIRECTORY TABLE（也就是IMAGE_IMPORT_DESCRIPTOR结构体）</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220152132056.png\" alt=\"image-20231220152132056\"></p>\n</li>\n</ul>\n<h3 id=\"25-1-2-TextView-patched-exe\"><a href=\"#25-1-2-TextView-patched-exe\" class=\"headerlink\" title=\"25.1.2 TextView_patched.exe\"></a>25.1.2 TextView_patched.exe</h3><p><img src=\"/../re-engineer-core-principle-03/image-20231220152301886.png\" alt=\"image-20231220152301886\"></p>\n<ul>\n<li><p>TextView_patched的IDT比上面多了一个myhack3.dll</p>\n</li>\n<li><p>运行这个程序，发现会自动下载index.html文件，因为会自动加载myhack3.dll，打开后是google网站</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220152634501.png\" alt=\"image-20231220152634501\"></p>\n</li>\n</ul>\n<h3 id=\"25-2-源代码myhack3-cpp\"><a href=\"#25-2-源代码myhack3-cpp\" class=\"headerlink\" title=\"25.2 源代码myhack3.cpp\"></a>25.2 源代码myhack3.cpp</h3><h3 id=\"25-2-1-DllMain\"><a href=\"#25-2-1-DllMain\" class=\"headerlink\" title=\"25.2.1 DllMain()\"></a>25.2.1 DllMain()</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// myhack3.cpp -> myhack3.dll</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"shlobj.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Wininet.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tchar.h\"</span></span>\n<span class=\"token comment\">//是一个预处理指令，用于告诉编译器在链接阶段将Wininet.lib 库文件包含到可执行文件中。</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"Wininet.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_BUF_SIZE</span>            <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_URL</span>                 <span class=\"token expression\">L</span><span class=\"token string\">\"http://www.google.com/index.html\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_INDEX_FILE</span>          <span class=\"token expression\">L</span><span class=\"token string\">\"index.html\"</span></span>\n\nDWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID lParam<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    TCHAR szPath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    TCHAR <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// debugview 可以调试</span>\n    <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"ThreadProc() start...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">_tcsrchr</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">,</span> L<span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// szPath = 当前路径 + index.html</span>\n        <span class=\"token function\">_tcscpy_s</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">wcslen</span><span class=\"token punctuation\">(</span>DEF_INDEX_FILE<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DEF_INDEX_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"DownloadURL()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下载 google 首页到 szPath</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">DownloadURL</span><span class=\"token punctuation\">(</span>DEF_URL<span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"DropFlie()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">DropFile</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"ThreadProc() end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBOOL WINAPI <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HINSTANCE hinstDLL<span class=\"token punctuation\">,</span> DWORD fdwReason<span class=\"token punctuation\">,</span> LPVOID lpvReserved<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>fdwReason<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span> \n            <span class=\"token comment\">// DLL运行时自动调用 ThreadProc</span>\n            <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>创建线程运行指定的函数，下载指定的网页</li>\n</ul>\n<h3 id=\"25-2-2-DownloadURL\"><a href=\"#25-2-2-DownloadURL\" class=\"headerlink\" title=\"25.2.2 DownloadURL()\"></a>25.2.2 DownloadURL()</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token comment\">// 下载url文件</span>\nBOOL <span class=\"token function\">DownloadURL</span><span class=\"token punctuation\">(</span>LPCTSTR szURL<span class=\"token punctuation\">,</span> LPCTSTR szFile<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    BOOL            bRet <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n    HINTERNET\t    hInternet <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> hURL <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    BYTE            pBuf<span class=\"token punctuation\">[</span>DEF_BUF_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    DWORD           dwBytesRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    FILE            <span class=\"token operator\">*</span>pFile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">errno_t</span>         err <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化数据结构</span>\n    hInternet <span class=\"token operator\">=</span> <span class=\"token function\">InternetOpen</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"ReverseCore\"</span><span class=\"token punctuation\">,</span> INTERNET_OPEN_TYPE_PRECONFIG<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> hInternet<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"InternetOpen() failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 访问网址</span>\n    hURL <span class=\"token operator\">=</span> <span class=\"token function\">InternetOpenUrl</span><span class=\"token punctuation\">(</span>hInternet<span class=\"token punctuation\">,</span> szURL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> INTERNET_FLAG_RELOAD<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> hURL<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"InternetOpenUrl() failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> _DownloadURL_EXIT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 打开index.html文件</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=</span> <span class=\"token function\">_tfopen_s</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pFile<span class=\"token punctuation\">,</span> szFile<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"wt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"fopen() failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> _DownloadURL_EXIT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 写入index.html文件</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">InternetReadFile</span><span class=\"token punctuation\">(</span>hURL<span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> DEF_BUF_SIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwBytesRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dwBytesRead<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>pBuf<span class=\"token punctuation\">,</span> dwBytesRead<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    bRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>\n_DownloadURL_EXIT<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pFile<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hURL<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">InternetCloseHandle</span><span class=\"token punctuation\">(</span>hURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hInternet<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">InternetCloseHandle</span><span class=\"token punctuation\">(</span>hInternet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>上面使用的API都是在<code>urlmon.dll</code>中</li>\n</ul>\n<h3 id=\"25-2-3-DropFile\"><a href=\"#25-2-3-DropFile\" class=\"headerlink\" title=\"25.2.3 DropFile()\"></a>25.2.3 DropFile()</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\nBOOL CALLBACK <span class=\"token function\">EnumWindowsProc</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DWORD dwPID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">GetWindowThreadProcessId</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dwPID <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        g_hWnd <span class=\"token operator\">=</span> hWnd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nHWND <span class=\"token function\">GetWindowHandleFromPID</span><span class=\"token punctuation\">(</span>DWORD dwPID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 枚举窗口</span>\n    <span class=\"token function\">EnumWindows</span><span class=\"token punctuation\">(</span>EnumWindowsProc<span class=\"token punctuation\">,</span> dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> g_hWnd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 将下载的index.html文件拖放到被注入进程（TextView_Patch.exe）中并显示内容</span>\nBOOL <span class=\"token function\">DropFile</span><span class=\"token punctuation\">(</span>LPCTSTR wcsFile<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HWND            hWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    DWORD           dwBufSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    BYTE            <span class=\"token operator\">*</span>pBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n    DROPFILES\t   <span class=\"token operator\">*</span>pDrop <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span>            szFile<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    HANDLE          hMem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// szFile存index.html中的内容</span>\n    <span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wcsFile<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> szFile<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    dwBufSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DROPFILES<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hMem <span class=\"token operator\">=</span> <span class=\"token function\">GlobalAlloc</span><span class=\"token punctuation\">(</span>GMEM_ZEROINIT<span class=\"token punctuation\">,</span> dwBufSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"GlobalAlloc() failed!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 将szFile中的内容放到pBuf中</span>\n    pBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">GlobalLock</span><span class=\"token punctuation\">(</span>hMem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pDrop <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DROPFILES<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pBuf<span class=\"token punctuation\">;</span> \n    pDrop<span class=\"token operator\">-></span>pFiles <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DROPFILES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pBuf <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DROPFILES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szFile<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> szFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">GlobalUnlock</span><span class=\"token punctuation\">(</span>hMem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 获得当前进程（TextView_Patch.exe）的pid</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hWnd <span class=\"token operator\">=</span> <span class=\"token function\">GetWindowHandleFromPID</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcessId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"GetWndHandleFromPID() failed!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 将pBuf发送给TextView_Patch.exe</span>\n    <span class=\"token function\">PostMessage</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> WM_DROPFILES<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WPARAM<span class=\"token punctuation\">)</span>pBuf<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>DropFile()函数将下载的index.html文件拖放到TextView_Patch.exe进程并显示其内容。</li>\n<li>为此，需要先获取TextView_Patchexe进程的主窗口句柄，再传送WM_DROPFILES消息。</li>\n<li>总之，DropFile()函数的主要功能是，使用PID获取窗口句柄，再调用postMessage(WM_DROPFILES)API将消息放入消息队列(</li>\n</ul>\n<h3 id=\"25-2-4-dummy\"><a href=\"#25-2-4-dummy\" class=\"headerlink\" title=\"25.2.4 dummy()\"></a>25.2.4 dummy()</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">// 出现在 IDT 中的 dummy export function...</span>\n<span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dummy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>可以看到是myhack3.dll向外部提供服务的导出函数，保证形式上的完整性</li>\n<li>上面从25.2.1到25.2.4是在一个myhack3.dll的文件中的</li>\n</ul>\n<p>**Q：DLL中存着很多函数，可以理解为API **</p>\n<ul>\n<li><strong>在PE文件中导人某个DLL，实质就是在文件代码内调用该DLL提供的导出函数。</strong></li>\n<li>PE文件头中记录着DLL名称、函数名称等信息。</li>\n</ul>\n<p>因此，myhack3.dll至少要向外提供1个以上的导出函数才能保持形式上的完整性。</p>\n<h2 id=\"25-3-修改TextView-exe文件的准备工作\"><a href=\"#25-3-修改TextView-exe文件的准备工作\" class=\"headerlink\" title=\"25.3 修改TextView.exe文件的准备工作\"></a>25.3 修改TextView.exe文件的准备工作</h2><p><strong>Q：前置知识</strong></p>\n<ul>\n<li>PE文件中导人的DLL信息以结构体列表形式存储在IDT中。</li>\n<li>只要将myhack3.dll添加到列表尾部就可以了。</li>\n<li>当然，此前要确认一下IDT中有无足够空间。</li>\n</ul>\n<p><strong>Q：查看IDT中是否有足够空间</strong></p>\n<ol>\n<li><p>查看IDT的地址</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220204058556.png\" alt=\"image-20231220204058556\"></p>\n</li>\n<li><p>查看84CC地址，在.rdata节区，下一个节区的起始地址为8530，所以整个IDT是从84CC~842F，共0x64个字节</p>\n<ul>\n<li>&#x3D;&#x3D;正常情况下每个IID结构体的大小是14字节&#x3D;&#x3D;</li>\n<li>IDT是由IMAGE_IMPORT_DESCRIPTOR结构体构成的数组，数组结尾是null</li>\n<li>从下图可以看出一共有5个结构体（<strong>因为16进制的乘法14 x 5 &#x3D; 60</strong>），最后一个是null</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220204224762.png\" alt=\"image-20231220204224762\"></p>\n</li>\n<li><p>使用HexEditor查看该空间，可以看出IDT尾部7719处仍有其他数据，所以无法添加myhack3.dll结构体。</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220204913796.png\" alt=\"image-20231220204913796\"></p>\n</li>\n</ol>\n<p><strong>Q：移动IDT</strong></p>\n<ul>\n<li>在上面这种空间不足的情况下，要把整个IDT移动到更广阔的位置，然后添加新的IDT</li>\n</ul>\n<p><strong>Q：可使用的方法</strong></p>\n<ol>\n<li><p>查找文件中的空白区域</p>\n</li>\n<li><p>增加文件最后一个节区的大小</p>\n</li>\n<li><p>在文件末尾添加新节区。</p>\n</li>\n</ol>\n<p><strong>Q：对于第一种方法</strong></p>\n<ol>\n<li>查找空白区域</li>\n</ol>\n<ul>\n<li><p>.rdata节区的尾部存在着空白区域</p>\n</li>\n<li><p><strong>一般来说节区或文件末尾存在空白区域，成为Null-Padding区域</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220205643114.png\" alt=\"image-20231220205643114\"></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>移动IDT到Null-padding区域</li>\n</ol>\n<ul>\n<li><p>首先要确认该区域是不是空白可用区域，并不是文件中的所有区域都会被无条件加载到进程的虚拟内存，<strong>只有节区头中记录的才会被加载</strong></p>\n<ul>\n<li>节区头中记录的就相当于真正属于这个节区的，因为需要满足Section Alignment的整数倍</li>\n</ul>\n</li>\n<li><p>查看节区头</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220210711710.png\" alt=\"image-20231220210711710\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220212716133.png\" alt=\"image-20231220212716133\"></p>\n<ul>\n<li><p>也就是只有红圈部分才会被映射到内存中，所以<strong>在7E56到8000区域是程序未使用的区域</strong>，大小为1AA是可以创建IDT的</p>\n<ul>\n<li><p>其实直接看PEview是能看出来的，7E56后面没数据了</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220212823650.png\" alt=\"image-20231220212823650\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>PE 文件尾部有些部分填充着 NULL，但这并不意味着这些部分一定就是Null-Padding区域(空白可用区域)。</p>\n<p><strong>这些区域也有可能是程序使用的区域</strong>，且并非所有Null-Padding 区域都会加载到内存。</p>\n<p>只有分析节区头信息后才能判断。如果示例中那么就要增加最后节区的尺寸TextView.exe的Nul-Padding区域很小，无法容纳IDT或添加新节区，以保证有足够空间存放 IDT。</p>\n\n</div>\n<h2 id=\"25-4-修改TextView-exe\"><a href=\"#25-4-修改TextView-exe\" class=\"headerlink\" title=\"25.4 修改TextView.exe\"></a>25.4 修改TextView.exe</h2><p><strong>Q：步骤</strong></p>\n<ul>\n<li>把TextView.exe复制到工作文件夹，重命名为TextView_Patch.exe。</li>\n<li>用PEView打开TextView,exe源文件，查看各种PE信息，使用HxD打开TextView_Patch.exe文件进行修改</li>\n</ul>\n<h3 id=\"25-4-1-修改导入表的RVA值\"><a href=\"#25-4-1-修改导入表的RVA值\" class=\"headerlink\" title=\"25.4.1 修改导入表的RVA值\"></a>25.4.1 修改导入表的RVA值</h3><p><img src=\"/../re-engineer-core-principle-03/image-20231220214642155.png\" alt=\"image-20231220214642155\"></p>\n<ul>\n<li><p>原来是84CC，改成新的导入地址8C80，在Size的基础上加14字节，因为要新增加一个DLL，一个IMAGE_IMPORT_DESCRIPTOR结构体的大小是14bytes</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220214937309.png\" alt=\"image-20231220214937309\"></p>\n</li>\n</ul>\n<h3 id=\"25-4-2-删除绑定导入表\"><a href=\"#25-4-2-删除绑定导入表\" class=\"headerlink\" title=\"25.4.2 删除绑定导入表\"></a>25.4.2 删除绑定导入表</h3><p><strong>Q：BOUND IMPORT TABLE 绑定导入表是一种提高DLL加载速度的技术</strong></p>\n<ul>\n<li>若想正常导人myhack3.dll，需要向绑定导人表添加信息。</li>\n<li>但幸运的是，<strong>该绑定导人表是个可选项，不是必须存在的</strong>，所以可删除(修改其值为0即可)以获取更大便利。</li>\n<li>当然，绑定导入表完全不存在也没关系，但若存在，且其内信息记录错误，则会在程序运行时引发错误。</li>\n<li>本示例TextView.exe文件中，绑定导人表各项的值均为0，不需要再修改。修改其他文件时，一定要注意检查绑定导人表中的数据</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220215210897.png\" alt=\"image-20231220215210897\"></p>\n<h3 id=\"25-4-3-创建新IDT\"><a href=\"#25-4-3-创建新IDT\" class=\"headerlink\" title=\"25.4.3 创建新IDT\"></a>25.4.3 创建新IDT</h3><ul>\n<li>先完全复制原IDT(RAW：76CC 到772F），复制到新IDT RAW: 7E80  RVA：8C80</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220221116608.png\" alt=\"image-20231220221116608\"></p>\n<ul>\n<li><p>在新的IDT尾部(RAW：7ED0）添加myhack3.dll的IId</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220221220113.png\" alt=\"image-20231220221220113\"></p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220221208931.png\" alt=\"image-20231220221208931\"></p>\n<h3 id=\"25-4-4-设置Name、INT、IAT\"><a href=\"#25-4-4-设置Name、INT、IAT\" class=\"headerlink\" title=\"25.4.4 设置Name、INT、IAT\"></a>25.4.4 设置Name、INT、IAT</h3><ul>\n<li><p>前面添加的IID结构体成员拥有指向其他数据结构(INT、Name、IAT)的RVA值。</p>\n</li>\n<li><p>因此，必须准确设置这些数据结构才能保证TextView Patchexe文件正常运行。</p>\n</li>\n<li><p>前面填的值记录如下：</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220221445991.png\" alt=\"image-20231220221445991\"></p>\n</li>\n<li><p>这个8D00、8D10、8D20是为了方便选择的空白区域，在新创建的反正是要往里面添加数据，所以选择其他位置也可以</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221092719349.png\" alt=\"image-20231221092719349\"></p>\n</li>\n<li><p>在PEVIEW中对照查看</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220221942683.png\" alt=\"image-20231220221942683\"></p>\n</li>\n</ul>\n<p><strong>Q：上面各值的含义</strong></p>\n<ul>\n<li>8D00处存储着IMPORT NAME TABLE，是RVA数组，数组的每个元素<strong>由导人函数的Ordixnal(2个字节)+Func Name String结构体构成，末尾为null</strong><ul>\n<li>存储着值为8D30，是导入的函数的Ordinal，名称是dummy</li>\n</ul>\n</li>\n<li>Name就是库的名称</li>\n<li>IAT也是RVA数组，各元素既可以拥有与INT相同的值，也可以拥有其他不同值<ul>\n<li>(若INT中的数据准确，IAT也可拥有其他不同值。反正实际运行时，PE装载器会将虑拟内存中的IAT替换实际函数的地址。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"25-4-5-修改IAT节区的属性值\"><a href=\"#25-4-5-修改IAT节区的属性值\" class=\"headerlink\" title=\"25.4.5 修改IAT节区的属性值\"></a>25.4.5 修改IAT节区的属性值</h3><ul>\n<li><p>加载PE文件到内存时，PE装载器会修改IAT，写人函数的实际地址，所以<strong>相关节区一定要拥有WRITE(可写)属性</strong>。</p>\n</li>\n<li><p>只有这样，PE装载器才能正常进行写人操作。使用PEView看rdata节区头中的Characteristics属性</p>\n<ul>\n<li>这个4000 0040，是通过0000 0040  4000 0000  进行或运算得到的</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220223403417.png\" alt=\"image-20231220223403417\"></p>\n<ul>\n<li><p>参照之间的笔记</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220223037326.png\" alt=\"image-20231220223037326\"></p>\n</li>\n</ul>\n</li>\n<li><p>向原属性值(Characteristics)40000040，添加IMAGE_SCN_MEM_WRITE值(8000 0000)，执行bit OR运算，最终属性值变为C0000040</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220224209084.png\" alt=\"image-20231220224209084\"></p>\n</li>\n</ul>\n<p><strong>Q：问题来了</strong></p>\n<ul>\n<li><p>上面修改.rdata的原因是，因为PE装载器在装载过程中会修改IAT为实际的函数地址，所以需要把.rdata区域的权限修改为可写</p>\n</li>\n<li><p><strong>但是正常人家是咋执行的呢，你不改，没写权限，如何执行正常的PE装载过程呢</strong></p>\n<ul>\n<li><p>因为在IMAGE_OPTIONAL_HEADER的data directory数组里面存在IAT，相当于告诉我们IAT的地址是从6000到6154</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231220225222289.png\" alt=\"image-20231220225222289\"></p>\n</li>\n<li><p>查看Textview.exe的IAT(IMPORT ADDRESS TABLE)，发现IAT从6000到614C都在optional header规定的范围内，记录了函数的地址</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221085058994.png\" alt=\"image-20231221085058994\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221085008830.png\" alt=\"image-20231221085008830\"></p>\n</li>\n<li><p>所以即使该节区没有可写属性也没关系，因为IAT已经构造完了，不再需要PE装载器写了。</p>\n</li>\n</ul>\n</li>\n<li><p>所以也可以不给.rdata节区添加可写属性，可以在已经存在的IAT区域后为dummy()添加IAT，相当于不需要PE装载器装载了，自己手动添加的，然后把IAT(size)增加8字节。</p>\n<ul>\n<li>IAT是4字节数组</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"25-5-检测验证\"><a href=\"#25-5-检测验证\" class=\"headerlink\" title=\"25.5 检测验证\"></a>25.5 检测验证</h2><ul>\n<li><p>打开修改后的TextView_Patch.exe，查看IDT，发现多了一个myhack3.dll。并且dummy()被加入到了IAT中</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221090225945.png\" alt=\"image-20231221090225945\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221093139288.png\" alt=\"image-20231221093139288\"></p>\n</li>\n</ul>\n<p>、</p>\n<p><strong>Q：对比改IDT和直接改IAT</strong></p>\n<ul>\n<li><p>下图是直接在IAT后添加dummy的结果，黄色区域为新添加的idt结构体，RVA：8D00（RAW：7F00）是INT的位置，RVA：8D10 (RAW：7F10)是DLL Name，7EE0处存储的是IAT的地址</p>\n<ul>\n<li><p>对比和上面的不同之处，发现7EE0处变成了<code>RVA：6154 </code>(RAW：5354)</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221095613842.png\" alt=\"image-20231221095613842\"></p>\n</li>\n<li><p>也就是在原有的IAT后面新增了dummy</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221094623247.png\" alt=\"image-20231221094623247\"></p>\n<hr>\n<ul>\n<li>pe装载器在读取idt时，读到的myhack3.dll中的IAT的地址和上面改iDT方法的地址不一样了，现在是在RAW：5354中了。</li>\n</ul>\n<p><strong>&#x3D;&#x3D;Q：但是这里为什么没有改size呢？&#x3D;&#x3D;</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221100806520.png\" alt=\"image-20231221100806520\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221100735380.png\" alt=\"image-20231221100735380\"></p>\n<h1 id=\"0x26-PE-Tools\"><a href=\"#0x26-PE-Tools\" class=\"headerlink\" title=\"0x26 PE Tools\"></a>0x26 PE Tools</h1><h2 id=\"26-1-PE-Tools\"><a href=\"#26-1-PE-Tools\" class=\"headerlink\" title=\"26.1 PE Tools\"></a>26.1 PE Tools</h2><ul>\n<li>下载PE Tools</li>\n<li>它可以获取系统中正在运行的所有进程的列表，并显示在主窗口</li>\n</ul>\n<h3 id=\"26-1-1-进程内存转储\"><a href=\"#26-1-1-进程内存转储\" class=\"headerlink\" title=\"26.1.1 进程内存转储\"></a>26.1.1 进程内存转储</h3><ul>\n<li>转储(Dump)：将内存中的内容转存到文件</li>\n<li>转储技术主要用来查看正在运行的进程内存中的内容。文件是运行时解压缩文件时，其只有在内存中才以解压缩形态存在，</li>\n<li>此时借助转储技术可以轻松查看与源文件类似的代码与数据。</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><ul>\n<li>使用 PE保护器时，文件在内存中仍处于压缩与加密状态，即便应用内存转储技术也往往无法准确把握文件内容。并且常常因为使用 Anti-Dump(反转储)技术而给转储带来很大困难</li>\n<li>在调试器中将正在运行的进程附加进来后，能够直接准确查看进程内存中的内容。而使用PETools 的转储功能只是因为它比使用调试器更加容易、方便，特别是查看运行时压缩程序时，通过转储功能可以更快速、更简单地查看内存中的字符串等。</li>\n</ul>\n</p>\n</div>\n<p><strong>Q：PE Tools为用户提供了3个转储选项</strong></p>\n<ul>\n<li>Dump Full(完整转储)：使用该选项时，PE Tools会检测进程的PE文件头，并从ImageBase地址开始转储SizeOfImage大小的区域(该区域即是PE文件被加载到内存后的映像大小)<ul>\n<li>PE Image：就是PE文件加载到内存中的形态，成为PE映像</li>\n</ul>\n</li>\n<li>Dump Patial(部分转储)：该功能用来从相应进程内存的指定地址开始转储指定大小的部分</li>\n<li>Dump Region(区域转储）：<strong>进程内存(用户区域)中所有分配区域都被标识为某种状态</strong>，区域转储功能用于转储状态(State)标识为COMMIT的内存区域。</li>\n</ul>\n<h3 id=\"26-1-2-PE编辑器\"><a href=\"#26-1-2-PE编辑器\" class=\"headerlink\" title=\"26.1.2 PE编辑器\"></a>26.1.2 PE编辑器</h3><p><img src=\"/../re-engineer-core-principle-03/image-20231221105844173.png\" alt=\"image-20231221105844173\"></p>\n<ul>\n<li>会列出PE文件头的各种信息，可以对他进行修改</li>\n</ul>\n<h1 id=\"0x27-代码注入\"><a href=\"#0x27-代码注入\" class=\"headerlink\" title=\"0x27 代码注入\"></a>0x27 代码注入</h1><h2 id=\"27-1-代码注入\"><a href=\"#27-1-代码注入\" class=\"headerlink\" title=\"27.1 代码注入\"></a>27.1 代码注入</h2><p>代码注入是一种向目标进程插入独立运行代码并使之运行的技术，它一般调用CreateRemoteThread()API以远程线程形式运行插入的代码，所以也被称为线程注入。</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221152027013.png\" alt=\"image-20231221152027013\"></p>\n<p><strong>Q：具体过程</strong></p>\n<ul>\n<li>首先向目标进程target.exe插入代码和数据</li>\n<li>代码以线程过程(Thread Procedure)形式插入，代码中使用的数据以线程参数的形式传入。</li>\n<li>也就是代码和数据是分别注入的</li>\n</ul>\n<h2 id=\"27-2-DLL注入与代码注入\"><a href=\"#27-2-DLL注入与代码注入\" class=\"headerlink\" title=\"27.2 DLL注入与代码注入\"></a>27.2 DLL注入与代码注入</h2><p><strong>Q：DLL注入</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221151122506.png\" alt=\"image-20231221151122506\"></p>\n<ul>\n<li><p>对于这段弹出Windows消息框的代码，在用DLL注入时，需要放入某个DLL文件，然后把整个DLL文件注入目标进程。</p>\n</li>\n<li><p>注入完成后，运行Ollybdg，查看Threadproc()的代码区域</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221151458751.png\" alt=\"image-20231221151458751\"></p>\n</li>\n<li><p>这两条push 10009290 push 1000929c指令，将这个函数要用的数据存到栈，</p>\n</li>\n<li><p>call指令在调用函数，100080F0是DLL的IAT区域，DLL中使用的所有数据位于DLL的数据区域，</p>\n</li>\n<li><p>整个DLL会被插入目标进程，代码和数据是共存的，所以代码能够正常运行。</p>\n</li>\n</ul>\n<p><strong>Q：代码注入</strong></p>\n<ul>\n<li>代码注入仅向目标进程注入代码，要想让代码正常运行，也需要将代码中使用的数据一同注入，通过编程将注入的数据地址明确告知代码</li>\n</ul>\n<p><strong>Q：使用代码注入的原因</strong></p>\n<ol>\n<li>占用内存少</li>\n</ol>\n<ul>\n<li><strong>如果要注入的代码与数据较少，那么就不需要将它们做成DLL的形式再注入。</strong></li>\n<li>此时直接采用代码注人的方式同样能够获得与DLL注入相同的效果，且占用的内存会更少。</li>\n</ul>\n<ol start=\"2\">\n<li>难以查找痕迹</li>\n<li>其他</li>\n</ol>\n<ul>\n<li>DLL注人技术主要用在代码量大且复杂的时候，而代码注人技术则适用于代码量小且简单的情况。</li>\n</ul>\n<h2 id=\"27-3-练习实例\"><a href=\"#27-3-练习实例\" class=\"headerlink\" title=\"27.3 练习实例\"></a>27.3 练习实例</h2><h3 id=\"27-3-1-测试\"><a href=\"#27-3-1-测试\" class=\"headerlink\" title=\"27.3.1 测试\"></a>27.3.1 测试</h3><ul>\n<li>运行notepad.exe</li>\n<li>以管理员模式运行codeinjection.exe，发现notepad.exe上弹出窗口</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221153109197.png\" alt=\"image-20231221153109197\"></p>\n<h2 id=\"27-4-CodeInjection-cpp\"><a href=\"#27-4-CodeInjection-cpp\" class=\"headerlink\" title=\"27.4 CodeInjection.cpp\"></a>27.4 CodeInjection.cpp</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p><img src=\"/../re-engineer-core-principle-03/image-20231221153307273.png\" alt=\"image-20231221153307273\"></p>\n<ul>\n<li>主要是获取命令行参数，并传入到InjectCode中</li>\n</ul>\n<h3 id=\"ThreadProc-函数\"><a href=\"#ThreadProc-函数\" class=\"headerlink\" title=\"ThreadProc()函数\"></a>ThreadProc()函数</h3><ul>\n<li>该函数是要注入目标进程的代码，是线程函数</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">include <span class=\"token string\">\"windows.h\"</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_THREAD_PARAM</span> \n<span class=\"token punctuation\">&#123;</span>\n    FARPROC pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// LoadLibraryA(), GetProcAddress()</span>\n    <span class=\"token keyword\">char</span>    szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"user32.dll\", \"MessageBoxA\", \"www.reversecore.com\", \"ReverseCore\"</span>\n<span class=\"token punctuation\">&#125;</span> THREAD_PARAM<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PTHREAD_PARAM<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token function\">HMODULE</span> <span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>PFLOADLIBRARYA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n    LPCSTR lpLibFileName\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于GetProcAddress()函数</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token function\">FARPROC</span> <span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>PFGETPROCADDRESS<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n    HMODULE hModule<span class=\"token punctuation\">,</span>\n    LPCSTR lpProcName\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等同于MessageBoxA()函数</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>WINAPI <span class=\"token operator\">*</span>PFMESSAGEBOXA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>\n    HWND hWnd<span class=\"token punctuation\">,</span>\n    LPCSTR lpText<span class=\"token punctuation\">,</span>\n    LPCSTR lpCaption<span class=\"token punctuation\">,</span>\n    UINT uType\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在目标进程中执行代码</span>\nDWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID lParam<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    PTHREAD_PARAM   pParam      <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PTHREAD_PARAM<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">;</span>\n    HMODULE         hMod        <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    FARPROC         pFunc       <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// LoadLibrary()</span>\n    hMod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFLOADLIBRARYA<span class=\"token punctuation\">)</span>pParam<span class=\"token operator\">-></span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pParam<span class=\"token operator\">-></span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"user32.dll\"</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hMod<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GetProcAddress()</span>\n    pFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FARPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFGETPROCADDRESS<span class=\"token punctuation\">)</span>pParam<span class=\"token operator\">-></span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> pParam<span class=\"token operator\">-></span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"MessageBoxA\"</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pFunc<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 前面为了找到目标进程中MessageBoxA的地址</span>\n    <span class=\"token comment\">// MessageBoxA()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PFMESSAGEBOXA<span class=\"token punctuation\">)</span>pFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> pParam<span class=\"token operator\">-></span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pParam<span class=\"token operator\">-></span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>上述代码中实际被注入的是ThreadProc()函数，&#x3D;&#x3D;前面的typedef是针对C语言语法的，不需要注入。&#x3D;&#x3D;</p>\n</li>\n<li><p>整理上面的代码，就是在进行函数调用</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">hMod <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibraryA</span><span class=\"token punctuation\">(</span>\"user32<span class=\"token punctuation\">.</span>dll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npFunc<span class=\"token operator\">=</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod，“MessageBoxA\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pFunc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span>，“www<span class=\"token punctuation\">.</span>reversecore<span class=\"token punctuation\">.</span>com”，“ReverseCore\"，MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>Q：代码注入的核心</strong></p>\n<ul>\n<li><strong>是注入可独立运行的代码，为此需要同时注入代码和数据，并且需要能够准确引用注入的数据。</strong></li>\n<li>上面用了各种函数，LoadLibraryA()、ThreadProc()等，并没有直接调用相关API，也没有直接定义字符串，都是通过THREAD_PARAM结构体，以线程参数的形式传入</li>\n</ul>\n<p><strong>Q：如果ThreadProc()函数在一个普通程序中，函数代码会是</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221160850298.png\" alt=\"image-20231221160850298\"></p>\n<ul>\n<li><p>在编译代码后，用调试器调试生成的文件</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221160917475.png\" alt=\"image-20231221160917475\"></p>\n</li>\n<li><p>如果在10001000到10001016区域注入其他的进程，那代码会无法运行，因为运行函数所需要的数据不在当前进程中，要使代码正常工作，必须向10009290这些地址注入正确的字符串，同时Push的地址也要正确。</p>\n</li>\n</ul>\n<p><strong>Q：为了满足代码和数据同时注入的条件，以及正确引用</strong></p>\n<ul>\n<li>用THREAD_PARAM结构体来接收2个API地址和4个字符串数据</li>\n<li>就理解成在目标进程内创建了一个线程，并用THREAD_PARAM结构体接收了线程参数，代码和数据是同时注入的，这样就不会有问题了</li>\n</ul>\n<p><strong>Q：使用调试器调试ThreadProc()函数</strong></p>\n<ul>\n<li>可以看到所有重要的数据都是从lParam[EBP + 8]处获取的</li>\n<li>和图27-8最大的不同是，并没有直接引用硬编码地址的数据，(<strong>我的理解是把参数加载到了寄存器中)，是可以独立运行的代码</strong></li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221162003903.png\" alt=\"image-20231221162003903\"></p>\n<h3 id=\"InjectCode函数\"><a href=\"#InjectCode函数\" class=\"headerlink\" title=\"InjectCode函数\"></a>InjectCode函数</h3><ul>\n<li>是代码注入的核心部分</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 向目标进程中注入代码与数据</span>\nBOOL <span class=\"token function\">InjectCode</span><span class=\"token punctuation\">(</span>DWORD dwPID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HMODULE         hMod            <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    THREAD_PARAM    param           <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    HANDLE          hProcess        <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    HANDLE          hThread         <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LPVOID          pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    DWORD           dwSize          <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set THREAD_PARAM</span>\n\t<span class=\"token comment\">// 设置参数</span>\n    param<span class=\"token punctuation\">.</span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LoadLibraryA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    param<span class=\"token punctuation\">.</span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetProcAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageBoxA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.reversecore.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy_s</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span>szBuf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReverseCore\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Open Process</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// dwDesiredAccess</span>\n                                  FALSE<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// bInheritHandle</span>\n                                  dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// dwProcessId</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OpenProcess() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Allocation for THREAD_PARAM</span>\n    dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>THREAD_PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// hProcess</span>\n                                      <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// lpAddress</span>\n                                      dwSize<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// dwSize</span>\n                                      MEM_COMMIT<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// flAllocationType</span>\n                                      PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// flProtect</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAllocEx() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 向dwPID进程中写入所需的参数</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// hProcess</span>\n                            pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// lpBaseAddress</span>\n                            <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>param<span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// lpBuffer</span>\n                            dwSize<span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// nSize</span>\n                            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                          <span class=\"token comment\">// [out] lpNumberOfBytesWritten</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WriteProcessMemory() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Allocation for ThreadProc()</span>\n\t<span class=\"token comment\">// 向dwPID进程中写入ThreadProc函数</span>\n    dwSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>InjectCode <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>ThreadProc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// hProcess</span>\n                                      <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// lpAddress</span>\n                                      dwSize<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// dwSize</span>\n                                      MEM_COMMIT<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// flAllocationType</span>\n                                      PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// flProtect</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAllocEx() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// hProcess</span>\n                            pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// lpBaseAddress</span>\n                            <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>ThreadProc<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// lpBuffer</span>\n                            dwSize<span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// nSize</span>\n                            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                          <span class=\"token comment\">// [out] lpNumberOfBytesWritten</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WriteProcessMemory() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 创建远程线程，以执行代码</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// hProcess</span>\n                                       <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// lpThreadAttributes</span>\n                                       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// dwStackSize</span>\n                                       <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// lpStartAddress</span>\n                                       pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// lpParameter</span>\n                                       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// dwCreationFlags</span>\n                                       <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// lpThreadId</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateRemoteThread() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>与DLL注入非常相似，在这个函数中，InjectCode()函数的THREAD_PARAM部分用来设置THREAD_PARAM的结构体变量，会注入目标进程，并以参数形式传递给ThreadProc()函数</p>\n</li>\n<li><p>设置好THREAD_PARAM结构体后，接着调用了一系列API函数，整理如下：</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231221163029875.png\" alt=\"image-20231221163029875\"></p>\n<ul>\n<li>主要是在目标进程中分别为data和code分配内存，并把它们注入目标进程</li>\n<li>最后调用CreateRemoteThread() API，执行远程线程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"27-5-代码注入调试\"><a href=\"#27-5-代码注入调试\" class=\"headerlink\" title=\"27.5 代码注入调试\"></a>27.5 代码注入调试</h2><h3 id=\"27-5-1-调试notepad-exe\"><a href=\"#27-5-1-调试notepad-exe\" class=\"headerlink\" title=\"27.5.1 调试notepad.exe\"></a>27.5.1 调试notepad.exe</h3><p>&#x3D;&#x3D;这里我的调试一直有问题&#x3D;&#x3D;</p>\n<h1 id=\"0x28-使用汇编语言编写注入代码\"><a href=\"#0x28-使用汇编语言编写注入代码\" class=\"headerlink\" title=\"0x28 使用汇编语言编写注入代码\"></a>0x28 使用汇编语言编写注入代码</h1><p>之前的注入代码，ThreadProc()函数，是用C编写的</p>\n<p>现在要用纯汇编语言编写ThreadProc()函数，注入notepad.exe进程</p>\n<h2 id=\"28-2-汇编编程\"><a href=\"#28-2-汇编编程\" class=\"headerlink\" title=\"28.2 汇编编程\"></a>28.2 汇编编程</h2><p>本章使用OllbDbg的汇编功能编写程序</p>\n<h2 id=\"28-3-Ollydbg的汇编命令\"><a href=\"#28-3-Ollydbg的汇编命令\" class=\"headerlink\" title=\"28.3 Ollydbg的汇编命令\"></a>28.3 Ollydbg的汇编命令</h2><p><strong>Q：使用Ollydbg的New orign here</strong></p>\n<ul>\n<li><p>找到代码的最顶端</p>\n</li>\n<li><p>右键执行New orign  here，此时的EIP变成了当前的地址401000</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20231222110455200.png\" alt=\"image-20231222110455200\"></p>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>New orign here只是改变了EIP的值，和直接调试到指定地址不一样，因为栈和寄存器中的内容没改变</p>\n\n</div>\n<h3 id=\"28-3-1-编写ThreadProc-函数\"><a href=\"#28-3-1-编写ThreadProc-函数\" class=\"headerlink\" title=\"28.3.1 编写ThreadProc()函数\"></a>28.3.1 编写ThreadProc()函数</h3><p>使用汇编语言编写ThreadProc()函数，与c语言不同之处在于需要的data已经包含在code中了</p>\n<p><strong>Q：首先写汇编代码</strong></p>\n<ul>\n<li>从401001到40102E处按照书上编写汇编代码，用space打开assemble窗口</li>\n<li>在401033处用ctrl +  E打开编辑窗口，输入ReverseCore，因为字符串最后必须以NULL结束，所以在最后输入00</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106153327763.png\" alt=\"image-20240106153327763\"></p>\n<p><strong>Q：输入完成后，可以看到下面的区域</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106153616419.png\" alt=\"image-20240106153616419\"></p>\n<ul>\n<li>也就是这部分显示的是我刚才输入的ReverseCore字符串，但是使用了很奇怪的指令显示</li>\n<li>Ollydbg的Disassemble(反汇编器)把字符串误认为了是IA-32指令，因为我们在code的位置输入了字符串</li>\n</ul>\n<p><strong>Q：选中字符串区域，执行Analysis(快捷键ctrl + A)，得到下面的结果</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106164906176.png\" alt=\"image-20240106164906176\"></p>\n<ul>\n<li>书上说在401033处可以看到前面输入的字符串，但是我这里并没有看到</li>\n<li>Ollydbg无法将代码和数据100%的区分开</li>\n<li>使用右键可以remove analysis，使代码变回原来的样子</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>Ollydbg的Analysis命令用来再次分析代码，在分析Unpack(解码)的代码时经常用到</p>\n</p>\n</div>\n<p><strong>Q：按照书上继续编写汇编代码，编写完成后，如下所示</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106155423819.png\" alt=\"image-20240106155423819\"></p>\n<h3 id=\"28-3-2-保存文件\"><a href=\"#28-3-2-保存文件\" class=\"headerlink\" title=\"28.3.2 保存文件\"></a>28.3.2 保存文件</h3><ul>\n<li>编写完成后，鼠标右键copy to executable all modifications，选择copy all</li>\n</ul>\n<h2 id=\"28-4-编写代码注入程序\"><a href=\"#28-4-编写代码注入程序\" class=\"headerlink\" title=\"28.4 编写代码注入程序\"></a>28.4 编写代码注入程序</h2><p><strong>Q：在内存窗口转到401000地址处</strong></p>\n<ul>\n<li><p>由于前面创建的asmtest_patch.exe的起始地址是401000，所以转到这个地址</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106160309814.png\" alt=\"image-20240106160309814\"></p>\n</li>\n<li><p>ThreadProc()函数的地址区间为(401000 到401061)，也就是上面汇编程序的地址区间，选中该地址区域，执行copy to file ，保存为.txt文件</p>\n</li>\n</ul>\n<p><strong>Q：打开刚才保存的.txt文件，去除不必要的部分，给每个字节前面增加0x</strong></p>\n<ul>\n<li>这就看起来很像C语言的字节数组，这就是要注入的Hex代码，CodeInjection2.cpp中会用到</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106161522635.png\" alt=\"image-20240106161522635\"></p>\n<h3 id=\"28-4-2-CodeInjection-cpp\"><a href=\"#28-4-2-CodeInjection-cpp\" class=\"headerlink\" title=\"28.4.2 CodeInjection.cpp\"></a>28.4.2 CodeInjection.cpp</h3><ul>\n<li>刚才.txt的内容被保存到了g_InjectionCode数组中</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_THREAD_PARAM</span> \n<span class=\"token punctuation\">&#123;</span>\n    FARPROC pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// LoadLibraryA(), GetProcAddress()</span>\n<span class=\"token punctuation\">&#125;</span> THREAD_PARAM<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PTHREAD_PARAM<span class=\"token punctuation\">;</span>\n\nBYTE g_InjectionCode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">0x55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nBOOL <span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>LPCTSTR lpszPrivilege<span class=\"token punctuation\">,</span> BOOL bEnablePrivilege<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 同上</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBOOL <span class=\"token function\">InjectCode</span><span class=\"token punctuation\">(</span>DWORD dwPID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    HMODULE         hMod            <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    THREAD_PARAM    param           <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    HANDLE          hProcess        <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    HANDLE          hThread         <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LPVOID          pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    hMod <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set THREAD_PARAM</span>\n\t<span class=\"token comment\">// 获得LoadLibraryA与GetProcAddress的地址</span>\n    param<span class=\"token punctuation\">.</span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LoadLibraryA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    param<span class=\"token punctuation\">.</span>pFunc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hMod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetProcAddress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Open Process</span>\n\t<span class=\"token comment\">// 打开目标进程</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// dwDesiredAccess</span>\n                                  FALSE<span class=\"token punctuation\">,</span>                            <span class=\"token comment\">// bInheritHandle</span>\n                                  dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>                         <span class=\"token comment\">// dwProcessId</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OpenProcess() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Allocation for THREAD_PARAM</span>\n\t<span class=\"token comment\">// 在目标进程中分配内存pRemoteBuf[0]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// hProcess</span>\n                                         <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// lpAddress</span>\n                                         <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>THREAD_PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// dwSize</span>\n                                         MEM_COMMIT<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// flAllocationType</span>\n                                         PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>         <span class=\"token comment\">// flProtect</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAllocEx() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 在pRemoteBuf[0]中写入param</span>\n\t<span class=\"token comment\">// 在目标进程中写入LoadLibraryA与GetProcAddress的地址</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                               <span class=\"token comment\">// hProcess</span>\n                            pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\">// lpBaseAddress</span>\n                            <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>param<span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// lpBuffer</span>\n                            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>THREAD_PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// nSize</span>\n                            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">// [out] lpNumberOfBytesWritten</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WriteProcessMemory() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Allocation for ThreadProc()</span>\n\t<span class=\"token comment\">// 分配内存</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// hProcess</span>\n                                         <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// lpAddress</span>\n                                         <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>g_InjectionCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// dwSize</span>\n                                         MEM_COMMIT<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// flAllocationType</span>\n                                         PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// flProtect</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAllocEx() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 将ThreadProc的hex代码写入到pRemoteBuf[1]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                               <span class=\"token comment\">// hProcess</span>\n                            pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\">// lpBaseAddress</span>\n                            <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>g_InjectionCode<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// lpBuffer</span>\n                            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>g_InjectionCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// nSize</span>\n                            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>                                 <span class=\"token comment\">// [out] lpNumberOfBytesWritten</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WriteProcessMemory() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 创建远程线程</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// hProcess</span>\n                                       <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// lpThreadAttributes</span>\n                                       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// dwStackSize</span>\n                                       <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// lpStartAddress</span>\n                                       pRemoteBuf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// lpParameter</span>\n                                       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// dwCreationFlags</span>\n                                       <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>                     <span class=\"token comment\">// lpThreadId</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateRemoteThread() fail : err_code = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    DWORD dwPID     <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n USAGE  : %s &lt;pid>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// change privilege</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">SetPrivilege</span><span class=\"token punctuation\">(</span>SE_DEBUG_NAME<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// code injection</span>\n    dwPID <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">atol</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InjectCode</span><span class=\"token punctuation\">(</span>dwPID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Q：代码注入的InjectCode函数和汇编编写的注入相比较</strong></p>\n<p><strong>Q：代码注入</strong></p>\n<ol>\n<li><p>用C语言编写ThreadProc()函数</p>\n</li>\n<li><p>代码注入的InjectCode函数的THREAD_PARAM中包含库地址、数据参数ReverseCore等等</p>\n</li>\n<li><p>在InjectCode中，设置THREAD_PARAM，包含设置字符串。</p>\n</li>\n<li><p>分配THREAD_PARAM内存，写入THREAD_PARAM</p>\n</li>\n<li><p>分配code内存，写入ThreadProc()</p>\n</li>\n<li><p>调用CreateRemoteThread执行函数</p>\n</li>\n</ol>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106163117178.png\" alt=\"image-20240106163117178\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106163321688.png\" alt=\"image-20240106163321688\"></p>\n<p><strong>汇编编写的注入</strong></p>\n<ol>\n<li>用汇编编写ThreadProc()函数，并保存它的内存区域。在g_InjectionCode数组中引用ThreadProc()函数</li>\n<li>设置Param。这里只设置库地址，不需要设置字符串，因为已经包裹在ThreadProc()函数中了</li>\n<li>分配param内存，设置Param</li>\n<li>分配code内存，设置为g_InjectionCode</li>\n<li>调用CreateRemoteThread执行</li>\n</ol>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106163239053.png\" alt=\"image-20240106163239053\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106162941052.png\" alt=\"image-20240106162941052\"></p>\n<h2 id=\"28-5-调试练习\"><a href=\"#28-5-调试练习\" class=\"headerlink\" title=\"28.5 调试练习\"></a>28.5 调试练习</h2><p>按照书上操作，让它停在指定位置</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106170558355.png\" alt=\"image-20240106170558355\"></p>\n<h2 id=\"28-6-详细分析之前编写的ThreadProc\"><a href=\"#28-6-详细分析之前编写的ThreadProc\" class=\"headerlink\" title=\"28.6 详细分析之前编写的ThreadProc()\"></a>28.6 详细分析之前编写的ThreadProc()</h2><p><strong>Q：生成栈帧指令，记住55 8BEC</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106165150336.png\" alt=\"image-20240106165150336\"></p>\n<ul>\n<li>因为后面会压字符串入栈，这里生成的栈帧就可以在ThreadProc()函数终止时把栈清理干净</li>\n</ul>\n<h3 id=\"THREAD-PARAM指针\"><a href=\"#THREAD-PARAM指针\" class=\"headerlink\" title=\"THREAD_PARAM指针\"></a>THREAD_PARAM指针</h3><p><img src=\"/../re-engineer-core-principle-03/image-20240106165325013.png\" alt=\"image-20240106165325013\"></p>\n<ul>\n<li><p>ESP + 8是传入函数的第一个参数，这里指THREAD_PARAM指针</p>\n</li>\n<li><p>THREAD_PARAM结构体的定义，它的成员是两个函数指针</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106165556257.png\" alt=\"image-20240106165556257\"></p>\n</li>\n<li><p>执行完这条指令后，ESI的值变为00E80000，查看内存区域，用Long address显示，看到了loadlibraryA和GetProcAddress的值</p>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106180300903.png\" alt=\"image-20240106180300903\"></p>\n<h3 id=\"User32-dll字符串\"><a href=\"#User32-dll字符串\" class=\"headerlink\" title=\"User32.dll字符串\"></a>User32.dll字符串</h3><p><strong>Q：下面这3行代码把User32.dll字符串压入栈中</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106180508094.png\" alt=\"image-20240106180508094\"></p>\n<ul>\n<li><p>这种技术仅用于汇编语言编写的程序中</p>\n</li>\n<li><p>6C是ACSII码值，表示的是字母”l”，所以最终压入栈的字符串是\\0\\0ll</p>\n</li>\n<li><p>下面两条push用来把字符串”d.23”和”resu”压入栈中</p>\n</li>\n<li><p>由于栈的逆向扩展和x86cpu采用小端序存储的方式，所以要这么压入栈</p>\n<ul>\n<li>因为栈是逆序存储，所以要最后压resu</li>\n<li>因为是小端序，所以是resu</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：PUSH ESP指令</strong></p>\n<ul>\n<li>ESP中存的是user32.dll字符串的起始地址</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106214842269.png\" alt=\"image-20240106214842269\"></p>\n<ul>\n<li><p>使用push指令可以把指定字符串压入栈，注入代码时，不用再另外注入字符串数据</p>\n</li>\n<li><p>32位的os中，一次只能将4bytes的数据压入栈</p>\n</li>\n<li><p>LoadLibraryA() API拥有一个参数，用来接收一个字符串的地址，该字符串是要加载的DLL文件的名称</p>\n</li>\n<li><p>当前ESP的值是00F1FF68，是user32.dll字符串的起始地址</p>\n<ul>\n<li>因为字符串压入栈中，相当于保存在了内存中，这里是Push esp保存的也是字符串的起始地址(也是在栈内的地址)，当你调用函数的时候，首先读取到的是00F1FF68，也就是会去00F1FF68处取字符串，所以没有问题，就应该压入ESP。</li>\n<li>因为后来会清除栈帧，这里也说明了字符串是临时存储的，并不会一直保存在内存中</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107143237442.png\" alt=\"image-20240107143237442\"></p>\n</li>\n</ul>\n<h3 id=\"调用LoadLibraryA-“user32-dll”\"><a href=\"#调用LoadLibraryA-“user32-dll”\" class=\"headerlink\" title=\"调用LoadLibraryA(“user32.dll”)\"></a><strong>调用LoadLibraryA(“user32.dll”)</strong></h3><p><img src=\"/../re-engineer-core-principle-03/image-20240106215119467.png\" alt=\"image-20240106215119467\"></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106215254062.png\" alt=\"image-20240106215254062\"></p>\n<ul>\n<li><p>由前面可知，ESI中存储的是LoadLibraryA()的起始地址，所以这里是在调用LoadLibraryA()函数，同时会加载作为参数传入的user32.dll，由于notepad.exe已经加载了user32.dll，所以只会返回加载的地址</p>\n<ul>\n<li>CALL DS:[ESI] &#x3D;&#x3D;  CALL [E80000] &#x3D;&#x3D; CALL 766C2450 &#x3D;&#x3D; CALL LoadLibraryA()</li>\n</ul>\n</li>\n<li><p>函数返回的地址保存在EAX中，此时EAX的值是75B60000</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106215707655.png\" alt=\"image-20240106215707655\"></p>\n</li>\n<li><p>用alt + e查看 executable modules，可以看到当前程序中加载的所有dll，可以看到user32.dll的base就是75B60000</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106215755477.png\" alt=\"image-20240106215755477\"></p>\n</li>\n</ul>\n<h3 id=\"调用GetProcAddress-hMod-“MessageBoxA”\"><a href=\"#调用GetProcAddress-hMod-“MessageBoxA”\" class=\"headerlink\" title=\"调用GetProcAddress(hMod, “MessageBoxA”)\"></a>调用GetProcAddress(hMod, “MessageBoxA”)</h3><p><strong>Q：下面这三条push指令把字符串MessageBoxA压入栈</strong></p>\n<ul>\n<li>和前面一样，还是栈逆序+小端序</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106215946112.png\" alt=\"image-20240106215946112\"></p>\n<p><strong>Q：调用GetProcAddress(hMod, “MessageBoxA”)</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106220431543.png\" alt=\"image-20240106220431543\"></p>\n<ul>\n<li><p>这里还是和前面一样，调用函数之前，先Push ESP</p>\n</li>\n<li><p>然后Push EAX，是刚才user32.dll的地址，把它作为函数的第一个参数hMod传入</p>\n</li>\n<li><p>调用GetProcAddress函数，执行函数之后，useer32.dll.MessageBoxA() API的起始地址就会保存到EAX寄存器，</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106220822526.png\" alt=\"image-20240106220822526\"></p>\n</li>\n</ul>\n<p><strong>Q：压入MessageBoxA()函数的第四个参数</strong></p>\n<ul>\n<li><p>MessageBoxA() API如下：共有4个参数</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240106221004641.png\" alt=\"image-20240106221004641\"></p>\n</li>\n<li><p>Push 0压入第四个参数，也就是uType的值，当它是0，表示消息对话框为MB_OK，仅显示一个OK按钮</p>\n</li>\n</ul>\n<p><strong>Q：压入MessageBoxA()函数的第三个参数 ReverseCore</strong></p>\n<ul>\n<li>这里用CALL指令将包含在代码间的字符串数据地址压入栈<ul>\n<li>之前是用Push直接压入栈的</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107132923789.png\" alt=\"image-20240107132923789\"></p>\n<ul>\n<li><p>很明显从33 到3E是程序的代码区，但是内容实际上是ReverseCore字符串，也就是ReverseCore字符串的首地址是EA0033，被用作第三个参数lpCaption</p>\n<ul>\n<li><strong>这里发现33 到3E是无法设置断点的，因为是字符串区域，并非代码区域，命令只会进入到CALL指令中接着执行</strong></li>\n</ul>\n</li>\n<li><p>将字符串作为参数传递给函数前，需要先把字符串地址压入栈</p>\n</li>\n<li><p>用f7进入call 函数后，发现栈内已经有EA0033</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107133243314.png\" alt=\"image-20240107133243314\"></p>\n<ul>\n<li>这是因为CALL 00EA003F这个函数调用指令之前，会先push 返回地址，也就是当前指令的下一条地址，即00EA0033，再jump 到00EA003F，所以也就把EA0033的字符串压入到栈中</li>\n</ul>\n</li>\n</ul>\n<p><strong>Q：压入MessageBoxA()的第二个参数lpText</strong></p>\n<p>（地址前缀不太一样，因为我重新运行了）</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107135711612.png\" alt=\"image-20240107135711612\"></p>\n<ul>\n<li><p>44到57同样是字符串区域，并非代码</p>\n</li>\n<li><p>这里是压入<a href=\"http://www.reversecore.com字符串/\">www.reversecore.com字符串</a></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107135947839.png\" alt=\"image-20240107135947839\"></p>\n</li>\n</ul>\n<p><strong>Q：压入MessageBoxA()的第一个参数 NULL</strong></p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107140051213.png\" alt=\"image-20240107140051213\"></p>\n<ul>\n<li><p>PUSH 0指令将MessageBoxA()API的第一个参数hWnd压人栈，该参数用来确定消息对话框所属的窗口句柄，这里压入NULL值，创建一个不属于任何窗口的消息对话框。</p>\n</li>\n<li><p>接着用CALL EAX，调用MessageBoxA() API，EAX中存储着MessageBoxA()的起始地址，是调用GetProcAddress后返回的值</p>\n</li>\n<li><p>执行后，弹出对话框</p>\n<p><img src=\"/../re-engineer-core-principle-03/image-20240107140539783.png\" alt=\"image-20240107140539783\"></p>\n</li>\n</ul>\n<h3 id=\"设置ThreadProc-函数的返回值\"><a href=\"#设置ThreadProc-函数的返回值\" class=\"headerlink\" title=\"设置ThreadProc()函数的返回值\"></a>设置ThreadProc()函数的返回值</h3><p><img src=\"/../re-engineer-core-principle-03/image-20240107140948165.png\" alt=\"image-20240107140948165\"></p>\n<ul>\n<li>注人notepad.exe进程的代码(ThreadProc()线程函数)执行完之前，还需要做一些准备工作。</li>\n<li>用XOR EAX EAX指令将线程函数的返回值设置为0。<strong>前面学过函数的返回值使用EAX寄存器</strong></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>XOR EAX EAX指令能够又快又好地将EAX寄存器初始化为0(对 CPU而言，它比使用MOV EAX 0指令更简单快捷)。</p>\n\n</div>\n<h3 id=\"删除栈帧及返回返回\"><a href=\"#删除栈帧及返回返回\" class=\"headerlink\" title=\"删除栈帧及返回返回\"></a>删除栈帧及返回返回</h3><p><img src=\"/../re-engineer-core-principle-03/image-20240107141605692.png\" alt=\"image-20240107141605692\"></p>\n<ul>\n<li>把EBP的值给ESP,也就是清除栈帧，POP EBP，恢复原来的栈base指针，画画图就明白了</li>\n</ul>\n","text":"引言 第三部分冲冲冲 这一部分要把没见过的汇编单独整理到一个文档里 0x21 Windows消息钩取21.1 钩子(Hook)Q：钩子 就是偷看或截取信息所有的手段或者工具 21.2 消息钩子Q：常规Windows信息流 发生键盘输人事件时，WM_KEYDOWN消息被添加到[OS...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"re","slug":"re","count":7,"path":"api/tags/re.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x21-Windows%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">0x21 Windows消息钩取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-1-%E9%92%A9%E5%AD%90-Hook\"><span class=\"toc-text\">21.1 钩子(Hook)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-2-%E6%B6%88%E6%81%AF%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">21.2 消息钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-3-SetWindowsHookEx\"><span class=\"toc-text\">21.3 SetWindowsHookEx()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-4-%E9%94%AE%E7%9B%98%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">21.4 键盘消息钩取练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-4-1-%E7%BB%83%E4%B9%A0HookMain-exe\"><span class=\"toc-text\">21.4.1 练习HookMain.exe</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-4-2-%E5%88%86%E6%9E%90%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">21.4.2 分析源代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-5-%E8%B0%83%E8%AF%95%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">21.5 调试练习</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x23-DLL%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">0x23 DLL注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-1-DLL%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">23.1 DLL注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-2-DLL%E6%B3%A8%E5%85%A5%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">23.2 DLL注入示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-2-1-%E4%BF%AEbug\"><span class=\"toc-text\">23.2.1 修bug</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-2-2-%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">23.2.2 消息钩取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-2-3-API%E9%92%A9%E5%8F%96\"><span class=\"toc-text\">23.2.3 API钩取</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-3-DLL%E6%B3%A8%E5%85%A5%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">23.3 DLL注入的实现方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-4-CreateRemoteThread\"><span class=\"toc-text\">23.4 CreateRemoteThread()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0myhack-dll\"><span class=\"toc-text\">练习myhack.dll</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-4-2-%E5%88%86%E6%9E%90%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">23.4.2 分析源代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#myhack-dll\"><span class=\"toc-text\">myhack.dll</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#InjectDll-cpp\"><span class=\"toc-text\">InjectDll.cpp</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-4-3-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">23.4.3 调试方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-5-AppInit-DLLs\"><span class=\"toc-text\">23.5 AppInit_DLLs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-5-1-%E5%88%86%E6%9E%90%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">23.5.1 分析源代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#myhack2-cpp\"><span class=\"toc-text\">myhack2.cpp</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-5-2-%E7%BB%83%E4%B9%A0myhack2-dll\"><span class=\"toc-text\">23.5.2 练习myhack2.dll</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-6-SetWindowsHookEx\"><span class=\"toc-text\">23.6  SetWindowsHookEx()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-7-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">23.7 小结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x24-DLL%E5%8D%B8%E8%BD%BD\"><span class=\"toc-text\">0x24 DLL卸载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#24-1-DLL%E5%8D%B8%E8%BD%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">24.1 DLL卸载的工作原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#24-2-%E5%AE%9E%E7%8E%B0DLL%E5%8D%B8%E8%BD%BD\"><span class=\"toc-text\">24.2 实现DLL卸载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-2-1-%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8B%E4%B8%AD%E5%8A%A0%E8%BD%BD%E7%9A%84DLL%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">24.2.1 获取进程中加载的DLL信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-2-2-%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8F%A5%E6%9F%84\"><span class=\"toc-text\">24.2.2 获取目标进程的句柄</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-2-3-%E8%8E%B7%E5%8F%96FreeLibrary-API%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">24.2.3 获取FreeLibrary() API地址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x25-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9PE%E5%8A%A0%E8%BD%BDDLL\"><span class=\"toc-text\">0x25 通过修改PE加载DLL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-1-%E7%BB%83%E4%B9%A0%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">25.1 练习文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-1-1-TextView-exe\"><span class=\"toc-text\">25.1.1 TextView.exe</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-1-2-TextView-patched-exe\"><span class=\"toc-text\">25.1.2 TextView_patched.exe</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-2-%E6%BA%90%E4%BB%A3%E7%A0%81myhack3-cpp\"><span class=\"toc-text\">25.2 源代码myhack3.cpp</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-2-1-DllMain\"><span class=\"toc-text\">25.2.1 DllMain()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-2-2-DownloadURL\"><span class=\"toc-text\">25.2.2 DownloadURL()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-2-3-DropFile\"><span class=\"toc-text\">25.2.3 DropFile()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-2-4-dummy\"><span class=\"toc-text\">25.2.4 dummy()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-3-%E4%BF%AE%E6%94%B9TextView-exe%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">25.3 修改TextView.exe文件的准备工作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-4-%E4%BF%AE%E6%94%B9TextView-exe\"><span class=\"toc-text\">25.4 修改TextView.exe</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-4-1-%E4%BF%AE%E6%94%B9%E5%AF%BC%E5%85%A5%E8%A1%A8%E7%9A%84RVA%E5%80%BC\"><span class=\"toc-text\">25.4.1 修改导入表的RVA值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-4-2-%E5%88%A0%E9%99%A4%E7%BB%91%E5%AE%9A%E5%AF%BC%E5%85%A5%E8%A1%A8\"><span class=\"toc-text\">25.4.2 删除绑定导入表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-4-3-%E5%88%9B%E5%BB%BA%E6%96%B0IDT\"><span class=\"toc-text\">25.4.3 创建新IDT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-4-4-%E8%AE%BE%E7%BD%AEName%E3%80%81INT%E3%80%81IAT\"><span class=\"toc-text\">25.4.4 设置Name、INT、IAT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-4-5-%E4%BF%AE%E6%94%B9IAT%E8%8A%82%E5%8C%BA%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC\"><span class=\"toc-text\">25.4.5 修改IAT节区的属性值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-5-%E6%A3%80%E6%B5%8B%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">25.5 检测验证</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x26-PE-Tools\"><span class=\"toc-text\">0x26 PE Tools</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#26-1-PE-Tools\"><span class=\"toc-text\">26.1 PE Tools</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-1-1-%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%BD%AC%E5%82%A8\"><span class=\"toc-text\">26.1.1 进程内存转储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-1-2-PE%E7%BC%96%E8%BE%91%E5%99%A8\"><span class=\"toc-text\">26.1.2 PE编辑器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x27-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">0x27 代码注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-1-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">27.1 代码注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-2-DLL%E6%B3%A8%E5%85%A5%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">27.2 DLL注入与代码注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-3-%E7%BB%83%E4%B9%A0%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">27.3 练习实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-3-1-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">27.3.1 测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-4-CodeInjection-cpp\"><span class=\"toc-text\">27.4 CodeInjection.cpp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#main%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">main函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ThreadProc-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">ThreadProc()函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InjectCode%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">InjectCode函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-5-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">27.5 代码注入调试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-5-1-%E8%B0%83%E8%AF%95notepad-exe\"><span class=\"toc-text\">27.5.1 调试notepad.exe</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x28-%E4%BD%BF%E7%94%A8%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">0x28 使用汇编语言编写注入代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-2-%E6%B1%87%E7%BC%96%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">28.2 汇编编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-3-Ollydbg%E7%9A%84%E6%B1%87%E7%BC%96%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">28.3 Ollydbg的汇编命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-3-1-%E7%BC%96%E5%86%99ThreadProc-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">28.3.1 编写ThreadProc()函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-3-2-%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">28.3.2 保存文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-4-%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">28.4 编写代码注入程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28-4-2-CodeInjection-cpp\"><span class=\"toc-text\">28.4.2 CodeInjection.cpp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-5-%E8%B0%83%E8%AF%95%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">28.5 调试练习</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-6-%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%E4%B9%8B%E5%89%8D%E7%BC%96%E5%86%99%E7%9A%84ThreadProc\"><span class=\"toc-text\">28.6 详细分析之前编写的ThreadProc()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#THREAD-PARAM%E6%8C%87%E9%92%88\"><span class=\"toc-text\">THREAD_PARAM指针</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#User32-dll%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">User32.dll字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8LoadLibraryA-%E2%80%9Cuser32-dll%E2%80%9D\"><span class=\"toc-text\">调用LoadLibraryA(“user32.dll”)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8GetProcAddress-hMod-%E2%80%9CMessageBoxA%E2%80%9D\"><span class=\"toc-text\">调用GetProcAddress(hMod, “MessageBoxA”)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEThreadProc-%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">设置ThreadProc()函数的返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%A0%88%E5%B8%A7%E5%8F%8A%E8%BF%94%E5%9B%9E%E8%BF%94%E5%9B%9E\"><span class=\"toc-text\">删除栈帧及返回返回</span></a></li></ol></li></ol></li></ol>","author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"leetcode刷题","uid":"2db13004f026edb4056c7fbb5f3564d1","slug":"leetcode刷题","date":"2023-12-25T02:34:41.000Z","updated":"2023-12-25T14:23:23.164Z","comments":true,"path":"api/articles/leetcode刷题.json","keywords":null,"cover":[],"text":"数组二分法思路这里直接用左闭右开的写法，定义target在[left,right)区间内 那么有下面几点： while(left &lt; right)，因为left &#x3D;&#x3D; right是没有意义的 if(nums[middle] &gt; target)，ri...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"HOPPER-CCS-2023","uid":"ac1f5803919fdd2ccf7eeca40ae91dc2","slug":"HOPPER-CCS-2023","date":"2023-11-14T02:06:39.000Z","updated":"2023-11-16T14:37:40.378Z","comments":true,"path":"api/articles/HOPPER-CCS-2023.json","keywords":null,"cover":[],"text":"ABSTRACTQ：现有的fuzz drivers的问题 不能完全覆盖entries in libraries 他们的质量取决于开发人员对于代码的理解 Q：提出的Hopper 可以fuzz libraries 不需要其他的知识去craft fuzz drivers 把fuzz l...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"论文","slug":"论文","count":4,"path":"api/tags/论文.json"}],"author":{"name":"XyM4ster","slug":"blog-author","avatar":"/images/picture.jpg","link":"/","description":"热爱网络安全的BITer","socials":{"github":"https://github.com/XyM4ster","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}